<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://fooqri.github.io/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2015-06-09T12:21:21-07:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Revisiting Buyer's Agent app using React.js]]></title>
    <link href="http://fooqri.github.io/blog/2015/06/09/revisiting-buyers-agent-app-using-react-dot-js/"/>
    <updated>2015-06-09T11:45:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/06/09/revisiting-buyers-agent-app-using-react-dot-js</id>
    <content type="html"><![CDATA[<p>In a past post I showed a <a href="http://rwx.io/blog/2014/10/22/mobile-real-estate-app-version-1/">Mobile Real Estate App</a> that was built with Polymer. This time around I will revisit the app but instead use <a href="https://facebook.github.io/react/" target="_blank">react.js</a>. The <strong>Mobile Buyer&rsquo;s Agent</strong> is a simple web based application used to demonstrate a basic React.js mobile web app.The goal is to allows a real estate buyer&rsquo;s agent to deliver a personalized mobile app experience to their clients by adding data to a Google spreadsheet. The agent updates a Google spreadsheet, and the web app loads its data from the spreadsheet.</p>

<p><a href="http://www.poggr.com/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m9" target="_blank"><img src="https://s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent_1.png"></a></p>

<p>This is a demonstration of using a shared <em>Google Spreadsheet</em>  as the data source for a simple web based application. By using poggr.com and <a href="http://facebook.github.io/react/" target="_blank">React.js</a> it is extremely easy to create a web application like the <strong><em><a href="" target="_blank">Mobile Buyer&rsquo;s Agent</a></em></strong>.</p>

<p>The <em>Real Estate Shopper List</em> Google spreadsheet contains properties the agent wishes to present in the app. The neighborhood column is associated with the dropdown box, and allows a simple grouping/categorization of properties. The agent also provides other features and details associated with the properties.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheets/d/1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8/pubhtml" target="_blank"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent2.png" ></a></p>

<p><strong>Note:</strong> if you duplicate the example spreadsheet you must remember to publish it so it can be accessed by the <em>Mobile Buyer&rsquo;s Agent</em> app. If you get an error it is likely you forgotto publish the spreadsheet. To publish a spreadsheet while viewing it, use the file menu on Google Docs and choose <em>&ldquo;publish to the web&rdquo;</em>, and follow the instructions.</p>

<h3>Trying your own spreadsheet</h3>

<p>If you publish your own copy of the spreadsheet you can easily substitute it in the app with a simple url parameter called <strong>sheetid</strong>.</p>

<p>For example if the link your are given when you plublish your spreadsheet is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://docs.google.com/spreadsheets/d/1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8/pubhtml</span></code></pre></td></tr></table></div></figure>


<p>Then your sheetid is <strong>1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8</strong>, and you can use it in this app by using a url with sheetid parameter as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>po.gg/p-kz3NoHhgl:dZkIM34sBnlx::@?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8</span></code></pre></td></tr></table></div></figure>


<p>This will substitue your spreadsheet for the default spreadsheet used in the app.</p>

<p>For info on the code take a look at the <a href="http://www.poggr.com/p-kz3NoHhgl:dbJMG3EjSneg" target="_blank">README</a> document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a New Intel Edison]]></title>
    <link href="http://fooqri.github.io/blog/2015/02/18/seting-up-an-edison/"/>
    <updated>2015-02-18T12:42:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2015/02/18/seting-up-an-edison</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/IMG_4161.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>The Edison is a tiny and amazing computer, and ideal prototyping tool for wearable and IoT experiments. Here are the steps I am currently following to set up the Edison.</p>

<h2>Flashing the Edison</h2>

<p>Like many developers I have Mac, Windows, and Linux laptops but I find that Linux is the best environment for flashing the Edison, even though I do most development on my Mac. I came to this conclusion after trying to recover an Edison with a lost password, the only platform that worked was Linux.</p>

<p>The first step is flashing the Edison. Follow <a href="https://communities.intel.com/docs/DOC-23200">Flashing Edison Linux</a>. You can also try <a href="https://communities.intel.com/docs/DOC-23193">Flashing Edison Mac</a>.</p>

<p>The only change I would recommend is to create a folder that contains the Edison images, and then unzip the downloaded folder into a sub directory named after the build number. Over time you may find yourself flashing to older or newer images based on the project needs.</p>

<h2>Setting up WiFi</h2>

<p>Sparkfun offers a great guide for <a href="https://learn.sparkfun.com/tutorials/edison-getting-started-guide#connecting-to-WiFi">Setting up WiFi</a> on the Edison. This takes only a few minutes and even if you don&rsquo;t plan to use WiFi in your projects it makes working with the Edison easier because you can use SCP and SSH to connect with the Edison over the network.</p>

<h2>Connect to Edison</h2>

<p>For OSX or Linux the best way to connect to the Edison is via SSH. On OSX you can use the name you gave the Edison in the step above. For example <em>ssh root@edison2.local</em> where <em>edison2</em> is the name you gave your Edison. On Linux you will use the Edison&rsquo;s IP address, for example <em>ssh root@10.0.1.12</em>.</p>

<h2>Using Emacs</h2>

<p>If you are an Emacs user then once WiFi is setup you can use <a href="http://www.emacswiki.org/emacs/TrampMode">Emacs Tramp</a> to work with files on the Edison. Just use <em>C-x C-f</em> as usual, but instead of a directory use <em>root@edison2.local</em> or use the ip address for Linux.</p>

<p>Emacs will present a directory of files on the Edison that you can open, or just keep typing the name for auto suggest feature. For example <em>root@edison2.local/home/root/notes.md</em>.</p>

<h2>Setup Bluetooth</h2>

<p>Bluetooth is available in the Edison, but in the default configuration is not enabled at boot. If you are using Bluetooth you will likely want to enable it on every reboot or power cycle.</p>

<h3>Enable Bluetooth at Boot</h3>

<p>Use the <strong>systemctl</strong> command to cause Bluetooth to start automatically</p>

<pre><code> systemctl enable bluetooth
</code></pre>

<h3>Create a BT startup script</h3>

<p>Create a script file with the following five lines (<em>/home/root/btup.sh</em>).</p>

<pre><code> #!/bin/sh
 /usr/sbin/rfkill unblock bluetooth
 /usr/bin/hciconfig hci0 up
 /usr/bin/hciconfig hci0 piscan
 /usr/bin/hciconfig hic0 sspmode 0
</code></pre>

<h3>Make the script executable</h3>

<pre><code> chmod +x /home/root/btup.sh
</code></pre>

<h3>Create a new service file (<em>/lib/systemd/system/btup.service</em>).</h3>

<pre><code> [Unit]
 Description=BTUP
 After=bluetooth.target
 Before=systemd-user-sessions.service
 [Service]
 Type=simple
 RemainAfterExit=true
 ExecStart=/home/root/btup.sh
 Environment="HOME=/home/root"
 WorkingDirectory=/home/root/
 [Install]
 WantedBy=multi-user.target
</code></pre>

<h3>Enable the service</h3>

<pre><code> systemctl enable /lib/systemd/system/btup.service
</code></pre>

<h3>Reboot the Edison</h3>

<pre><code> reboot
</code></pre>

<h2>Create a Backup</h2>

<p>Now is a good time to create a backup of the Edison that can be recovered if you need to return to a clean install. For example you may want to update nodejs, or install node modules, or even other drivers that may cause an issue you want to start over from.</p>

<p>Place a MicroSD card with at least 4GB of available space into the MicroSD slot on the dev kit board where the Edison is installed. Backup the Edison to an image file on the MicroSD. In the example below it is named <em>edison2_backup.img</em>. Make sure the file name has a <em>.img</em> extension. If you have a large MicroSD card you can store multiple backup images from multiple Edisons, making it quick and easy to recover each of them. It is wise to consider a consistent naming system.</p>

<pre><code> dd if=/dev/mmcblk0 of=/media/sdcard/edison2_bk.img
</code></pre>

<h2>Restoring an Edison from Backup</h2>

<p> If you need to restore the Edison from backup just reverse the process</p>

<pre><code> dd if=/media/sdcard/edison2_bk.img of=/dev/mmcblk0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo Caption Challenge - using Facebook Login, S3, and DynamoDb in browser app]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/23/photo-caption-challenge-using-s3-and-dynamodb-in-browser-app/"/>
    <updated>2014-10-23T13:18:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/23/photo-caption-challenge-using-s3-and-dynamodb-in-browser-app</id>
    <content type="html"><![CDATA[<p>One of the challenges of building small mobile web apps without a traditional back-end server is storing global state in a secure way. In my exploration of ways to store state I decided to build a very simple multi-player social app that allows players to participate in a simple photo challenge game. The game author specifies a <em>photo caption</em> and then invites friends to add photo responses that <em>most creatively</em> match the caption. The second feature is to allow people to vote on their favorite photo responses.</p>

<p><a href="http://fooqri.github.io//fooqri.poggr.com/peJE7qM0YUl" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/fooqri-poggs/peJE7qM0YUl/static/images/peJE7qM0YUl_screen.png"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>Such a game would typically require a server to support a few key behaviors:</p>

<ul>
<li><strong>player login</strong>: is needed to connect players with their uploaded photos, and also to limit their votes so as to keep voting fair.</li>
<li><strong>photo storage</strong>: photo upload and storage is needed to store the photos so they can be displayed when the page is loaded. In addition a back-end service is typically used to re-size uploaded images before storing them to reduce storage costs.</li>
<li><strong>global state</strong>: is generally provided by a database that stores information such as: which players have uploaded photos, and where the corresponding photos are located.</li>
</ul>


<p>There are many challenges to running a back-end server to support an app, including configuration, maintenance, and security. In the ideal case one could build all sorts of small fun apps without having to manage any such servers. With the <strong>Photo Caption Challenge</strong> app I explored using the following services instead of running an app server.</p>

<ul>
<li><strong>player login</strong>: I  used Facebook for player login as a way to differentiate players, and connect ids to votes and photos.</li>
<li><strong>photo storage</strong>: I used Amazon S3 for storing photos uploaded by players, and  used <em>canvas</em> and <em>canvas.toBlob()</em> (using <a href="https://github.com/blueimp/javascript-canvas-to-blob">JavaScript Canvas to Blob</a> polyfill) to re-size images and store them in a blob for upload to S3. Thus all image re-sizing is done in the client.</li>
<li><strong>global state</strong>: I used Amazon DynamoDB to provide state via a table that stores information about photo entries and votes.</li>
</ul>


<p>I  also used the Amazon IAM is the way to limit privileges from the client app to the data services (S3 and DynamoDB). For example you want the user to have write/delete access to only their information in the data services, but client API calls to the server can be manipulated, thus authentication information is critical to limiting privileges in accessing the data services.</p>

<p>IAM policies can specify an <em>identity provider</em> like Facebook to make sure to limit access based on current session identity information, and not the API request data. For example you can configure an IAM policy for S3 that secures S3 bucket privileges so that sub-folder privileges are connected to user identity. In the case of &ldquo;Photo Challenge&rdquo; the policy states any logged in Facebook user running the Photo Challenges app will be able to view photos in any sub-folder, but only upload, modify, or delete items that are in a folder that matches their identity provider&rsquo;s assigned userid. It also states that any user can create a folder in the bucket as long as the folder name matches their identity provider&rsquo;s assigned userid.</p>

<p>The Amazon IAM policy for DynamoDB works similarly. Any logged in Facebook user running the Photo Challenges app will be able to query the DB index for the current list of photo entries, but can only add/delete records that have a userId value that matches their identity provider&rsquo;s assigned userid. Thus a user can&rsquo;t spoof who added the record, it is connected to their userId or it is rejected by the IAM policy assigned to the DynamoDB table. For more information see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/FGAC_DDB.html">Fine-Grained Access Control for DynamoDB</a>.</p>

<h2>Conclusion</h2>

<p>In <a href="http://octopress.dev/blog/2014/10/22/mobile-real-estate-app-version-1/">Mobile Real Estate App</a> and <a href="http://octopress.dev/blog/2014/10/15/spreadsheet-driven-web-apps/">Spreadsheet Driven Web Apps</a> I  described a technique for using a Google Spreadsheet to provide web application data, but this works best when the application data is read only. For an app that requires both read, write, and query transactions, a database like DynamoDB is a great solution.</p>

<p>Like many examples on this blog, I built this app using <em><a href="http://www.poggr.com">poggr.com</a></em> because poggs are incredibly flexible and require zero configuration.  Use this app at <a href="http://fooqri.poggr.com/peJE7qM0YUl:dxJ4NmcMAK8x">fooqri.po.gg/peJE7qM0YUl</a> or if you have a poggr account you can clone <a href="http://www.poggr.com/#/projects/project/peJE7qM0YUl">this pogg</a> and use its configuration tool to set up Facebook, S3, IAM, and DynamoDB and have your version of the game running in less than 5 minutes. If you don&rsquo;t have an account you can still check out the pogg&rsquo;s <a href="http://fooqri.poggr.com/peJE7qM0YUl:dxkgN7qMCtLg">README</a> to learn more about how it was build and view the source documents.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Real Estate App - Version 1]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/22/mobile-real-estate-app-version-1/"/>
    <updated>2014-10-22T19:46:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/22/mobile-real-estate-app-version-1</id>
    <content type="html"><![CDATA[<p>I promised a few examples of spreadsheet driven apps. You may remember the <a href="http://rwx.io/blog/2014/10/15/spreadsheet-driven-web-apps/">Hipster List</a> was the first example. These are simple web apps that are initialized using data from a Google Spreadsheet once the user loads them in a browser. Using spreadsheets to keep app information current is easy for anyone. There is even a way for users to point the app at their own Google Spreadsheet if the app developer wants to turn feature that on.</p>

<p>The next example of a spreadsheet driven app (<em>below</em>) is the <strong><em>Mobile Buyer&rsquo;s Agent</em></strong> app. This may take a little time to load because it is an experiment, and thus not using a vulcanized Polymer library, so it is importing lots of individual library documents. Be patient and once cached in your browser it will be fast.</p>

<p><a href="http://fooqri.github.io//fooqri.poggr.com/pe16vKTbVLg::16" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/screen1.png"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>The idea is to create a mobile web app that can be used by buyers as they shop for a home. Once again the data is maintained in a Google spreadsheet, this time by the buyer&rsquo;s agent. The agent can add houses, home information, and notes to the spreadsheet and the buyer can use the app to view the information as they shop. This is an easy way for an agent to personalize their client experience.</p>

<p>Take a look at the <a href="https://docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdEhuM1gxY1g0ckwwWl9RSzNGTGQwemc&amp;usp=sharing#gid=4">spreadsheet</a> to see how information is organized. It allows the agent to add personalized title and notes to each house.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdEhuM1gxY1g0ckwwWl9RSzNGTGQwemc&usp=sharing#gid=4"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/spreadsheet.png"></a></p>

<p>The <a href="https://fooqri.poggr.com/pe16vKTbVLg:dgkE6vtp-4Ll::16">README</a> document provides  more details on how the app was built. Or <a href="https://fooqri.poggr.com/pe16vKTbVLg::16">try the app here</a>. I will likely provide a few updates to this app in the near future to make it a bit more interesting, but I though the first version showed a few nice features, and how to build them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[d3 charts - wrapping 'NVD3 Charts' in a web component]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/17/d3-charts-wrapping-nvd3-charts-web-component/"/>
    <updated>2014-10-17T06:39:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/17/d3-charts-wrapping-nvd3-charts-web-component</id>
    <content type="html"><![CDATA[<p>In my continued experiments with <a href="https://www.polymer-project.org/" target="_blank">Polymer</a>, I created a web component that wraps  <a href="http://nvd3.org/" target="_blank">NVD3</a> &ndash; a reusable chart library for  <a href="http://d3js.org/" target="_blank">d3.js</a>.
As part of the activity I ported all of the  <a href="http://nvd3.org/examples/index.html" target="_blank">NVD3 example charts</a> to a web component I am calling <em>&lt;goddip-charts></em>. The component is contained in a <a href="http://www.poggr.com/pekqyTpXDEe:deJoY70GdVx" target="_blank">pogg</a> on <a href="http://www.poggr.com/home/" target="_blank">poggr.com</a>, as this is where I do my experimenting and it allows me to code and serve the project documents in the one place.</p>

<iframe width="680px" height="380px" src="http://www.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::53"></iframe>


<p></p>

<p>The above chart is an iframe to <a href="http://www.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::53" target="_blank">this document</a> The actual element tag used is as follows:</p>

<pre><code> &lt;goddip-charts  
   class="small-chart-styles"
   chartType="bar"
   context="/pg1GXbi9MBx:deyDCclAEUg::53" 
   css="/pg1GXbi9MBx:dxkNM7ZicfBe::53" &gt;
 &lt;/goddip-charts &gt;
</code></pre>

<p>To view the uncompiled and unminified source see (<a href="http://source.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::49" target="_blank">html document source</a>, <a href="http://source.poggr.com/pg1GXbi9MBx:deyDCclAEUg::49" target="_blank">data document source</a>, and <a href="http://source.poggr.com/pg1GXbi9MBx:dxkNM7ZicfBe::49" target="_blank">style document source</a>).</p>

<p>The best way to learn about the <em>&lt;goddip-charts></em> component is to take a look at its <a href="http://www.poggr.com/pg1GXbi9MBx:dgJXG7boqzSe" target="_blank">README document</a>. This describes how to use each of the charts, reference data, add styling, etc. You can always view the component <a href="http://source.poggr.com/pg1GXbi9MBx:dlJkI7k9tBe" target="_blank">source</a>. If you have a <em>poggr.com</em> account you can view, clone, and edit <em>goddip-charts</em> using the <a href="http://project.poggr.com/pg1GXbi9MBx" target="_blank">poggr project UI</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Literate CoffeeScript]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript/"/>
    <updated>2014-10-15T16:53:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript</id>
    <content type="html"><![CDATA[<p>As an emacs/<a href="http://orgmode.org/" target="_blank">org-mode</a>/<a href="http://orgmode.org/worg/org-contrib/babel/" target="_blank">babel</a> user I have always been fascinated with the potential of <a href="http://en.wikipedia.org/wiki/Literate_programming" target="_blank">literate programming</a> and combining inline code in my notes. I have many org-mode documents that interactively execute code for various tasks and procedures. These tasks includes certain maintenance activities, or destructive operations I don&rsquo;t want to get wrong. I have an entire org document devoted to db maintenance, filled with Ruby code to execute complicated db queries and operations.  It is nice to see the example code inline in my notes, and be able to modify the code and execute it directly in my notes. This works especially well for checklist where calculations or actions are called for. You might even say org-mode was one inspiration for building <em><a href="http://www.poggr.com/home" target="_blank">poggr.com</a></em>; creating a browser based tool that is simple, flexible, and powerful for creating interactive and compelling documents that work in any web browser.</p>

<p>The potential of browser-based literate programming is why I find the idea of <em>Literate CoffeeScript</em> facinating. It is not just the idea of documenting code or even the idea of describing code in a blog post. It is the idea of creating flexible and effective browser based <em>task</em> and <em>tool</em> documents. The power in these types of documents is you see the code you are executing, which is extremely useful for programmer&rsquo;s notes. It seems literate CoffeeScript might have something to say about how to create browser-based interactive notes that include inline code, like emacs/org-mode/babel has done for emacs users.</p>

<p>Since <em><a href="http://www.poggr.com/home" target="_blank">poggr.com</a></em> supports compiling CoffeeScript into JavaScript  I decided to turn on literate CoffeeScript and give it a go to see if this is a legitimate way to combine code and blogging in a single pogg document.</p>

<h3>Poggr CoffeeScript Compilation</h3>

<p>The way poggr works is that when you save a <em>CoffeeScript</em> document <em>poggr</em> keeps both source code and compiled <em>JavaScript</em> code. Just like when you save a <em>markdown</em> document poggr saves both the source markdown and the compiled html. When a document is requested using a <em>poggid</em> in an http request, poggr will deliver the compiled code unless a query parameter is used to request source. This works out quite well in most cases, since the compiled version is what browsers are expecting (html, css, JavaScript). This model allows poggr to support other markup and languages like <em>less</em>, <em>scss</em>, <em>yaml</em>, etc to work similarly.</p>

<p><em>LitCoffeeScript</em> is unique in that compilation produces two documents (markdown &ndash;> html) and (CoffeeScript &ndash;> JavaScript). Thus, one challenge is knowing whether a document request is for the  html or JavaScript version. I felt compelled enough to experiment that I added a test case where adding a <strong>.js</strong> extention to a <em>poggid</em> will return the JavaScript, otherwise it will return the compiled html version of the document.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>&lt;script src="http://fooqri.github.io//www.poggr.com/peJo73gk0Nx:dxkfEl2RANx.js"&gt;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>I wanted to pick something fun to experiment with so I chose a game originally created by <em><a href="https://gist.github.com/macournoyer">Marc-André Cournoyer</a></em>.
in his <em><a href="https://gist.github.com/macournoyer/7357908" target="_blank">game.litcoffee</a></em> gist.</p>

<p>You can see my version of the  literate CoffeeScript post in action <a href="http://goddip.poggr.com/peJo73gk0Nx:dxkfEl2RANx" target="_blank">here</a>. What you will notice it the game is running as part of the post, and all the code is also embedded in the post. This may look like a normal code example post, but if you look at the  <a href="http://fooqri.github.io//source.poggr.com/peJo73gk0Nx:dxkfEl2RANx" target="_blank">source code</a> you will see at the end of the source document that the post actually loads the js version of itself. So by saving a literate CoffeeScript document you automatically get a blog post; in addition all of the fenced  CoffeeScript code is compiled into a JavaScript document.  Any changed inline code is re-compiled into an updated JavaScript document with each save. <strong><em>Mind Blown right!</em></strong></p>

<p>I can&rsquo;t see it replacing my emacs/org/babel workflow yet, but it certainly opens some possibilities for having a set of private online notes, experiments, and tools I can call up in any browser to edit and execute. One down-side is while emacs is mode-less in that editing and execution happen together, the browser model is built for view-only. Poggr is built on browser-based document editing, but viewing the rendered results is still a separate action. Although it is not exactly the same emacs/org-mode, there are cases where it is actually better. Emacs does not excel where rich visualization and rendering are beneficial, this is what the browser does best.</p>

<p>When I get a chance I will port a few of my org-mode notes over to literate CoffeeScript documents on poggr and make a note here when they are up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spreadsheet Driven Web Apps]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps/"/>
    <updated>2014-10-15T14:45:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps</id>
    <content type="html"><![CDATA[<p><a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e"><img src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/example_screen.png"></a></p>

<p>Using Google spreadsheets is a great way for a team to collaborate on a data set but it leaves a bit to be desired on presentation of the data. To that end I will be creating a series of fun examples showing how to build small interactive apps that utilize <em>Google Docs</em> and <em>Polymer</em> web components to quickly bring data to life. In this series I will be using a Google spreadsheet as the data source, but other data sources are possible, and I will get to those as well in future posts.</p>

<p>The first example is  <strong><em><a href="http://fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e">Hipster List</a></em></strong>, an app that shows cool places to visit in various cities. Check out the <strong><em><a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">README</a></em></strong> document for details on how this app is put together.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&usp=sharing#gid=0"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/spreadsheet_screen.png"></a></p>

<p>A little convention is used to make it work. Namely, I use a <a href="https://docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&amp;usp=sharing">Hipster Hot Spots</a> Google spreadsheet, where each city&rsquo;s data is represented by a tab in the spreadsheet. There is also a <em>key</em> tab that provides a list of all the cities in the spreadsheet and the tab id (<em>gid</em>) for each city&rsquo;s data. The app will load its data from the spreadsheet and populate the city drop-down list of <em>hot spots</em>, and display a map with markers for each <em>hot spot</em>. This was a fun first example, remember to checkout the <a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for code and explanation.</p>

<p><strong>Note</strong>: I enabled url fragment parameters so you can easily point the app at your own copy of the spreadsheet for testing. See the <a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for the how-to instructions. Feel free to copy the spreadsheet and try out the app with your own list of cities and <em>hot spots</em>.</p>

<p> Separating code and data is always beneficial, but there is something cool about connecting an app to a Google spreadsheet. There are many spreadsheet users who would like to have an app to visualize their data, but may not be up to the coding challenge yet. I think many small useful apps could be built this way;  I will pick a few to build in the next few weeks and discuss them here. I am using the <em><a href="http://fooqri.github.io//www.poggr.com/home">poggr.com</a></em> service for the example, which is a service I built just for these types of small quick apps that can rely on an external data service. It is basically working to merge interactive content creation and blogging into a single service.</p>

<p> Leave me a comment if you have an small spreadsheet driven app you would like me to build. If it seems reasonable I may add it to the list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData.SQLDebug for RubyMotion]]></title>
    <link href="http://fooqri.github.io/blog/2013/06/01/coredata-dot-sqldebug-for-rubymotion/"/>
    <updated>2013-06-01T12:23:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2013/06/01/coredata-dot-sqldebug-for-rubymotion</id>
    <content type="html"><![CDATA[<p>It is sometimes handy to turn on CoreData.SQLDebug in the simulator when debugging a Core Data issue. I have found the output to be very useful in finding the hard to find little bugs that pop-up between restkit and core data. It can also help find performance issues with the database.  Unfortunately there isn&rsquo;t any documentation for how to do this in RubyMotion. I found one solution that works to a degree. It requires installing the ios_sim app and forcing the simulator into CoreData.SQLDebug mode after the rubymotion build.</p>

<p>You will need to install ios_sim</p>

<pre><code>$ brew install ios-sim
</code></pre>

<p>Then add the following two line as the last lines in your RubyMotion rakefile</p>

<pre><code># Be sure to substitute your app name and make sure you are using
# the correct path to the app based on simulator version.
ios_sim = `which ios-sim`.strip
sh "#{ios_sim} launch build/iPhoneSimulator-6.1-Development/appname.app --args -com.apple.CoreData.SQLDebug 1"
</code></pre>

<p>This will open the simulator in CoreData.SQLDebug mode, and log debug information to the terminal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting RKLogConfigureByName working in RubyMotion]]></title>
    <link href="http://fooqri.github.io/blog/2013/03/07/getting-rklogconfigurebyname-working-in-rubymotion/"/>
    <updated>2013-03-07T15:21:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/03/07/getting-rklogconfigurebyname-working-in-rubymotion</id>
    <content type="html"><![CDATA[<p>Just a quick note, I was getting an undefined constant error for
RKLogConfigureByName, the standard way of setting up logging in
RestKit. It seems that the #define statements in the
<em>/vendor/Pods/RestKit/Code/Support/RKLog.h</em> file are not getting
picked up. I am using the pod and loading with RubyMotion pod support,
so Iåm not sure what the issue is. I will need to investigate further
but this quick workaround works, just call the lower-level method
mapped via the #define. For example instead of RKLogConfigureByName
use RKlcl_configure_by_name.  I also list all the RKlcl_v constants to
use instead of the RKLogLevel constants. I also included an example of
how they are used, in this case I have put the setup in a method, and
it gets called from the the standard didFinishLaunchingWithOption
application block.</p>

<div><script src='https://gist.github.com/4733618.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nvALT and Emacs]]></title>
    <link href="http://fooqri.github.io/blog/2013/03/04/nvalt-and-emacs/"/>
    <updated>2013-03-04T11:19:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/03/04/nvalt-and-emacs</id>
    <content type="html"><![CDATA[<p>In a previous post <a href="http://www.pragmaux.com/post/38158334752/wiki-searchable-notes">wiki-searchable-notes</a> I mentioned that I was using nvALT for note taking. nvALT is a very simple way to create and search notes and store them in flat files that can be used by other tools. One use is publishing to a github wiki, today I will discuss another.</p>

<p>I am an Emacs user and often found myself dropping out of emacs to find a note I needed in nvALT. I went looking for the best way to index and access my nvALT notes inside Emacs, and found the very cool emacs script called <a href="http://jblevins.org/projects/deft/">Deft</a> that works with <a href="http://jblevins.org/projects/markdown-mode/">EMacs Markdown Mode</a> to create the equivalent of nvALT inside of emacs. It can be configured to work with the nvALT repository so they work well together.</p>

<p>A few pointers&hellip;</p>

<ul>
<li>If you use markdown in nvALT as I do, follow the instructions to install <a href="http://jblevins.org/projects/markdown-mode/">markdown-mode</a> via git clone.</li>
<li>Follow the instructions to install  <a href="http://jblevins.org/projects/deft/">Deft</a> via git clone. It is an active repository, so clone makes keeping up-to-date easy. Also update init.el to require the deft.el script.</li>
<li>For markdown and nvALT using the flat file config (see  <a href="http://www.pragmaux.com/post/38158334752/wiki-searchable-notes">wiki-searchable-notes</a> for flat file config) you need to add a few additional expressions in init.el. Add these four lines as discussed on the deft documentation.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq deft-extension "md")
</span><span class='line'>(setq deft-directory "~/Development/wikis/Notes.wiki/")
</span><span class='line'>(setq deft-text-mode 'markdown-mode)
</span><span class='line'>(setq deft-use-filename-as-title t)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Follow the instructions to map a keyboard shortcut to open deft. I use H-d (see my <a href="http://www.pragmaux.com/post/41867238595/emacs-experimental-hyper-key-mappings">emacs hyper-key post</a> ) but a simple function key mapping would be.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(global-set-key [f8] 'deft)</span></code></pre></td></tr></table></div></figure>


<p>    <br/>
* Create a symlink from ~/.deft to your nvALT notes directory, this is shown in the nvALT preferences under the notes tab. See example below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s ~/Documents/notes/ .deft</span></code></pre></td></tr></table></div></figure>


<p>When you eval init.el or restart emacs you should be set. Fire up Deft and the UI will operate just like nvALT, only it works in an Emacs buffer!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Experimental Hyper-Key Mappings]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/30/emacs-experimental-hyper-key-mappings/"/>
    <updated>2013-01-30T10:19:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/30/emacs-experimental-hyper-key-mappings</id>
    <content type="html"><![CDATA[<p>In a previous post <a href="http://www.pragmaux.com/post/39243391147/remapping-my-caps-lock-key">Remapping My Caps Lock Key</a> I mentioned that I remapped my caps-lock key to escape, but also created a &ldquo;hyper-key&rdquo; (ctrl-shift-cmd-opt) when the caps-lock key is held down. This opens up a keyboard worth of new shortcuts for emacs. Here are a few I have been playing with for the past few days. An alternative key mapping would be to map the hyper key to holding down the tab key, if you already have the caps lock key mapped to control, and thus muscle memory might preclude this mapping from working for you.</p>

<p>H is the remapped caps-lock HyperKey from my earlier post, which translates as C-M-S-s in the emacs init.el key-mappings. I include an init.el excerpt at the end of the post for all of these mappings.</p>

<ul>
<li>(H-l) This will mark the entire current line, from any position on the line. Using the arrow keys will extent the selection one line at a time either up or down.</li>
<li>(H-f) This invokes text expansion for code completion, I do this a lot so I wanted it to be very comfortable.</li>
<li>(H-3) This invokes the comment/uncomment function on a region, ruby comment is the # so I thought I would try this binding.</li>
<li>(H-Right Arrow) This opens a new window to the right of the current window, I do this often enough I wanted it to be quick</li>
<li>(H-Left Arrow) This closes the current window, sort of the opposite of Right arrow.</li>
<li>(H-Down Arrow) This opens a new window below the current window</li>
<li>(H-p) In the current window switch to the previous buffer</li>
<li>(H-n) In the current window switch to the next buffer</li>
<li>(H-delete) Kill this buffer</li>
<li>(H-w) Quick copy line, pressing multiple times adds more lines to the copy</li>
<li>(H-k) Quick cut line, pressing multiple times adds more lines to the cut</li>
<li>(H-c) Copy region into register (prompts for register number)</li>
<li>(H-v) Paste from register (prompts for register number)</li>
<li>(H-spacebar) Open a popup shell in directory of current buffer.</li>
<li>(H-e) Eval buffer, mostly used to eval init.el after tweaks</li>
</ul>


<p>I will likely be tweaking more in the upcoming weeks as I experiment with key mappings, I will post an update after I get a chance to work with the hyper-key for a while, and settle on a favorite set of key-mappings. See the excerpt from my init.el below.</p>

<div><script src='https://gist.github.com/5691402.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying out Pixate - CSS for iOS app Development]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/23/trying-out-pixate-css-for-ios-app-development/"/>
    <updated>2013-01-23T22:09:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/23/trying-out-pixate-css-for-ios-app-development</id>
    <content type="html"><![CDATA[<p>Recently I have been using RubyMotion for iOS development; I really  appreciate developing in Ruby, and prefer Emacs to Xcode. Compared to using interface builder, styling apps can be a challenge. It is possible to use RubyMotion with XIB files created in Xcode&rsquo;s Interface Builder, but I have been trying to avoid this. I am striving for a more web-app like design and development workflow.</p>

<p>I have been using <a href="https://github.com/rubymotion/teacup">teacup</a>, which takes a declarative approach to styling and uses a CSS-like DSL. Although I liked teacup, I had been anxiously awaiting the arrival of <a href="http://www.pixate.com/">Pixate</a> because of its support for CSS-based styling. Pixate became generally available this month, and I purchased a license. The license is $199, and although expensive, a small price compared to time saved if it works. Since I already do a lot of CSS work on the web side it seems like a nice way to leverage my CSS skills and experience. The Pixate team along with the RubyMotion team created a <a href="https://github.com/Pixate/RubyMotion-Pixate">RubyMotion-Pixate gem</a> that makes it easy to get Pixate working with RubyMotion.</p>

<p>After 2 days of coding I have my basic controllers in place as well as several TableViewControllers. I have used Pixate to style many of the elements. With Pixate you can style with four types of selectors:</p>

<ul>
<li>element type selector &ndash; Select a control by element name</li>
<li>universal selector &ndash; Select any control</li>
<li>class selector &ndash; Select a control by class name</li>
<li>id selector &ndash; Select a control by ID</li>
</ul>


<!--more-->


<p>It also supports attribute selectors and pseudo classes. See the <a href="http://cdn.pixate.com/docs/engine/ios/1.0/Pixate%20Engine%20for%20iOS%20Styling%20Reference.html">complete list</a> for more information on selectors and styling.</p>

<p>One really nice feature is the ability to set up Pixate to dynamically change your app in the simulator when you update the CSS. This is an awesome feature. To set it up add these two  <em>PXStylesheet</em> lines to your app_delegate.rb file near the end of the <em>application</em> method:</p>

<pre><code> def application(application, didFinishLaunchingWithOptions:launchOptions)
    ...
    PXStylesheet.styleSheetFromFilePath('path-to/default.css', withOrigin:0)
    PXStylesheet.currentApplicationStylesheet.monitorChanges = true  
    true
 end
</code></pre>

<p>I was only able to get it to work by providing the absolute path to the css file, so add your absolute path in place of <em>path-to</em> in the above method call. I will post if I figure out how to do a relative path, I hate putting in absolute paths.</p>

<p><strong>Warning</strong>: I found that Pixate 1.0.2 does not work properly on the device if these two statements are left in the app delegate when compiling for the device. If your styles are not being picked up on the device this may be the reason. To get around this during development I put in a test for simulator using the <em>Device.simulator?</em> method in <a href="https://github.com/rubymotion/BubbleWrap">Bubblewrap</a>,</p>

<pre><code> def setup_pixate_monitor 
   PXStylesheet.styleSheetFromFilePath('path-to/default.css', withOrigin:0)
   PXStylesheet.currentApplicationStylesheet.monitorChanges = true
 end
</code></pre>

<p>Then include this conditional call:</p>

<pre><code> setup_pixate_monitor if Device.simulator?
</code></pre>

<p>So far Pixate has mostly worked as expected, but there was one odd issue. I had expected that I could create zero-sized frames and allow CSS to style them to the correct size. For example creating a new label object might look like this.</p>

<pre><code> @name_label = UILabel.alloc.initWithFrame(CGRectZero)
 @name_label.styleId = 'name_label'
</code></pre>

<p>CGRectZero, a CGRect constant, will set the frame to size [0,0][0,0]. Then the CSS style definition below should set the frame size correctly.</p>

<pre><code> #name_label { 
   position:fixed;
   top              :20px;
   left             :5px;
   width            :300px;
   height           :30px;  
   font-size        :16px;
   font-align       :center;  
 } 
</code></pre>

<p>I would expect the frame to be set to [5,20][300, 30] when the application is run. Instead the frame remains set to [0,0][0,0], so the text in the label is not displayed in the interface. This [0,0][0,0] frame size is confirmed with REPL using the tree command that comes with the <a href="https://github.com/rubymotion/sugarcube">sugarcube gem</a>.</p>

<p>When I set the frame to a non-zero size when creating the UI object, then the CSS style is picked up and the frame size is set correctly by Pixate. Very odd, I am assuming this to be a bug, but maybe there was a reason to leave zero-sized frames unaltered by CSS. Typically CGRectZero frames are used to hide UI elements until they are ready to be used, or until the dimensions are known based on content.  If a CSS selector matched zero-sized frames I suppose this could lead to some unexpected behavior for iOS developers accustom to zero-sized frames not being displayed until the specifically resize them in code.</p>

<p>In the end I created a new global constant</p>

<pre><code> CSSRect = [0, 0], [1, 0] 
</code></pre>

<p>and this allows the CSS to do its job. So</p>

<pre><code> @name_label = UILabel.alloc.initWithFrame(CSSRect)
 @name_label.styleId = 'name_label'
</code></pre>

<p>allows me to create frames that are then altered to the correct size via CSS. I also found that using CGRectInfinite works as well. Basically it sets a huge rectangle but the CSS resizes it as expected.</p>

<p>The  <a href="https://github.com/Pixate/RubyMotion-Pixate">RubyMotion-Pixate gem</a> also adds REPL support for changing the style via REPL. This is handy, but I find the dynamic updating via the CSS file to be easier to use.</p>

<p>The Pixate Engine consists of two core technologies: a 2D graphics engine and a CSS styling engine. So far my focus has been using the CSS styling engine.  By using a styling rendering engine, design execution can be pushed to run-time. One of the benefits of this approach is the ability to dynamically modify the look of an app, which can be useful in user testing, including A/B testing. For this, Pixate allows CSS to be loaded via a URL, much like a web browser. I am sure there will be performance implications of this dynamic rendering approach, so this will also have to be explored as a cost versus the benefit of dynamic styling.</p>

<p>I really liked Colin Gray&rsquo;s ideas around teacup, and the rubyesque way it integrated with rubymotion.</p>

<pre><code> @search = subview(UITextField, :search)
</code></pre>

<p>It would be interesting if this syntax could be used with Pixate versus the less elegant:</p>

<pre><code> @search = UITextField.alloc.initWithFrame(CSSRect)
 @search.styleId = 'search'
</code></pre>

<p>I have only just begun to use Pixate, there may be possibilities for making the calls a bit more elegant without writing too many helpers.</p>

<p>I will add more posts as I learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The three c's]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/21/the-three-cs/"/>
    <updated>2013-01-21T10:26:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/21/the-three-cs</id>
    <content type="html"><![CDATA[<p>I really enjoyed <a href="http://www.networkworld.com/community/blog/tony-fadell-unique-nature-apples-design-process">this interview</a> with Tony Fadell on the unique nature of Apple&rsquo;s design process. The discussion about project abandonment percentages is incredibly important, and often overlooked in large companies. In many cases abandonment is a financial decision related to either real or opportunity costs associated with launching a product. People who have never worked for a large consumer products company likely have no idea how many products are cancelled just before launch because of the incredible cost in launching a product into the market.</p>

<p>Tony makes an amazing point about the toll such high cancellation rates have on employees at a company, and on the quality of the products the company ships. The inverse is that high commitment to ship products that pass key milestones leads to better employee commitment.</p>

<blockquote><p>&ldquo;When you’re in a culture that has a point of view, and drives to launch everything it does, you know you’re on the hook and you better bring your best game every time,&rdquo; Fadell explained.</p></blockquote>

<p>Tony contrasts his experience at Apple with his experience at Philips:</p>

<blockquote><p>Fadell explained that a key and yet often overlooked difference between Apple and other tech companies is that Apple ships 99% of the products that pass certain internal milestones. By way of contrast, during Fadell&rsquo;s tenure at Philips &ndash; where he was charged with overseeing the company&rsquo;s audio strategy &ndash; the iPod guru noted that Philips would axe 9 projects out of 10, even if a particular product was about to ship.</p></blockquote>

<p>I don&rsquo;t think large companies have a metric for tracking the number and impact of cancelled projects. In my experience executive teams wanted to forget cancellations as quickly as possible and move on. They considered the cost to be in the past, and by having cancelled the project they had cut any ongoing cost.  But as Tony points out, there are ongoing costs, just not costs that have their own column on a balance sheet or scorecard. In my experience it was clear &hellip; the impact of cancellations were cumulative and devastating.</p>

<p>The importance of commitment is actually one of the 3 c&rsquo;s I use when evaluating a project: <em>Clarity</em>, <em>Competency</em>, and <em>Commitment</em>. Over the years I have found these to be the key pieces of early stage information that will best predict the success of a project. Tony&rsquo;s pont about commitment is that it isn&rsquo;t only about commitment to a project, it is about the culture of commitment in an organization. I like this point, and I imagine there is a corollary for organizational clarity and competency. Below are a few notes related to project level evaluation of the 3 c&rsquo;s</p>

<!--more-->


<p><strong>Clarity</strong></p>

<p>Clarity is an evaluation of how clear the goals are for the product, and how well understood the product is.</p>

<p>For example:</p>

<ul>
<li>A project to enhance a successful existing product with incremental features likely has very high clarity.</li>
<li>A project to move a successful product through a major transition will likely have medium clarity, but in some cases will have low clarity if the product manager and the team have different ideas about product direction.</li>
<li>A project to improve an unsuccessful product is usually medium to low clarity. If you are lucky you understand what went wrong, but lack of clarity is often the reason it failed in the first place.</li>
<li>A new product is usually low clarity, but if you have a great product manager it may be medium clarity to high clarity.</li>
<li>A new product in a new market is often low clarity and may even be disguised as medium to high clarity because the teams reviewing the product have little experience in the market. By this I mean the product brief will use language that sounds high clarity, but market experts would easily identify the brief as too vague. This is where competency and clarity overlap early in a project.</li>
</ul>


<p>My first task was always to make sure there was a plan in place to address any clarity issues immediately. From my experience without such a plan and milestones for high clarity, teams often started to build the wrong product, or multiple wrong products. If the team cannot agree on what the product really is, it will certainly fail. New products could achieve medium to high clarity. The key step is to identify clarity as an issue and put a plan in place to provide good clarity early in the project. I have seen many product requirements documents that were very detailed, but no two team members would describe the same product when asked what the product was. Providing detail  is not the same as providing clarity.</p>

<p><strong>Competency</strong></p>

<p>One of the other key issues in the success of a project is competency. In a large company design, and engineering <em>resources</em> tend to be plugged in to a project primarily based on their availability. There is an idea of a performance band with some people regularly performing better than others, but rarely a deep understanding of the individual competencies of  team members. Having directed both engineering and design teams, and worked closely with product management for many years I have come to see that individual competencies play a key role in project success; a role that is rarely reflected in evaluations or performance rankings. Evaluations rarely measure competency. For an interesting take on the fallacy of skills in success see <a href="http://www.amazon.com/The-Success-Equation-Untangling-Investing/dp/1422184234">The Success Equation: Untangling Skill and Luck in Business, Sports, and Investing</a></p>

<p>Here I look for a match in competency for the product needs, but also for how well the team works in the particular product context. How much experience does this team have defining and launching a new product? Has the lead engineer designed anything at this scale before? Many projects fail because a key competency is lacking on the product team.</p>

<p><strong>Commitment</strong></p>

<p>This is what Tony is referring to in his interview, how much commitment is there for this product? This refers to team commitment as well as executive commitment. In my experience, commitment issues fall into a few categories.</p>

<p><em>Market Issues</em></p>

<p>It is sometimes the case, especially in technology, where the market is moving so fast projects become obsolete before they are completed. This leads to high cancellation rates. These cases are about risk management, and understanding that the market evolution rate is a key issue. For example having a 24 month product cycle in a rapid innovation market may be taking on a lot of risk. If you can&rsquo;t move faster, maybe find a market that better matches your organizational delivery capabilities.</p>

<p><em>Structural Commitment Issues</em></p>

<p>In some cases a company is trying to do too many things, and commitment is a structural issue. I suspect Tony&rsquo;s characterization of Philips false into the structural definition. In these cases it is important to force prioritization and work with executives to understand that doing fewer things better will actually result in shipping not only better products, but more products. It can seem counter-intuitive, but I think Tony&rsquo;s description above shows how this has been proven at Apple. Less SKU&rsquo;s more volume.</p>

<p><em>Project Commitment Issues</em></p>

<p>I often found that when project comitment was low, it was low in very specific ways. Here are a few examples:</p>

<ul>
<li><p>Low hanging fruit &ndash; Many projects came across my desk as the so-called low-hanging fruit project. These are projects that are so low cost and high value that they seem obviously high-commitment on the surface; they often originate in an executive review meeting. The main issue here is that no one questions them, so their clarity is usually quite low, and their commitment falsely high. Usually as clarity rises even a small amount, commitment collapses because the actual project could never deliver on the low hanging fruit mirage that came out of a thirty minute executive discussion.</p></li>
<li><p>The magic mirror &ndash; Another class of projects with commitment issues were the magic mirror projects. These are projects where whomever is looking at the projects sees what they want to see, and ignores everything else. These types of projects are the most dangerous because they are usually multi-headed beasts that are trying to simultaneously serve many masters.  Their commitment is based in company politics and thus commitment can shift or disintegrate very quickly.</p></li>
</ul>


<p>Given my team&rsquo;s success was based solely on shipping successful products my most important task was usually at the early phase of projects, and mostly making sure that projects scored high on their combined CCC levels.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parsing a simple markdown style list in Ragel]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/19/parsing-a-simple-markdown-style-list-in-ragel/"/>
    <updated>2013-01-19T13:04:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/19/parsing-a-simple-markdown-style-list-in-ragel</id>
    <content type="html"><![CDATA[<p>In an earlier post <a href="http://www.pragmaux.com/post/40689737812/simple-state-machine-example">Simple state machine example</a>, I provided an example of using the Ruby <em>state_machine</em> gem to create a state machine for handling a simple list of tasks. In this post I will provide a similar but not exactly compatible description of building a parser to read lists from a text file. In this example I use the markdown syntax for lists, where items can be placed hierarchically, thus removing the need for a separate &ldquo;list&rdquo; object.</p>

<p>I found the <a href="http://www.complang.org/ragel/ragel-guide-6.7.pdf">Ragel documentation</a> to be excellent. The only issue is a lack of practical examples. Given the dearth of examples available, I though I would add my +1 example to help the cause. If you are serious about using Ragel I recommend reading the documentation start to finish quickly, then a second go through taking notes on key items like default machines, syntax, priorities, actions, etc before building a parser. Having a strong base will help tremendously when using examples.</p>

<p>There are three files involved in this solution to the list problem:</p>

<ul>
<li>lists.txt: a data file that contains two lists for the parser to parse.</li>
<li>mdlist.rb: a ruby class that will call the parser and output the list returned from the parser.</li>
<li>mdlist_parser.rl: A file that will be used by Ragel to create a parser class definition (mdlist_parse.rb).</li>
</ul>


<p>I added all three files to one gist, which is shown below. Below the lists.txt data file uses a markdown like syntax where hierarchy is expressed through indentation (4 spaces or a tab).</p>

<!--more-->




<div><script src='https://gist.github.com/4573704.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>To create an app that supported operating on these lists you would need to parse the list and create objects that could be operated on. Perhaps adding checkboxes in a UI, or strike-through font when the item is marked complete.</p>

<p>In this example I am using Ragel, which uses a set of state machine definitions to generate a state machine. In this case I am using Ragel to generate a parser to parse lists similar to the ones shown in lists.txt. In Ragel you specify a Ruby class that uses a series of preprocessors (%%) that are processed by the Ragel library.  Ragel will replace these blocks and preprocessor commands with ruby parser code and a parse table; resulting in a state machine for parsing the file.  The documentation will describe all of the required preprocessor commands for Ruby. Ragel supports many languages and the preprocessor commands differ slightly for different languages. Check the documentation for meaning.</p>

<p>The bulk of the instructions for creating a parser are inside the <em>%%{ }%%</em> block. The block is made up of machine definitions and actions. Ragel state machines recognize byte sequences as regular expression machines do, but can also execute code at arbitrary points in the recognition of a regular language (actions).  Here regular expressions are used to define a regular grammar, see type-3 in the <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy">Chomsky hierarchy</a>.</p>

<p>Thus when you see the statement:</p>

<pre><code>task_title =  [^\n]+ [\n]
</code></pre>

<p>this is defining a machine (<em>[^\n]+ [\n]</em>) and assigning it a name <em>task_title</em>. The Ragel documentation refers to the right side of the expression as a <em>regular expression machine</em> or <em>machine</em>, this is roughy equivalent to production rules in tradition grammar design. Using named expressions this way allows grammar rules to be built up recursively, much like non-terminals are used in traditional grammar definitions.</p>

<p>Thus an expression like:</p>

<p>   task = (task_header &gt;MarkTaskStart) . task_item*;</p>

<p>uses the rules <em>task_header</em><strong><strong> and <em>task_item</em></strong></strong> in the definition of the expression. Ragel expressions look unusual at first because they are both defining a grammar and embedding behavior (code). For example the above expression includes a reference to of a block of code <strong><em>MarkTaskStart</em></strong> that should be executed when the <strong><em>task_header</em></strong> machine is matched. These code blocks are called <em>actions</em> in Ragel. It can be useful to use a convention like all lowercase for rules, and CamelCase for actions to make the expressions easier to read.</p>

<p>Ragel defines a syntax for specifying when an action is to be called relative to state transitions between machines. For example before a transition, after a transition, or at the end of file, etc. The documentation is very good, though it is terse.</p>

<table border="1">
<col style="padding-right: 30px;" />
<col style="padding-right: 30px;" />
<col />
  <tr>
    <th>Name</th>
    <th>Syntax</th>
  </tr>
  <tr>
    <td style="width: 200px;">entering action</td>
    <td style="width: 200px;">expr &gt;action</td>
  </tr>
  <tr>
    <td style="width: 200px;">finishing action</td>
    <td style="width: 200px;">expr @ action </td>
  </tr>
    <tr>
    <td style="width: 200px;">all transitions action</td>
    <td style="width: 200px;">expr $ action</td>
  </tr>
  <tr>
    <td style="width: 200px;">leaving actions</td>
    <td style="width: 200px;">expr % action</td>
  </tr>
</table>


<br />


<p>Ragel also allows you to embed error handling behavior using a similar mechanism.</p>

<p>Finally, one of the challenges of regular grammars is the requirement that they are <a href="http://en.wikipedia.org/wiki/Deterministic_finite_automaton">DFA&rsquo;s</a> and thus need to be deterministic. Ragel provides a mechanism for including priorities in the case where multiple next states are possible; you can define which state will be taken. For more see the Ragel documentation on priorities and guarded expressions. The reason I suggested reading through the documentation prior to reading example grammars is that Ragel expressions can begin to look very confusing if you are not versed in the difference between the syntax associated with machines, actions, priorities and guards, since they all appear intermingled in a Ragel expression.</p>

<p>To create a parser for the <em>mdlist_parser.rl</em> file shown above use this command:</p>

<pre><code> ragel -R mdlist_parser.rl
</code></pre>

<p>This will create a parser written in ruby called <em>mdlist_parser.rb</em> that can be included into your Ruby program.</p>

<p>Now we need a simple Ruby program to use the parser, I am including this because I didn&rsquo;t see a lot of examples for how to do this so wanted to add one here.</p>

<p>The simple ruby class defined in <em>mdlist.rb</em> will open the data file and read it in to a string, and pass the string to the parser. The parser will return a Ruby object that has a <em>lists</em> method that returns the list in a data structure. The above class will then output the list formatted to show the hierarchy. The list could easily be used to create a list object that includes the state machine from my earlier <a href="http://www.pragmaux.com/post/40689737812/simple-state-machine-example">state machine</a> post.</p>

<p>I will assume you have Ragel, installed, if not get it <a href="http://www.complang.org/ragel/">here</a>. To see the parser in action you need all three files (mdlist_parser.rl, mdlist.rb, lists.txt) in the same directory and then take these steps:</p>

<ol>
<li><strong>run the ragel parser:</strong>   ragel -R mdlist_parser.rl</li>
<li><p><strong>run irb</strong> and enter the following into irb:</p>

<ul>
<li>load &ldquo;mdlist.rb&rdquo;</li>
<li>list = MDList.new(&ldquo;lists.txt&rdquo;)</li>
</ul>
</li>
</ol>


<p>You should see the output of the puts statements displaying the lists data structure with information about the hierarchy of the list. It would be easy to replace the puts with a call to a method like add_item() from my state_machine example referenced earlier.</p>

<p>That&rsquo;s it. Defining grammars and using parser generators can seem challenging at first, but once you get through a few examples and build a simple grammer it will become very simple, since the rules are really very simple. The language of grammar definition can be challenging at first,  but just try to understand the concepts and don&rsquo;t get too bogged down in the terminology. Ragel is a very powerful tool for any developer to have in their tool belt, especially if you are interested in building high performance APIs, it combines a powerful parser generator with an expressive syntax for generating powerful state machines. To fully understand this and other examples check out the Ragel documentation and tutorials listed below.</p>

<ul>
<li><a href="http://www.complang.org/ragel/">Ragel Home</a></li>
<li><a href="http://thingsaaronmade.com/blog/a-simple-intro-to-writing-a-lexer-with-ragel.html">A simple intro to writing a lexer with Ragel.</a></li>
<li><a href="http://www.devchix.com/2008/01/13/a-hello-world-for-ruby-on-ragel-60/">A Hello World for Ruby on Ragel 6.0</a></li>
<li><a href="http://www.zedshaw.com/essays/ragel_state_charts.html">Ragel State Charts</a></li>
<li><a href="http://tech.blog.cueup.com/regular-expressions-will-stab-you-in-the-back">Regular Expressions Will Stab You in the Back</a></li>
</ul>


<p>Also see this great <a href="http://www.confreaks.com/videos/491-rubyconf2010-consuming-gherkin-one-byte-at-a-time"> Consuming Gherkin: One Byte at a Time video</a> intro of Mike Sassak &amp; Greg Hnatiuk discussing their experience using Ragel for the Cucumber parser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern problems vs logic problems]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/18/pattern-problems-vs-logic-problems/"/>
    <updated>2013-01-18T11:48:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/18/pattern-problems-vs-logic-problems</id>
    <content type="html"><![CDATA[<blockquote><p>Suppose three men can paint three fences in three hours. How long would it take one man to paint one fence?</p></blockquote>

<p>I ran across this interesting problem in <a href="http://www.amazon.com/The-Joy-Guided-Infinity-ebook/dp/B006R8PL7G/ref=tmm_kin_title_0">&ldquo;The Joy of x: A Guided Tour of Math, from One to Infinity,&rdquo;</a> a very accessible and interesting tour of mathematics.</p>

<p>It turns out most people quickly answer “one hour.”  As Strogatz opines,</p>

<blockquote><p>The words themselves nudge you that way. The drumbeat in the first sentence— three men, three fences, three hours— catches your attention by establishing a rhythm, so when the next sentence repeats the pattern with one man, one fence, ____ hours, it’s hard to resist filling in the blank with “one.” The parallel construction suggests an answer that’s linguistically right but mathematically wrong.</p></blockquote>

<p>The correct answer is three hours. It is obvious if you imagine each person painting their own fence for three hours. Remove two people and two fences and you are left with one person, still painting their one fence for three hours, as before.</p>

<p>What struck me about this problem is that it is an incredibly simple, concrete, and visual example of how our brains try to match patterns, but more importantly the side effect that occurs when a pattern is matched. Neuroscience studies suggest that dopamine (a neurotransmitter associated with pleasure) is released when we solve a problem, thus giving us a biological explanation for that wonderful feeling we get when we have solved a problem.</p>

<p>This made me wonder, does our brain perhaps release dopamine when we solve the faux pattern matching problem and <em>tricks</em> us into thinking we solved the actual logic problem? Thus we quickly blurt out the wrong answer.  After all, we have spent a lifetime feeling the dopamine rush when we believe we have the answer to a problem. Strogatz&rsquo;s observation about this particular word problem having two solutions (a pattern solution, and a logic solution) is very interesting, and is likely very related to a number of <a href="http://en.wikipedia.org/wiki/List_of_biases_in_judgment_and_decision_making">Cognitive Biases</a>. It is perhaps valuable to think about this explicitly when considering information:</p>

<ul>
<li>What is the pattern problem being suggested?</li>
<li>What is the logic problem being suggested?</li>
</ul>


<p>And make sure you have the answer the right question when you feel that first burst of dopamine show up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creativity Booster: Get a dog.]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/17/creativity-booster-get-a-dog/"/>
    <updated>2013-01-17T12:47:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/17/creativity-booster-get-a-dog</id>
    <content type="html"><![CDATA[<p>It probably sounds specious, but I have found having a dog around has made me both more productive and more creative. The evidence for this claim is the number of daily messages I post to our team message board that start with the phrase &ldquo;While I was out walking the dog I had this idea&hellip;.&rdquo;</p>

<p>Before getting a dog I would get sucked into a problem and become obsessed with solving it, the kind of linear obsession that leaves no room for creative leaps. What is needed is to allow the problem to marinate in my subconscious, to facilitate the unexpected synaptic connections that occur when you finally let your mind relax. The problem is, obsession with solving the problem makes this type of relaxed mind difficult and leaps of creativity less frequent. I am sure with practice one could recognize the symptoms and use some type of mediation exercise, but for me the answer is walking the dog. The pattern repeats regularly &hellip; I hit a nasty bug or design conundrum, get stuck, and then take the dog out for 15-20 minutes, and the answer suddenly presents itself.</p>

<p>For me, dog walking seems to engage the kind of subconscious pattern matching that provides the keys to unlock many problems. <a href="http://en.wikipedia.org/wiki/Graham_Wallas">Wallas</a> would have called this the <a href="http://en.wikipedia.org/wiki/Creativity#Incubation">incubation</a> phase of creativity. I think of it as a cousin to Mihály Csíkszentmihályi&rsquo;s concept of the <a href="http://en.wikipedia.org/wiki/Flow_(psychology">flow</a>) mental state. This seems to be validated by Nardi&rsquo;s <a href="http://www.youtube.com/watch?v=MGfhQTbcqmA">work</a> on the neuroscience of personality. Specifically, the brain imaging results where he describes the delta state in terms of Csíkszentmihályi&rsquo;s flow, but adds that &ldquo;also on occasion when we are copacetic, open to whatever comes next.&rdquo; This is a perfect description of my mental state on a walk with the dog. I feel close to that feeling of flow, but not quite the same &mdash; an approximation. But it seems to do the trick. As a side note, Nardi’s brain imaging results of people watching TV shows up as black; similar to a deep non-dreaming sleep. So TV is not so good for creativity &hellip; just saying.</p>

<p>I don&rsquo;t find that walking alone or with another person works as well. I wonder if it is the non-conversational interactions with the dog, just enough interaction to get me to stop focussing on the issue, but not so much that my mind is focussed on keeping up a conversation with someone else. Whatever the reason, it works; almost always presenting a promising new direction, if not an outright answer.</p>

<p>This is my muse, Archer, the retired racing greyhound.</p>

<p><img src="http://media.tumblr.com/cfdcc46c180984c7ab7e3d43cb14a116/tumblr_inline_mgs53cHq981qz562v.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion iOS Apps]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/17/rubymotion-ios-apps/"/>
    <updated>2013-01-17T11:28:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/17/rubymotion-ios-apps</id>
    <content type="html"><![CDATA[<p>I wanted to make a quick note that I have been using <a href="http://www.rubymotion.com/">RubyMotion</a> the past few months. I don&rsquo;t mind building natively in Objective-C but since I have been coding both the app and the server side I found switching between Objective-C and Ruby a bit frustrating. I really find Objective-C to be too verbose a syntax for my taste. I also prefer to code in emacs vs. the Xcode UI. Call me old fashioned, but I find I can work much faster when I can operate on the code directly, versus through an intermediary UI.</p>

<p>The second reason for switching to RubyMotion is the libraries that are being created, they make iOS development feel so comfortable to a Ruby developer. Three key examples are <a href="https://github.com/rubymotion/BubbleWrap">BubbleWrap</a>, <a href="https://github.com/rubymotion/sugarcube">SugarcCube</a> and <a href="https://github.com/rubymotion/teacup">Teacup</a>.</p>

<p>The third reason is testing and debugging, I like that RubyMotion comes with an RSpec clone, this means I have the same testing framework on both app and server. I also love the interactive console, there is nothing like tweaking your app live from a console (REPL). I find I can debug a lot of the code from the console, but RubyMotion also supports GDB for the more serious debugging needs. I hadn&rsquo;t used GDB in a few years but it came back to me pretty quickly once I started using it.</p>

<p>I also like the DSL approach of Teacup in styling RubyMotion iOS apps. I like that I can create style files much like I do with CSS and have my app UI built with the style information, makes changing style feel more natural to me as a web developer.</p>

<p>I have no doubt that there are many Objective-C developers who are extremely efficient in building apps, but it is always a challenge to become expert on multiple platforms. To become an expert iOS developer you need to become expert in the Cocoa libraries; the nice thing about RubyMotion is it allows you to learn the libraries within a familiar syntax if you are a ruby developer. It also allows you to create Ruby wrappers and generators that make developing for Cocoa feel more natural to a Ruby developer. Finally, since RubyMotion creates compiled native iOS apps, their is very little performance hit.</p>

<p>I have a backlog of notes that I will post when I get a chance; including my experiences with development,  debugging, meta-programming, deploying via TestFlight, etc. I just wanted to give RubyMotion some praise from this Ruby developer, it has made developing iOS apps very similar to deploying ruby apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean API on Heroku]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/17/lean-api-on-heroku/"/>
    <updated>2013-01-17T08:46:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/17/lean-api-on-heroku</id>
    <content type="html"><![CDATA[<p>We have recently been working on an iOS app that requires a backend service. In this case I was looking for something leaner, simpler, and faster than Rails since it was only an API for a mobile app, no web front-end. I wanted it to be very lean and scalable so we could make it through early user testing without spending a lot on servers. Ok, ideally without spending anything on servers; basically how much could I squeeze out of one Heroku worker.</p>

<p>After some investigation of the typical light weight ruby frameworks (Sinatra, Merb, etc) I stumbled upon <a href="https://github.com/intridea/grape">Grape</a>, a ruby API micro-framework. Grape uses a very simple DSL for defining APIs for your Ruby objects. Grape runs on <a href="https://github.com/postrank-labs/goliath">Goliath</a>, which is a non-blocking Ruby web server framework that uses Ruby fibers to simplify the handling of asynchronous requests. Goliath runs on the popular <a href="https://github.com/eventmachine/eventmachine">EventMachine</a> reactor. EventMachine is an event-driven Ruby library that works much like Node.js.</p>

<p>The <a href="https://github.com/intridea/grape">Grape</a> github page provides a great deal of information on getting started, and David Jones has a great <a href="https://github.com/djones/grape-goliath-example">example</a> project on GitHub demonstrating how to deploy a grape API on Heroku.</p>

<p>The DSL is really simple and I was able to wrap some ruby objects in a day and deploy it on Heroku. Here is an snippet of what the DSL looks like.</p>

<div><script src='https://gist.github.com/4555788.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>As you can see the Grape framework supports API versioning, and the DSL provides a simple way to define API endpoints by defining resources and then specifying the HTTP requests (get, post, put, delete) for that resource. Any Rails developer should feel comfortable with the paths, params, and routes syntax in Grape.</p>

<p>In this code snippet I show part of the API definition for two resources (missions &amp; players). This will mean the path for accessing these are <em>/missions</em> and <em>/players</em>. Because I specified <em>prefix &lsquo;api&rsquo;</em> at the top of the file, the actual path becomes <em>/api/missions</em> and <em>/api/players</em>. So for example the <em>get &ldquo;/:id&rdquo;</em> would correspond to a get request of /api/players/7E781305-777F-4044-9770-C7995585F540 where the UUID is a player id and would be available in the params[:id] variable.</p>

<p>I should also note that even though these are simple <em>get</em> requests Grape will expect a header to be set for the secret key(secretk), and also require an Accept header with the version, vendor info, and content type (json). The easiest way to test your API will be to use an app like <a href="http://goo.gl/daZ5Q">Postman</a> that makes it easy to formulating requests, setting headers, from your Chrome browser. Postman also allows you to save requests, and re-run them.</p>

<p>I happen to be using Mongo for this, but Grape supports most major DBs. I am only showing two get methods, my full definition supports CRUD for these objects, as well as a few common queries of the db. The error checking of the request is fairly straightforward. I am checking for an API key, but this would be replaced with an API key lookup function to validate the requestor. It is easy to respond with specific errors as you can see.</p>

<p>The terse <em>error!, unless</em> syntax makes the error handling code very readable. The request handling for these two examples are simple: I query a mongo collection for an id, then map that response onto objects, and then convert the objects to json. This looks funny since it is basically json-&gt;object-&gt;json since mongo returns json, but there is more that happens in the object mapping; the json from the db and the json from the object are not the same.</p>

<p>By requiring <em>mission.rb</em> and <em>player.rb</em> at the top of the file, I pull in my Mission and Player classes so they can be used in the map operation.   Try to ignore the lame <em>.first</em> operation, this was a bit of laziness in dealing with what is an array of one item resulting from the map operation. As with all Ruby, the output of the last operation is what is returned in the body of the response.</p>

<p>The DSL is very clean and makes API maintenance relatively easy.</p>

<p>A few other handy links:</p>

<ul>
<li><a href="https://github.com/postrank-labs/goliath">Grape Project</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups#!forum/ruby-grape">Grape Forum</a></li>
<li><a href="https://github.com/flyerhzm/newrelic-grape">NewRelic-Grape Gem Info</a> &ndash; NewRelic instrumentation for the Grape API DSL.</li>
<li><a href="https://github.com/djones/grape-goliath-example">Heroku example</a></li>
<li><a href="http://www.confreaks.com/videos/475-rubyconf2010-the-grapes-of-rapid">Grape Intro Video</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple state machine example]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/15/simple-state-machine-example/"/>
    <updated>2013-01-15T12:24:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/15/simple-state-machine-example</id>
    <content type="html"><![CDATA[<p>I have been investigating using the ruby <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem for a project. State machines can be very handy in simplifying code where objects move through various states. The <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem embeds state machine behavior into any class that uses it. My first test was to create a simple todo list example.  The todo list will include a main list that contains items and sublists.  This allows a way to organize items easily into sublists.</p>

<p>A simple way to do this is to declare two classes <em>List</em> and <em>Item</em> and allow an object of class <em>List</em> to contain a list of <em>Lists</em> and a list of <em>Items</em>. This approach allows a flat list with many items, or a hierarchical list with top-level items, but also sub-lists that contain their own items.</p>

<p>In addition to lists and items, I want is to track whether I have completed all of the items in a list. In the case of a hierarchical list this means all items of sub-lists as well. Thus in addition to lists and items, we need to track whether items and lists are in progress or completed.</p>

<p>The next step is deciding on the states of the two object types. For my example, I decided:
* a list will have an initial state of <em>available</em>, and will transition to state <em>started</em> when the first item on the list is completed. When all items and sublists are <em>completed</em> the list will move to the state <em>completed</em>.
* an item will have an initial state of <em>available</em> and will transition to <em>completed</em> when the item is finished.</p>

<p>Finally I want to inform the user when:
* an item is completed
* a list is completed
* the project is completed (all items and sublists are completed)</p>

<p>Here is a quick example of the code to meet these requirements:</p>

<div><script src='https://gist.github.com/4549146.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>As you can see there is a rich environment for embedding behavior, including adding it in the <em>state</em> definitions, adding it using the <em>before_transition</em> method, and adding it using the <em>after_transition</em> method. You can also define methods inside the state definition so you can extend the functionality of a state.</p>

<p>Now if you load this example in IRB you can play with the lists and items like so:</p>

<pre><code> load "list_example.rb"
 list = List.new("Groceries", "Get some groceries")
 wf = list.add_list("Whole Foods", "Get some groceries from Whole Foods")
 milk = list.add_item("Milk", "2% Milk")
 strawberries = wf.add_item("Strawberries", "Ripe organic Strawberries"))
 oranges = wf.add_item("Oranges", "Ripe mandarine oranges")

 strawberries.finish 
 =&amp;gt; finished item Strawberries

 oranges.finish  
 =&amp;gt; finished item Oranges
 =&amp;gt; congrats on completing list Whole Foods

 milk.finish
 =&amp;gt; finished item Milk
 =&amp;gt; congrats on completing project Groceries
</code></pre>

<p>This was a really simple example, but shows how easy it is to create classes that embed state machines. For more check out the <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem.</p>

<h3>State Diagrams</h3>

<p>The library also allows you to generate graphs of the states and transitions in each class. For example:</p>

<p>create a Rakefile.rb</p>

<pre><code> require 'tasks/state_machine'
 require './list_example.rb
</code></pre>

<p>Then in terminal execute:</p>

<pre><code> rake state_machine:draw CLASS=List 
</code></pre>

<p>For the <em>List</em> class shown above this will generate a png file named <em>List_list_state.png</em> that looks like the image below.</p>

<p><img src="http://media.tumblr.com/d78e332b4656b62dec36c2a2d2408a82/tumblr_inline_mgqav0Q8uW1qz562v.png" alt="" /></p>

<p>The <em>List</em> class is very simple so the diagram is also simple. In the case of my project there are many states and more complicated transitions between states so the diagram can be very handy to visualize what is happening when  debugging a strange transition,</p>

<h3>Wrapup</h3>

<p>This todo list example is very simple but it allows exploring the basic features of the <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem, and demonstrates how simple it is to add state machine functionality to classes.  If a class you are designing has variables that keep state, and you are triggering behaviors when those variables change, then a state machine will likely be a more clean approach to organizing behavior in your class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring: making master programmers]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/14/refactoring-making-master-programmers/"/>
    <updated>2013-01-14T16:34:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/14/refactoring-making-master-programmers</id>
    <content type="html"><![CDATA[<p>There is often a tension between product management and engineering when it comes to time spent adding new features vs. time spent in code refactoring.  One could even explain this in terms of top line vs bottom line descriptions. Features mean sales, codebase is an asset, and poor code quality is a liability that affects cost and thus profit. Sloppy, risky, or fragile code is even called &ldquo;technical debt&rdquo; in many circles. This tension between features and code quality has always been a tightrope walk for any successful software or Internet company. Starve features and you kill sales, ignore expanding bloat and you will never win a sprint, let alone the marathon of staying relevant.</p>

<p>But there is a lot more to refactoring than code quality. In this post I wanted to mention one that is often overlooked: <em>&ldquo;refactoring makes good coders into master coders.&rdquo;</em>  The best lessons come from revisiting your mistakes and improving them, but without refactoring the revisiting is limited to quick fixes to limit the impact of a bad architecture, design, or implementation. Yes we can learn from our mistakes by trying different approaches on future projects, but the problems are ever changing, and thus the learnings are not as clear. I have always found I learned so much more as a designer and a developer by revisiting a problem with a new level of experience to draw from.</p>

<p>Design has been more fortunate regarding the opportunity for refactoring; good design organizations understand how much can be learned by refactoring a design and thus fight hard to allow for it. Development has often not been as successful in making the case. I wonder if the cost analysis could be changed if executives understood that refactoring actually significantly improved two of the most important assets at a software company: the code base and the engineering talent. Then it becomes a more interesting decision versus a simple weighing of new features vs improved quality.</p>

<p><img src="http://media.tumblr.com/7095223771e3c38939367f18458726e1/tumblr_inline_mgmwbwyolq1qz562v.jpg" alt="image" />Bull</p>

<p>I got to thinking about this looking at Picasso&rsquo;s Bull series.  This is an excellent example of a master working through a problem to develop the most elegantly simplified expression of the subject. To become a master, one must work through a problem incrementally and always looking for elegant ways to improve, to simplify the end expression of the solution. Even for a competent coder, it is not always apparent what is elegant without seeing the real life consequences of chosen approaches. Whether the approach makes the code fragile, bloated, or unfriendly, it is only through the experience of trying to grow a code base that these issues can be truly understood. Under the right conditions refactoring provides a sort of express lane  to becoming a master developer. This is very difficult if you are never allowed to truly revisit a subject after completing the first expression of the solution. I like the &ldquo;Bull&rdquo; example because it is how I think of elegant design and development, just enough to represent the solution and no more, anything else is bloat that will be nothing but cost later. Through refactoring, a developer can develop insights, skills, and techniques more quickly by addressing a well understood problem from a more experienced perspective.  Practice make perfect. If not the code, maybe the coder.</p>
]]></content>
  </entry>
  
</feed>
