<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://fooqri.github.io/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2015-09-10T05:37:26-07:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ESP8266 Initial Notes]]></title>
    <link href="http://fooqri.github.io/blog/2015/09/09/esp8266-initial-notes/"/>
    <updated>2015-09-09T08:05:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/09/09/esp8266-initial-notes</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/sparkfun_thing.jpg"  style="height: 400px; display: block; margin: auto;"></p>

<h1>Here are a few notes from my experiments with the ESP8266</h1>

<p>I have started testing  the ESP8266 as an inexpensive WiFi enabled IoT device platform. I will added specific how-to notes later but wanted to capture a few items from my initial experiments.</p>

<p>I started with the <a href="https://www.sparkfun.com/products/13231" target="_blank">Sparkfun Thing</a>, which is a nice ESP8266 dev board that supports integrated LiPo battery management. They have a nice <a href="http://fooqri.github.io//learn.sparkfun.com/tutorials/esp8266-thing-hookup-guide" target="_blank">Hookup Guide</a> to get you started.</p>

<p>My use case is a very simple IoT type device that will send data to a cloud service that I have developed. The cloud service will aggregate the data from multiple personal IoT devices for a user. These devices will generally be powered via LiPo battery when in use for interaction and placed in a charging tray when not in interactive use. The devices are always active but have special meaning when in interactive use.</p>

<p>These constraints mean that battery life is a critical factor, but I do not need days, months, or years of battery life. The ESP8266 is a fairly power hungry device, especially when transmitting data, but it does have some power management features, most notably <strong>deep sleep</strong>.</p>

<h2>Notes from my initial experiments:</h2>

<h3>The Kit</h3>

<p>I used the <a href="http://fooqri.github.io//www.sparkfun.com/products/13231" target="_blank">Sparkfun Thing</a>, <a href="http://fooqri.github.io//www.sparkfun.com/products/9873" target="_blank">FTDIBreakout</a> for uploading code, and  <a href="http://fooqri.github.io//www.sparkfun.com/products/10718" target="_blank">LiPo battery</a>.</p>

<h3>Setup</h3>

<p>An easy way to get code running is to use the <a href="http://fooqri.github.io//learn.sparkfun.com/tutorials/esp8266-thing-hookup-guide/installing-the-esp8266-arduino-addon" target="_blank">Arduino Addon</a> that lets you leverage the Arduino libraries in programming the ESP8266. An alternative I will try in the future is the  <a href="http://fooqri.github.io//github.com/nodemcu/nodemcu-firmware" target="_blank">Lua based firmware</a></p>

<p>When using the FTDI to program the board take note that GPIO0 is used to set the run mode of the firmware. 3.3V puts it in <em>run mode</em> and 0V puts it in <em>program mode (bootloader)</em>. This is easy to miss in the instructions, so be sure to connect the <em>0</em> pin to ground when you wish to upload the code from the Arduino IDE.</p>

<h2>Power Management</h2>

<p>To use the <em>deep sleep</em> mode on the <em>Sparkfun Thing</em> you must connect <em>XPD</em> to <em>DTR</em>. Sparkfun connected DTR to RST on the <em>Thing</em> so a short negative voltage will reset the device. When in <em>deep sleep</em> most system services are powered off, but the RTC and timer interrupt remains active for the purpose of waking the device from sleep. This is handled by the firmware once these pins are connected, however this means you will have to remove the FTDI programmer to test the deep-sleep mode.</p>

<p>The <em>deepsleep()</em> call looks a lot like a <em>delayMicroseconds()</em> call, simply pass it the number of microseconds before it should wake up again. In deep sleep mode, the ESP8266 hits about 60 ÂµA of power draw, down from its average of around 75mA, and the 200mA used while transmitting.</p>

<p>It should be possible to connect a button or some other independent sensor as an alternative to a timer based wakeup, so the device can be awaken by a button press or some physical world event.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ESP.deepSleep(1000000);  //sleep for 1 second</span></code></pre></td></tr></table></div></figure>


<h3>Saving State</h3>

<p>Unlike a call to <em>delay()</em> or <em>delayMicroseconds()</em>, the <em>deepsleep()</em> function actually causes the device to power down everything except the RTC and related services. Wake is essentially a device reboot and previous state is not maintained. This means any state will need to be stored in the ESP8266 EEPROM. For this there is an EEPROM library and EEPROM.get()</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  //some struct for saved object
</span><span class='line'>  struct BackupObj{
</span><span class='line'>    int setting;
</span><span class='line'>    int data;
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  //write
</span><span class='line'>  int eeAddress = 0;
</span><span class='line'>  EEPROM.begin(4096);  //set up memory allocation
</span><span class='line'>  EEPROM.put( eeAddress, backupObj );
</span><span class='line'>  EEPROM.commit();
</span><span class='line'>  EEPROM.end();
</span><span class='line'>
</span><span class='line'>  //read
</span><span class='line'>  int eeAddress = 0; 
</span><span class='line'>  EEPROM.begin(4096);
</span><span class='line'>  EEPROM.get( eeAddress, backupObj );
</span><span class='line'>  EEPROM.end();</span></code></pre></td></tr></table></div></figure>


<h3>Adding Components</h3>

<p>The device works well for I2C, in my case I tested with an MPU-6050.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #include &lt;Wire.h&gt;
</span><span class='line'>
</span><span class='line'>  void setup() {
</span><span class='line'>    // ... other setup code
</span><span class='line'>    Wire.begin();
</span><span class='line'>    Wire.beginTransmission(MPU);
</span><span class='line'>    Wire.write(0x6B);  // PWR_MGMT_1 register
</span><span class='line'>    Wire.write(0);     // set to zero (wakes up the MPU-6050)
</span><span class='line'>    Wire.endTransmission(true);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // using arduino's loop mechanism
</span><span class='line'>  void loop(){
</span><span class='line'>    // ... other loop code
</span><span class='line'>    Wire.beginTransmission(MPU);
</span><span class='line'>    Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
</span><span class='line'>    Wire.endTransmission(false);
</span><span class='line'>    Wire.requestFrom(MPU,14,true); 
</span><span class='line'>    AcX=Wire.read()&lt;&lt;8|Wire.read();     
</span><span class='line'>    AcY=Wire.read()&lt;&lt;8|Wire.read();  
</span><span class='line'>    AcZ=Wire.read()&lt;&lt;8|Wire.read(); 
</span><span class='line'>    // ... other loop code
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>I tested using GPIO with a piezo used as a speaker. The Speaker is capable of playing simple notes using frequency of note mapped to cycles of sound and delay.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #define NOTE_C5  523 //middle C
</span><span class='line'>  #define NOTE_D5  587
</span><span class='line'>
</span><span class='line'>  const int SPEAKER_PIN = 5;
</span><span class='line'>  
</span><span class='line'>  void playNote(int targetPin, long frequency, long length) {
</span><span class='line'>    long delay = 1000000 / frequency / 2; 
</span><span class='line'>    long cycles = frequency * length / 1000; 
</span><span class='line'>    for (long i = 0; i &lt; cycle; i++) { 
</span><span class='line'>      digitalWrite(targetPin, HIGH); 
</span><span class='line'>      delayMicroseconds(delay); 
</span><span class='line'>      digitalWrite(targetPin, LOW); 
</span><span class='line'>      delayMicroseconds(delay);
</span><span class='line'>    } 
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  long noteDuration = 500;
</span><span class='line'>  long frequency = NOTE_C5;
</span><span class='line'>
</span><span class='line'>  playNote(SPEAKER_PIN, frequency, noteDuration);
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<p>I  tested  analog sensor input in the form of a second piezo connected to the ADC pin as a knock sensor. ADC is the only analog input pin on this device.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  const int KNOCK_SENSOR = A0;
</span><span class='line'>  const int KNOCK_THRESHOLD = 70;
</span><span class='line'>
</span><span class='line'>  sensorReading = analogRead(KNOCK_SENSOR); 
</span><span class='line'>  if (sensorReading &gt;= KNOCK_THRESHOLD) {
</span><span class='line'>    long noteDuration = 500;
</span><span class='line'>    long frequency = NOTE_E5;
</span><span class='line'>    playNode(SPEAKER_PIN, frequency, noteDuration); 
</span><span class='line'>  }
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<p>Finally there were enough pins remaining to hookup an RGB LED breakout. I added this test using the  <a href="http://fooqri.github.io//github.com/joushx/Arduino-RGB-Tools" target="_blank">RGB Tools Lib</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #include &lt;RGBTools.h&gt;
</span><span class='line'>
</span><span class='line'>  const int RED_PIN = 4; 
</span><span class='line'>  const int GREEN_PIN = 12; 
</span><span class='line'>  const int BLUE_PIN = 13;
</span><span class='line'>
</span><span class='line'>  // set the RGB pins - here I used pins 4, 13, and 12
</span><span class='line'>  // use RGBTools rgb(4,13,12, COMMON_CATHODE); if using a cathode RGB
</span><span class='line'>  RGBTools rgb(4,13,12); 
</span><span class='line'>
</span><span class='line'>  //set a nice red
</span><span class='line'>  rgb.setColor(174,10,0);
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This was a quick run through to test some of the feature of the device, but even with a few sensors/actuators and a simple setup there is a nice combination of status and interaction feedback that can be performed with a simple and relatively inexpensive device. The <em>Sparkfun Thing</em> retails for around $15 right now but the <a href="http://fooqri.github.io//learn.adafruit.com/adafruit-huzzah-esp8266-breakout/overview" target="_blank">Huzzah</a> is under $10, and others can be found closer to $5.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Updating Edison Apps]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/18/self-updating-edison-app/"/>
    <updated>2015-08-18T10:49:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/18/self-updating-edison-app</id>
    <content type="html"><![CDATA[<p>One of the challenges I have had in handing out prototype devices is keeping the software up to date. Solutions like <a href-"www.resin.io" target="_blank">resin.io</a> do a nice job of deploying <a href="http://bundler.io/" target="_blank">bundler images</a> onto devices like the Edison. The primary issue I had was the overhead of pushing bundler images around when the only thing that was changing was the node app. It seemed easier to just use git and npm to handle the updates. I may go the resin.io route later, but this early in dev and testing the git route seems simpler.</p>

<h2>Overview of What I Did</h2>

<p>The product I am prototyping has two parts, an Edison device (with additional sensors and actuators) running a node app, and a node web service for managing device configuration and data running in the cloud.</p>

<ol>
<li>The device&rsquo;s node app is published in a private github repository.</li>
<li>I installed and configured git on each of the Edison devices.</li>
<li>I cloned the github repository onto each of the Edison devices.</li>
<li>I installed the forever module on each of the devices to keep the app up and allow easy restarting of the app.</li>
<li>I created a startup script that starts the app using forever.</li>
<li>I created and enabled a linux service that runs the startup script on boot.</li>
<li>I added code to the app to periodically ask the web service what the latest version of the app should be.</li>
<li>If a new version is available the app will do a pull and use forever to do a restart using the new version.</li>
</ol>


<h2>The Details</h2>

<h3>Initial Cleanup</h3>

<ul>
<li>Remove any app from the default Edison node_app_slot directory so you don&rsquo;t accidentally start the app using the default Edison process.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv /node_app_slot /node_app_slotbk
</span><span class='line'>mv  ~/.node_app_slot/ ~/.node_app_slotbk</span></code></pre></td></tr></table></div></figure>


<h3>Install Git</h3>

<h4>Update /etc/opkg/base-feeds.conf with these 3 lines</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>src all     http://iotdk.intel.com/repos/1.1/iotdk/all
</span><span class='line'>src x86 http://iotdk.intel.com/repos/1.1/iotdk/x86
</span><span class='line'>src i586    http://iotdk.intel.com/repos/1.1/iotdk/i586</span></code></pre></td></tr></table></div></figure>


<h4>Update opkg and install git</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opkg update
</span><span class='line'>opkg install git</span></code></pre></td></tr></table></div></figure>


<h3>Option 1: Modify Edison&rsquo;s default port</h3>

<p>I wanted to use port 80 for the node app so I moved the default Edison config service to port 8080</p>

<h4>Change default port in edison-cofig-server</h4>

<p>Edit <em>/usr/lib/edison_config_tools/edison-config-server.js</em>
and change the last line to use a port other than 80.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http.createServer(requestHandler).listen(8080);</span></code></pre></td></tr></table></div></figure>


<h4>Option 2: Disable the Edison config web service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl disable edison_config
</span><span class='line'>systemctl stop    edison_config</span></code></pre></td></tr></table></div></figure>


<h3>Setup to use github</h3>

<h4>Generate a key for use with github</h4>

<ul>
<li>ssh-keygen -t rsa -b 4096 -C &ldquo;<a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#109;&#x65;&#x40;&#x6d;&#121;&#46;&#101;&#x6d;&#x61;&#105;&#x6c;">&#x6d;&#x65;&#x40;&#109;&#x79;&#x2e;&#101;&#109;&#x61;&#105;&#108;</a>&rdquo;</li>
</ul>


<p>Follow the directions, easiest is just to hit return at the prompts. I chose to not do a passphrase for my small pilot.</p>

<h4>Generate a deployment key for the github repository</h4>

<ul>
<li>Go to your app&rsquo;s github repository, choose <em>settings</em>, choose <em>deployment keys</em></li>
<li>Click the <em>Add Deployment Key</em> button</li>
<li>Give it a title (the host name for the device works)</li>
<li>Back on the Edison run cat /home/root/.ssh/id_rsa.pub to get the text for the public key</li>
<li>copy the text for the public key to the <em>Key</em> input box back on github.</li>
</ul>


<h3>Clone your repo</h3>

<p>Back on the Edison</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /
</span><span class='line'>git clone &lt;your repo&gt; AppDirName
</span><span class='line'>cd /AppDirName</span></code></pre></td></tr></table></div></figure>


<h3>Pull Latest code</h3>

<p>Now any time you update code on master a simple <em>git pull</em> will update the latest code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull</span></code></pre></td></tr></table></div></figure>


<h3>Install forever module using npm</h3>

<p>Forever will automatically restart a node app if it crashes. It also has some handy restart features.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g forever</span></code></pre></td></tr></table></div></figure>


<h3>Create a startup script &amp; service</h3>

<p>Creating a startup service will allow your app to start automatically using forever.</p>

<h4>Create startup.sh to start node app (server.js in this case)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>cd /AppDirName 
</span><span class='line'>forever start server.js</span></code></pre></td></tr></table></div></figure>


<h4>Make startup.sh executable</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod -x startup.sh</span></code></pre></td></tr></table></div></figure>


<h4>Create a startup service file at /lib/systemd/system/startup.service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'> Description=STARTUP
</span><span class='line'> [Service]                           
</span><span class='line'> Type=idle                           
</span><span class='line'> RemainAfterExit=true
</span><span class='line'> ExecStart=/AppDirName/startup.sh
</span><span class='line'> Environment="HOME=/home/root"    
</span><span class='line'> WorkingDirectory=/AppDirName/   
</span><span class='line'> [Install]                     
</span><span class='line'> WantedBy=multi-user.target </span></code></pre></td></tr></table></div></figure>


<h4>Enable startup service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl enable /lib/systemd/system/startup.service</span></code></pre></td></tr></table></div></figure>


<h3>Enable your node app to update itself</h3>

<p>By using a simple update function you can get your app to update itself and restart.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var spawn = require('child_process').exec;
</span><span class='line'>var semver = require('semver');
</span><span class='line'>var bunyan = require('bunyan');
</span><span class='line'>var log = bunyan.createLogger({
</span><span class='line'>    name: 'app',
</span><span class='line'>    streams: [{
</span><span class='line'>        type: 'rotating-file',
</span><span class='line'>        path: '/var/log/app.log',
</span><span class='line'>        period: '1d',
</span><span class='line'>        count: 7        
</span><span class='line'>    }]
</span><span class='line'>});
</span><span class='line'>var pjson = require('./package.json');
</span><span class='line'>
</span><span class='line'>var checkVersion = function(){
</span><span class='line'>  var currentVersion = pjson.version;
</span><span class='line'>  var options = {  hostname: 'www.myhost.com',
</span><span class='line'>                             port: 80,
</span><span class='line'>                   path: 'http://www.myhost.com/device_version/',
</span><span class='line'>                   method: 'GET',
</span><span class='line'>                   headers: {'Content-Type': 'application/json'}
</span><span class='line'>                };
</span><span class='line'>  var callback = function(response) {
</span><span class='line'>    var dataStr = '';
</span><span class='line'>    response.on('data', function (chunk) {
</span><span class='line'>      dataStr += chunk;
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    response.on('end', function () {
</span><span class='line'>      var versionInfo = JSON.parse(dataStr);
</span><span class='line'>      var latestVersion = versionInfo.client_version || "0.0.0"; //don't update if missing version info
</span><span class='line'>      log.info("current version: ", currentVersion);
</span><span class='line'>      log.info("latest version: ", latestVersion);
</span><span class='line'>      if (semver.gt(latestVersion, currentVersion)){
</span><span class='line'>        log.info("pulling newer versions");
</span><span class='line'>        spawn('git pull', function(error, stdout, stderr) {
</span><span class='line'>          if (error){
</span><span class='line'>            log.error("ERROR pulling latest: ", error);
</span><span class='line'>          }
</span><span class='line'>          else{
</span><span class='line'>            log.info("updating packages");
</span><span class='line'>            spawn('npm update', function(error, stdout, stderr){
</span><span class='line'>              if (error){
</span><span class='line'>                log.error("ERROR updating packages: ", error);
</span><span class='line'>              }
</span><span class='line'>              else {
</span><span class='line'>                log.info("restarting node");
</span><span class='line'>                spawn('forever restartall', function(error, stdout, stderr){
</span><span class='line'>                  if (error){
</span><span class='line'>                    log.error("ERROR restarting: ", error);
</span><span class='line'>                  }
</span><span class='line'>                  else {
</span><span class='line'>                     log.info("restarted");
</span><span class='line'>                  }
</span><span class='line'>                });
</span><span class='line'>              }           
</span><span class='line'>            });
</span><span class='line'>          }
</span><span class='line'>        }); 
</span><span class='line'>      }
</span><span class='line'>    });
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>//check for updates at app startup
</span><span class='line'>checkVersion();
</span><span class='line'>
</span><span class='line'>//then check for updates every hour;
</span><span class='line'>setInterval(function() {
</span><span class='line'>    checkVersion();                                                       
</span><span class='line'>  }, 3600000);
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<h3>On the server</h3>

<p>You will need to add a route on your server to provide the version info. In this example the route was a GET request to the  <em>/device_version</em> route. For simplicity I just use an env_var on the service. I simply update the env_var when a new version is available. Then in the logic for the <em>/device_version</em> route I pass back the version found in the env_var.</p>

<p>The logic for comparing versions is very basic and flawed, but will work in this simple case.</p>

<h3>Improvements</h3>

<p>Ideally instead of a straight <em>git pull</em> you can instead download a tagged version, and keep the current and next version info for each device in the web service db. This would allow rolling out upgrades to specific devices, etc. Another approach would be to pass back version info to the device so updates could roll out immediately if the device is in use. Finally more logic on the device to schedule an update when not active would be ideal. In that case maybe adding more than <em>versionNumber</em> of the latest version to the server response, maybe a priority value also.</p>

<p>This was a quick experiment it getting updates to percolate out to devices prototype devices, and so far it seems to be working well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workbench Replaces My Desk]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/17/workbench/"/>
    <updated>2015-08-17T08:15:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/17/workbench</id>
    <content type="html"><![CDATA[<p><a href="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/workbench.JPG" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/workbench.JPG"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>I changed my desk out for a workbench and am very pleased with the results. I made the switch for two reasons:</p>

<ol>
<li>I spend a lot of time at my desk and wanted to mix in sitting and standing throughout the day.</li>
<li>I started to work more frequently on small hardware projects and found that being able to stand and move about the bench was more comfortable.</li>
</ol>


<p>A few additional changes I made:</p>

<ul>
<li>I found that I needed more tools at hand when I was working on hardware projects, so I brought in a small tool cabinet from the garage.</li>
<li>I wanted to have access to a large number of &ldquo;Maker&rdquo; materials in my office vs. the garage, so I also added an <a href="http://www.ikea.com/us/en/catalog/products/40196241/" target="_blank">IKEA Alex</a> cabinet. These can often be found in their discount section for around $60 if you don&rsquo;t mind a few minor marks. This cabinet holds larger hardware components (like Arduino boards) as well as design/art supplies like paper, ink, paint, cutting/carving tools, etc.</li>
<li>I wanted to have some smaller supplies at hand on top of the desk so I added a few <a href="http://www.amazon.com/gp/product/B000AIDBGC" target="_blank">Art Supply Drawers</a> for the top of the bench. The one to the left of the monitor holds small electronic components. The one to the right holds drawing pencils, pens, markers, etc that I use frequently.</li>
<li>I added a <a href="http://fooqri.github.io//www.amazon.com/gp/product/B00ANZRT4M" target="_blank">digital soldering station</a> and <a href="http://www.amazon.com/Weller-WSA350-Bench-Smoke-Absorber/dp/B000EM74SK" target="_blank">exhaust fan</a>. I still have a soldering station in the garage, but having one at hand is very convenient.</li>
<li>Another handy addition is the <a href="http://www.amazon.com/gp/product/B00XNYXQHE" target="_blank">USB Microscope</a>, as some solder joints just require very careful inspection. This is especially true with soldering of small components and SMD components.</li>
<li>I also had to add a <a href="http://www.amazon.com/gp/product/B001PMJXD2" target="_blank">bench height chair</a>.</li>
<li>The workbench is a <a href="http://www.amazon.com/Gladiator-GAWB08HWEG-Adjustable-Hardwood-Workbench/dp/B00ZTH82CW" target="_blank">Gladiator 8 ft. maple workbench</a> I had in the garage for a long time. The new ones allow height adjustment, and there are also less expensive bamboo top options.</li>
</ul>


<p>I am very pleased with the setup. One nice feature is the workbench depth is less than a traditional desk, so I gained some space back in the office. The main benefit is just better productivity, I find certain tasks are just easier to accomplish when standing. The final benefit? With two greyhounds in the house, having a tall desk means fewer expensive pens and markers go missing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I2C MPU-6050]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/17/i2c-mpu-6050/"/>
    <updated>2015-08-17T05:50:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/17/i2c-mpu-6050</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/mpu6050.jpg"  style="height: 400px; display: block; margin: auto;"></p>

<p>I am using an accelerometer in my most recent device to capture gesture and orientation information, as the device itself has no traditional user interface. Since the device is running a node.js app to capture data and push it to a cloud service the first prototype required a quick solution to getting data from an MPU.</p>

<p>To capture data I am using a  few node modules. In particular the <a href="https://github.com/hybridgroup/cylon" target="_blank">cylon.js</a> module, along with the <a href="https://github.com/hybridgroup/cylon-i2c" target="_blank">cylon-i2c</a> module.  This allows accelerometer data to be easily used by the following code block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cylon                                                                          
</span><span class='line'>  .robot()                                                                    
</span><span class='line'>  .connection("edison", { adaptor: "intel-iot", i2cPort: 1})                  
</span><span class='line'>  .device("accel", { driver: "mpu6050" })                                     
</span><span class='line'>  .on("ready", function(bot) {                                      
</span><span class='line'>    setInterval(function() {                                        
</span><span class='line'>      bot.accel.getAcceleration(function(err, data) {
</span><span class='line'>        //use data
</span><span class='line'>      });
</span><span class='line'>    });
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<h2>The MPUs</h2>

<p>The first prototype of this device is using a SparkFun Edison stack with the SparkFun I2C block connected to an MPU-6050, rather than the SparkFun Accelerometer block. At the time of this writing the cylon-i2c implementation of the lsm9ds0 driver is not working correctly with the SparkFun Accelerometer block, so I went the I2C route. The second an perhaps more important reason I went the I2C route is that MPU-6050 boards can be had for as low as $4, which is appealing for a low cost prototype.</p>

<p>I have a handful of MPUs I have tried and here is some info on them.</p>

<h3><a href="https://www.sparkfun.com/products/11028" target="_blank">SparkFun MPU-6050 Breakout</a></h3>

<p>This is great accelerometer breakout that works well with the Edison and Cylon module, but much less expensive options exist.</p>

<h3><a href="http://www.amazon.com/gp/product/B00H1OYE4Q" target="_blank">RioRand Triple Axis MPU-6050 Breakout</a></h3>

<p>This is currently my go to accelerometer. It is relatively low priced at $11 and arrives in 2 days via Amazon Prime. These work well with both the Edison 3.3V boards, and the cylon i2c module. Unfortunately the default I2C address for this board is 0x69, instead of the more common  0x68 (used by the cylon mpu6050 driver) so you will need to solder the AD0 jumper plate on the top of the board.</p>

<h3><a href="http://www.amazon.com/Kootek-MPU-6050-MPU6050-sensors-Accelerometer/dp/B008BOPN40/" target="_blank">Kootek GY-521 MPU-6050 MPU6050 Module</a></h3>

<p>At $4 with free shipping these look like a great option. They are reported to work well with 3.3V VCC. The down side is very slow delivery via the slow boat. I have a handful on order, I will provide an update when they arrive.</p>

<h3><a href="http://www.amazon.com/gp/product/B009M19L4Y" target="_blank">GY-521 6DOF MPU6050 Module</a></h3>

<p>At a little over $5 with free shipping this seems like a great option, unfortunately the onboard voltage regulator in the GY-521 is designed for the Arduino 5V VCC and when used with a 3.3V VCC of the Edison blocks results in too low power on the I2C SDA/SCL pins to register as proper high and low voltage values. It is possible to give the board a separate 5V VCC supply, but that just seems overly complicated for the prototype device. Another feature of this board is the breakout of AD0 into a pin, allowing easy switching between I2C 0x68 and 0x69 addresses using either a ground or VCC connection.</p>

<h2>Connecting the MPU</h2>

<p>For the first prototype I am using  SparkFun Edison blocks, as I have a a few sets of these interchangeable blocks that are quick to assemble into a prototype. In this case I am using the <a href="https://www.sparkfun.com/products/13034" target="_blank">SparkFun I2C</a> block with an Edison. This block allows the Edison to be snapped onto the block, and the MPU-6050 board to be connected with 4 jumpers (VCC, GND, SDA, SCL).</p>

<h2>Checking I2C Address</h2>

<p>Most MPU-6050 boards will have an I2C address of 0x68, but if you choose a different MPU and it isn&rsquo;t working with Cylon, the first thing to check will be whether the address is 0x68. The error message from Cylon will be a <em>&ldquo;RangeError: Trying to access beyond buffer length&rdquo;</em> for most errors where the MPU is not connected properly. To check the address use the following command when the MPU is connected via I2C.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i2cdetect -y -r 1</span></code></pre></td></tr></table></div></figure>


<p>The result will look something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
</span><span class='line'>00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- -- 
</span><span class='line'>70: -- -- -- -- -- -- -- --</span></code></pre></td></tr></table></div></figure>


<p>You will see either a 68 or a 69 if the MPU-6050 is connected properly. If the address displayed is 69, you will need to change the address to 68 using the technique recommended for your board (AD0 jumper). You may see other numbers in the results if you have other I2C components included in your assembled device, but if you are using an MPU-6050 and it is connected correctly either a 68 or a 69 should appear in the i2cdetect results.</p>

<p>I won&rsquo;t get into calibration or gesture recognition in this post, but will try to post more on MPU calibration, gesture recognition, etc in future posts. Given not all MPU-6050 breakouts work with the Edison because of their compatibility with 5V Arduino boards I wanted to post the notes of my experience with a few of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESP8266]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/16/esp8266/"/>
    <updated>2015-08-16T15:41:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/16/esp8266</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/ESP8266.jpg"  style="height: 400px; display: block; margin: auto;"></p>

<p>I have been building a few prototype devices with the following parts:</p>

<ul>
<li><a href="https://www.sparkfun.com/products/13024" target="_blank">Intel Edison</a></li>
<li><a href="https://www.sparkfun.com/products/13037" target="_blank">Sparkfun Battery Block</a></li>
<li><a href="https://www.sparkfun.com/products/13034" target="_blank">Sparkfun I2C Block</a></li>
<li><a href="http://www.amazon.com/gp/product/B00H1OYE4Q" target="_blank">MPU-6050</a></li>
</ul>


<p>The device runs a node.js app that handles configuration and also posting data to a web service running in the cloud. Each user has an account and can have 1 or more devices. I won&rsquo;t get into the purpose of the device here (or a few more components it has) but the device is working for its intended early prototyping purpose.</p>

<p>I have a drawer full of SparkFun Edison blocks, and often use them with an Edison for the first prototype of a device because it is such a powerful prototyping platform if you know Linux well. They Sparkfun boards are rather expensive, but so quick to use for rapid prototyping that I tend to always start with them. They also integrate well with various node libs including <a href="https://www.npmjs.com/package/cylon" target="_blank">cylon</a> and <a href="https://github.com/node-red/node-red" target="_blank">nodered</a>.</p>

<p>But when it is time to build more than a few prototype units, cost does start to matter.  Replacing the Sparkfun boards with a PCB approach is the next obvious step to lowering cost and customizing the device, but in this latest device the Edison platform itself is too expensive to create the devices at the price point I am targeting. It is the perfect physical size, but the price is too high.</p>

<p>After some analysis I have decided to try to reproduce the behavior of the current device using an ESP8266 instead of the Edison. I ordered some very inexpensive ESP8266 that are coming via the slow boat, but in the mean time my <a href="https://goo.gl/yCnruP" target="_blank">Sparkfun ESP8266 Thing</a> arrived. It is a breakout board featuring the ESP8266.</p>

<p>I hope to get time over the next week to dive into coding the ESP8266, but if anyone has previously hooked up an MPU-6050 to an 8266 I would love to hear about your experiences and any issues, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edison Wi-Fi Configuration]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/16/edison-wifi-config/"/>
    <updated>2015-08-16T13:55:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/16/edison-wifi-config</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/IMG_4161.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>I built a handful of prototype devices using Intel Edison boards to hand out to testers, but one challenge is each tester will bring the devices to their own Wi-Fi environment (home, work, etc). The default method for configuring an Edison is to use a console and the command line configuration tool to add a Wi-Fi access point.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>configure_edison --wifi</span></code></pre></td></tr></table></div></figure>


<p>The <em>configure_edison</em> app will scan for Wi-Fi networks and provide a list of networks for the user to pick from, and then prompt the user for the access point password. Since my headless IoT device has no traditional interface, let alone terminal interface this posed a problem. I needed a way for users to configure the device for new Wi-Fi networks as they were encountered, and make it accessible using a web page presented by the Edison. I will post the code once I have it completed and tested with users but for a quick hint the trick is to allow the running node.js app to switch the device between access point mode and client mode so if no network is available the device becomes an access point allowing the user to use any Wi-Fi enabled device to connect with it. Once connected the user can use a standard web browser to update the configuration to include the new Wi-Fi network they are intending to use.</p>

<h3>wpa_supplicant</h3>

<p>The Edison uses the wpa_supplicant service to manage the client-mode Wi-Fi. The wpa_supplicant configuration file is located at: <strong>/etc/wpa_supplicant/wpa_supplicant.conf</strong></p>

<p>Wi-Fi networks are added and removed by updating this configuration file. Se an example configuration below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl_interface=/var/run/wpa_supplicant
</span><span class='line'>ctrl_interface_group=0
</span><span class='line'>config_methods=virtual_push_button virtual_display push_button keypad
</span><span class='line'>update_config=1
</span><span class='line'>fast_reauth=1
</span><span class='line'>device_name=Edison
</span><span class='line'>manufacturer=Intel
</span><span class='line'>model_name=Edison
</span><span class='line'>
</span><span class='line'>network={
</span><span class='line'>  ssid="guest"
</span><span class='line'>  key_mgmt=WPA-PSK
</span><span class='line'>  pairwise=CCMP TKIP
</span><span class='line'>  group=CCMP TKIP WEP104 WEP40
</span><span class='line'>  eap=TTLS PEAP TLS
</span><span class='line'>  psk="guest_pw"
</span><span class='line'>  id_str="guest"
</span><span class='line'>  priority=4
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>network={
</span><span class='line'>  ssid="MyPhone"
</span><span class='line'>  key_mgmt=WPA-PSK
</span><span class='line'>  pairwise=CCMP TKIP
</span><span class='line'>  group=CCMP TKIP WEP104 WEP40
</span><span class='line'>  eap=TTLS PEAP TLS
</span><span class='line'>  psk="hotspot_pw"
</span><span class='line'>  id_str="iphone_hotspot"
</span><span class='line'>  priority=2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see I have added two networks to the configuration, and given the network associated with my phone (in personal hotspot mode) a lower priority so it will be a fallback only. <em>Note: you can change the name of your iPhone (and thus its personal hotspot) using itunes, and you can find the hotspot password in the hotspot settings on the iphone.</em></p>

<p>You can also add support for connecting to any open network (at your own risk) with an empty network statement</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>network={
</span><span class='line'>  id_str="open"
</span><span class='line'>  priority=0
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If the network you are connecting to has a hidden ssid then you need to add <em>scan_ssid=1</em> to the configuration description. Because <em>scan_ssid=0</em> is the default setting and is used for a broadcast ssid it can be omitted from the configuration of networks using a broadcast ssid.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>network={
</span><span class='line'>  scan_ssid=1
</span><span class='line'>  ssid="MyHiddenSSID"
</span><span class='line'>  key_mgmt=WPA-PSK
</span><span class='line'>  pairwise=CCMP TKIP
</span><span class='line'>  group=CCMP TKIP WEP104 WEP40
</span><span class='line'>  eap=TTLS PEAP TLS
</span><span class='line'>  psk="hidden_hotspot_pw"
</span><span class='line'>  id_str="hidden_hotspot"
</span><span class='line'>  priority=2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Switching to AP mode and back</h3>

<p>The Edison comes pre-configured for AP mode but if you are curious about changing the settings the configuration file can be found at <em>/etc/hostapd/hostapd.conf</em>.  The other key networking file that should require no changes for this configuration is <em>/etc/network/interfaces</em>.</p>

<p>In the case when no configured network is available it is possible to connect a gesture (my device has an mpu-6050) to force the device into AP mode so it can get information from the user about how to connect to a new local network. The gesture observer thread can inform the node app when the preconditions of an AP mode switch should occur, the node app can then switch the Wi-Fi network temporarily to AP mode.</p>

<p>This is accomplished by stoping the wpa_supplicant service and starting the APN services using these two system commands that can be executed in  exec() or spawn() calls.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl stop wpa_supplicant
</span><span class='line'>systemctl start hostapd</span></code></pre></td></tr></table></div></figure>


<h3>Adding a network</h3>

<p>Now the device is in AP mode and the user can connect to the device by selecting it from the list of available networks, and go to the device confguration page for information about available networks and choose one to connect to. I won&rsquo;t get into the scanning now but you can look <a href="https://goo.gl/xDxM5R" target="_blank">here</a> for more info on using _wpa_cli scan<strong> and </strong>wpa scan_results__ for getting info on available networks.</p>

<p>Once the user chooses a network and provides a password you can configure the device to use the network. My preference is to add the network and a config entry in the wpa_supplicant.conf file so the network can be used again in the future, but you can also use the wpa_cli to configure the network directly. Just use the format shown above to append your entry to the file.</p>

<h3>Switch back to Wi-Fi client mode to connect to the newly added network.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wpa_cli reconfigure
</span><span class='line'>systemctl stop hostapd
</span><span class='line'>systemctl start wpa_supplicant</span></code></pre></td></tr></table></div></figure>


<p>I will add my code for the entire process to a public gist when I have fully tested it out, and update this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popup Workbench]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/16/the-post-title/"/>
    <updated>2015-08-16T13:00:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/16/the-post-title</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/popup_workbench1.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>We are down to one car, as we can walk/bike to about anything we could possibly need including caltrain and light rail. So the garage is now empty of cars, and filled with toys. While playing ping pong one day I decided a beverage table would be nice in the garage, but something that could also serve as a work surface in a pinch. Something to put some tools on, etc. I wanted it to be something that could be folded out of the way when not needed, and something that didn&rsquo;t cost a lot since I wasn&rsquo;t sure if it would really prove useful. Sort of a prototype 1 of a collapsable work surface concept.</p>

<p>I had some left over bamboo flooring from an old home improvement project that I thought would make a great table top, and I always have a few sheets of plywood around. All I was missing was the folding legs. After some searching I found some <a href="http://www.amazon.com/gp/product/B00LGBZC4G" target="_blank">Folding Shelf Bench Brackets</a>. I ordered 2 and installed them into a couple of wall studs in the garage and mounted a plywood top. I then cut and glued the strand bamboo flooring to the top to make a nice hard surface.</p>

<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/popup_workbench2.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>For a true folding workbench something like <a href="http://goo.gl/lXKgtQ" target="_blank">this</a> looks very cool. If I decide I need something larger and more heavy duty I may go that route, but I have other benches already. I was looking for something that could add another table/work surface in a pinch in that particular location in the garage.</p>

<p>Now I also have a nice place to put cold drinks during ping pong matches.</p>

<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/popup_workbench3.JPG"  style="height: 400px; display: block; margin: auto;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisiting Buyer's Agent app using React.js]]></title>
    <link href="http://fooqri.github.io/blog/2015/06/09/revisiting-buyers-agent-app-using-react-dot-js/"/>
    <updated>2015-06-09T11:45:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/06/09/revisiting-buyers-agent-app-using-react-dot-js</id>
    <content type="html"><![CDATA[<p>In a past post I showed a <a href="http://rwx.io/blog/2014/10/22/mobile-real-estate-app-version-1/">Mobile Real Estate App</a> that was built with Polymer. This time around I will revisit the app but instead use <a href="https://facebook.github.io/react/" target="_blank">react.js</a>. The <strong>Mobile Buyer&rsquo;s Agent</strong> is a simple web based application used to demonstrate a basic React.js mobile web app.The goal is to allows a real estate buyer&rsquo;s agent to deliver a personalized mobile app experience to their clients by adding data to a Google spreadsheet. The agent updates a Google spreadsheet, and the web app loads its data from the spreadsheet.</p>

<p><a href="http://www.poggr.com/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m9" target="_blank"><img src="https://s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent_1.png"></a></p>

<p>This is a demonstration of using a shared <em>Google Spreadsheet</em>  as the data source for a simple web based application. By using poggr.com and <a href="http://facebook.github.io/react/" target="_blank">React.js</a> it is extremely easy to create a web application like the <strong><em><a href="http://www.poggr.com/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m9" target="_blank">Mobile Buyer&rsquo;s Agent</a></em></strong>.</p>

<p>The <em>Real Estate Shopper List</em> Google spreadsheet contains properties the agent wishes to present in the app. The neighborhood column is associated with the dropdown box, and allows a simple grouping/categorization of properties. The agent also provides other features and details associated with the properties.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheets/d/1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8/pubhtml" target="_blank"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent2.png" ></a></p>

<p><strong>Note:</strong> if you duplicate the example spreadsheet you must remember to publish it so it can be accessed by the <em>Mobile Buyer&rsquo;s Agent</em> app. If you get an error it is likely you forgotto publish the spreadsheet. To publish a spreadsheet while viewing it, use the file menu on Google Docs and choose <em>&ldquo;publish to the web&rdquo;</em>, and follow the instructions.</p>

<h3>Trying your own spreadsheet</h3>

<p>If you publish your own copy of the spreadsheet you can easily substitute it in the app with a simple url parameter called <strong>sheetid</strong>.</p>

<p>For example if the link your are given when you plublish your spreadsheet is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://docs.google.com/spreadsheets/d/1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8/pubhtml</span></code></pre></td></tr></table></div></figure>


<p>Then your sheetid is <strong>1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8</strong>, and you can use it in this app by using a url with sheetid parameter as shown below:</p>

<p><code style="white-space: nowrap;">po.gg/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8</code></p>

<p>This will substitue your spreadsheet for the default spreadsheet used in the app.</p>

<p>For info on the code take a look at the <a href="http://www.poggr.com/p-kz3NoHhgl:dbJMG3EjSneg" target="_blank">README</a> document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a New Intel Edison]]></title>
    <link href="http://fooqri.github.io/blog/2015/02/18/seting-up-an-edison/"/>
    <updated>2015-02-18T12:42:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2015/02/18/seting-up-an-edison</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/IMG_4161.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>The Edison is a tiny and amazing computer, and ideal prototyping tool for wearable and IoT experiments. Here are the steps I am currently following to set up the Edison.</p>

<h2>Flashing the Edison</h2>

<p>Like many developers I have Mac, Windows, and Linux laptops but I find that Linux is the best environment for flashing the Edison, even though I do most development on my Mac. I came to this conclusion after trying to recover an Edison with a lost password, the only platform that worked was Linux.</p>

<p>The first step is flashing the Edison. Follow <a href="https://communities.intel.com/docs/DOC-23200">Flashing Edison Linux</a>. You can also try <a href="https://communities.intel.com/docs/DOC-23193">Flashing Edison Mac</a>.</p>

<p>The only change I would recommend is to create a folder that contains the Edison images, and then unzip the downloaded folder into a sub directory named after the build number. Over time you may find yourself flashing to older or newer images based on the project needs.</p>

<h2>Setting up WiFi</h2>

<p>Sparkfun offers a great guide for <a href="https://learn.sparkfun.com/tutorials/edison-getting-started-guide#connecting-to-WiFi">Setting up WiFi</a> on the Edison. This takes only a few minutes and even if you don&rsquo;t plan to use WiFi in your projects it makes working with the Edison easier because you can use SCP and SSH to connect with the Edison over the network.</p>

<h2>Connect to Edison</h2>

<p>For OSX or Linux the best way to connect to the Edison is via SSH. On OSX you can use the name you gave the Edison in the step above. For example <em>ssh root@edison2.local</em> where <em>edison2</em> is the name you gave your Edison. On Linux you will use the Edison&rsquo;s IP address, for example <em>ssh root@10.0.1.12</em>.</p>

<h2>Using Emacs</h2>

<p>If you are an Emacs user then once WiFi is setup you can use <a href="http://www.emacswiki.org/emacs/TrampMode">Emacs Tramp</a> to work with files on the Edison. Just use <em>C-x C-f</em> as usual, but instead of a directory use <em>root@edison2.local</em> or use the ip address for Linux.</p>

<p>Emacs will present a directory of files on the Edison that you can open, or just keep typing the name for auto suggest feature. For example <em>root@edison2.local/home/root/notes.md</em>.</p>

<h2>Setup Bluetooth</h2>

<p>Bluetooth is available in the Edison, but in the default configuration is not enabled at boot. If you are using Bluetooth you will likely want to enable it on every reboot or power cycle.</p>

<h3>Enable Bluetooth at Boot</h3>

<p>Use the <strong>systemctl</strong> command to cause Bluetooth to start automatically</p>

<pre><code> systemctl enable bluetooth
</code></pre>

<h3>Create a BT startup script</h3>

<p>Create a script file with the following five lines (<em>/home/root/btup.sh</em>).</p>

<pre><code> #!/bin/sh
 /usr/sbin/rfkill unblock bluetooth
 /usr/bin/hciconfig hci0 up
 /usr/bin/hciconfig hci0 piscan
 /usr/bin/hciconfig hic0 sspmode 0
</code></pre>

<h3>Make the script executable</h3>

<pre><code> chmod +x /home/root/btup.sh
</code></pre>

<h3>Create a new service file (<em>/lib/systemd/system/btup.service</em>).</h3>

<pre><code> [Unit]
 Description=BTUP
 After=bluetooth.target
 Before=systemd-user-sessions.service
 [Service]
 Type=simple
 RemainAfterExit=true
 ExecStart=/home/root/btup.sh
 Environment="HOME=/home/root"
 WorkingDirectory=/home/root/
 [Install]
 WantedBy=multi-user.target
</code></pre>

<h3>Enable the service</h3>

<pre><code> systemctl enable /lib/systemd/system/btup.service
</code></pre>

<h3>Reboot the Edison</h3>

<pre><code> reboot
</code></pre>

<h2>Create a Backup</h2>

<p>Now is a good time to create a backup of the Edison that can be recovered if you need to return to a clean install. For example you may want to update nodejs, or install node modules, or even other drivers that may cause an issue you want to start over from.</p>

<p>Place a MicroSD card with at least 4GB of available space into the MicroSD slot on the dev kit board where the Edison is installed. Backup the Edison to an image file on the MicroSD. In the example below it is named <em>edison2_backup.img</em>. Make sure the file name has a <em>.img</em> extension. If you have a large MicroSD card you can store multiple backup images from multiple Edisons, making it quick and easy to recover each of them. It is wise to consider a consistent naming system.</p>

<pre><code> dd if=/dev/mmcblk0 of=/media/sdcard/edison2_bk.img
</code></pre>

<h2>Restoring an Edison from Backup</h2>

<p> If you need to restore the Edison from backup just reverse the process</p>

<pre><code> dd if=/media/sdcard/edison2_bk.img of=/dev/mmcblk0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo Caption Challenge - using Facebook Login, S3, and DynamoDb in browser app]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/23/photo-caption-challenge-using-s3-and-dynamodb-in-browser-app/"/>
    <updated>2014-10-23T13:18:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/23/photo-caption-challenge-using-s3-and-dynamodb-in-browser-app</id>
    <content type="html"><![CDATA[<p>One of the challenges of building small mobile web apps without a traditional back-end server is storing global state in a secure way. In my exploration of ways to store state I decided to build a very simple multi-player social app that allows players to participate in a simple photo challenge game. The game author specifies a <em>photo caption</em> and then invites friends to add photo responses that <em>most creatively</em> match the caption. The second feature is to allow people to vote on their favorite photo responses.</p>

<p><a href="http://fooqri.github.io//fooqri.poggr.com/peJE7qM0YUl" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/fooqri-poggs/peJE7qM0YUl/static/images/peJE7qM0YUl_screen.png"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>Such a game would typically require a server to support a few key behaviors:</p>

<ul>
<li><strong>player login</strong>: is needed to connect players with their uploaded photos, and also to limit their votes so as to keep voting fair.</li>
<li><strong>photo storage</strong>: photo upload and storage is needed to store the photos so they can be displayed when the page is loaded. In addition a back-end service is typically used to re-size uploaded images before storing them to reduce storage costs.</li>
<li><strong>global state</strong>: is generally provided by a database that stores information such as: which players have uploaded photos, and where the corresponding photos are located.</li>
</ul>


<p>There are many challenges to running a back-end server to support an app, including configuration, maintenance, and security. In the ideal case one could build all sorts of small fun apps without having to manage any such servers. With the <strong>Photo Caption Challenge</strong> app I explored using the following services instead of running an app server.</p>

<ul>
<li><strong>player login</strong>: I  used Facebook for player login as a way to differentiate players, and connect ids to votes and photos.</li>
<li><strong>photo storage</strong>: I used Amazon S3 for storing photos uploaded by players, and  used <em>canvas</em> and <em>canvas.toBlob()</em> (using <a href="https://github.com/blueimp/javascript-canvas-to-blob">JavaScript Canvas to Blob</a> polyfill) to re-size images and store them in a blob for upload to S3. Thus all image re-sizing is done in the client.</li>
<li><strong>global state</strong>: I used Amazon DynamoDB to provide state via a table that stores information about photo entries and votes.</li>
</ul>


<p>I  also used the Amazon IAM is the way to limit privileges from the client app to the data services (S3 and DynamoDB). For example you want the user to have write/delete access to only their information in the data services, but client API calls to the server can be manipulated, thus authentication information is critical to limiting privileges in accessing the data services.</p>

<p>IAM policies can specify an <em>identity provider</em> like Facebook to make sure to limit access based on current session identity information, and not the API request data. For example you can configure an IAM policy for S3 that secures S3 bucket privileges so that sub-folder privileges are connected to user identity. In the case of &ldquo;Photo Challenge&rdquo; the policy states any logged in Facebook user running the Photo Challenges app will be able to view photos in any sub-folder, but only upload, modify, or delete items that are in a folder that matches their identity provider&rsquo;s assigned userid. It also states that any user can create a folder in the bucket as long as the folder name matches their identity provider&rsquo;s assigned userid.</p>

<p>The Amazon IAM policy for DynamoDB works similarly. Any logged in Facebook user running the Photo Challenges app will be able to query the DB index for the current list of photo entries, but can only add/delete records that have a userId value that matches their identity provider&rsquo;s assigned userid. Thus a user can&rsquo;t spoof who added the record, it is connected to their userId or it is rejected by the IAM policy assigned to the DynamoDB table. For more information see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/FGAC_DDB.html">Fine-Grained Access Control for DynamoDB</a>.</p>

<h2>Conclusion</h2>

<p>In <a href="http://octopress.dev/blog/2014/10/22/mobile-real-estate-app-version-1/">Mobile Real Estate App</a> and <a href="http://octopress.dev/blog/2014/10/15/spreadsheet-driven-web-apps/">Spreadsheet Driven Web Apps</a> I  described a technique for using a Google Spreadsheet to provide web application data, but this works best when the application data is read only. For an app that requires both read, write, and query transactions, a database like DynamoDB is a great solution.</p>

<p>Like many examples on this blog, I built this app using <em><a href="http://www.poggr.com">poggr.com</a></em> because poggs are incredibly flexible and require zero configuration.  Use this app at <a href="http://fooqri.poggr.com/peJE7qM0YUl:dxJ4NmcMAK8x">fooqri.po.gg/peJE7qM0YUl</a> or if you have a poggr account you can clone <a href="http://www.poggr.com/#/projects/project/peJE7qM0YUl">this pogg</a> and use its configuration tool to set up Facebook, S3, IAM, and DynamoDB and have your version of the game running in less than 5 minutes. If you don&rsquo;t have an account you can still check out the pogg&rsquo;s <a href="http://fooqri.poggr.com/peJE7qM0YUl:dxkgN7qMCtLg">README</a> to learn more about how it was build and view the source documents.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Real Estate App - Version 1]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/22/mobile-real-estate-app-version-1/"/>
    <updated>2014-10-22T19:46:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/22/mobile-real-estate-app-version-1</id>
    <content type="html"><![CDATA[<p>I promised a few examples of spreadsheet driven apps. You may remember the <a href="http://rwx.io/blog/2014/10/15/spreadsheet-driven-web-apps/">Hipster List</a> was the first example. These are simple web apps that are initialized using data from a Google Spreadsheet once the user loads them in a browser. Using spreadsheets to keep app information current is easy for anyone. There is even a way for users to point the app at their own Google Spreadsheet if the app developer wants to turn feature that on.</p>

<p>The next example of a spreadsheet driven app (<em>below</em>) is the <strong><em>Mobile Buyer&rsquo;s Agent</em></strong> app. This may take a little time to load because it is an experiment, and thus not using a vulcanized Polymer library, so it is importing lots of individual library documents. Be patient and once cached in your browser it will be fast.</p>

<p><a href="http://fooqri.github.io//fooqri.poggr.com/pe16vKTbVLg::16" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/screen1.png"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>The idea is to create a mobile web app that can be used by buyers as they shop for a home. Once again the data is maintained in a Google spreadsheet, this time by the buyer&rsquo;s agent. The agent can add houses, home information, and notes to the spreadsheet and the buyer can use the app to view the information as they shop. This is an easy way for an agent to personalize their client experience.</p>

<p>Take a look at the <a href="https://docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdEhuM1gxY1g0ckwwWl9RSzNGTGQwemc&amp;usp=sharing#gid=4">spreadsheet</a> to see how information is organized. It allows the agent to add personalized title and notes to each house.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdEhuM1gxY1g0ckwwWl9RSzNGTGQwemc&usp=sharing#gid=4"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/spreadsheet.png"></a></p>

<p>The <a href="https://fooqri.poggr.com/pe16vKTbVLg:dgkE6vtp-4Ll::16">README</a> document provides  more details on how the app was built. Or <a href="https://fooqri.poggr.com/pe16vKTbVLg::16">try the app here</a>. I will likely provide a few updates to this app in the near future to make it a bit more interesting, but I though the first version showed a few nice features, and how to build them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[d3 charts - wrapping 'NVD3 Charts' in a web component]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/17/d3-charts-wrapping-nvd3-charts-web-component/"/>
    <updated>2014-10-17T06:39:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/17/d3-charts-wrapping-nvd3-charts-web-component</id>
    <content type="html"><![CDATA[<p>In my continued experiments with <a href="https://www.polymer-project.org/" target="_blank">Polymer</a>, I created a web component that wraps  <a href="http://nvd3.org/" target="_blank">NVD3</a> &ndash; a reusable chart library for  <a href="http://d3js.org/" target="_blank">d3.js</a>.
As part of the activity I ported all of the  <a href="http://nvd3.org/examples/index.html" target="_blank">NVD3 example charts</a> to a web component I am calling <em>&lt;goddip-charts></em>. The component is contained in a <a href="http://www.poggr.com/pekqyTpXDEe:deJoY70GdVx" target="_blank">pogg</a> on <a href="http://www.poggr.com/home/" target="_blank">poggr.com</a>, as this is where I do my experimenting and it allows me to code and serve the project documents in the one place.</p>

<iframe width="680px" height="380px" src="http://www.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::53"></iframe>


<p></p>

<p>The above chart is an iframe to <a href="http://www.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::53" target="_blank">this document</a> The actual element tag used is as follows:</p>

<pre><code> &lt;goddip-charts  
   class="small-chart-styles"
   chartType="bar"
   context="/pg1GXbi9MBx:deyDCclAEUg::53" 
   css="/pg1GXbi9MBx:dxkNM7ZicfBe::53" &gt;
 &lt;/goddip-charts &gt;
</code></pre>

<p>To view the uncompiled and unminified source see (<a href="http://source.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::49" target="_blank">html document source</a>, <a href="http://source.poggr.com/pg1GXbi9MBx:deyDCclAEUg::49" target="_blank">data document source</a>, and <a href="http://source.poggr.com/pg1GXbi9MBx:dxkNM7ZicfBe::49" target="_blank">style document source</a>).</p>

<p>The best way to learn about the <em>&lt;goddip-charts></em> component is to take a look at its <a href="http://www.poggr.com/pg1GXbi9MBx:dgJXG7boqzSe" target="_blank">README document</a>. This describes how to use each of the charts, reference data, add styling, etc. You can always view the component <a href="http://source.poggr.com/pg1GXbi9MBx:dlJkI7k9tBe" target="_blank">source</a>. If you have a <em>poggr.com</em> account you can view, clone, and edit <em>goddip-charts</em> using the <a href="http://project.poggr.com/pg1GXbi9MBx" target="_blank">poggr project UI</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Literate CoffeeScript]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript/"/>
    <updated>2014-10-15T16:53:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript</id>
    <content type="html"><![CDATA[<p>As an emacs/<a href="http://orgmode.org/" target="_blank">org-mode</a>/<a href="http://orgmode.org/worg/org-contrib/babel/" target="_blank">babel</a> user I have always been fascinated with the potential of <a href="http://en.wikipedia.org/wiki/Literate_programming" target="_blank">literate programming</a> and combining inline code in my notes. I have many org-mode documents that interactively execute code for various tasks and procedures. These tasks includes certain maintenance activities, or destructive operations I don&rsquo;t want to get wrong. I have an entire org document devoted to db maintenance, filled with Ruby code to execute complicated db queries and operations.  It is nice to see the example code inline in my notes, and be able to modify the code and execute it directly in my notes. This works especially well for checklist where calculations or actions are called for. You might even say org-mode was one inspiration for building <em><a href="http://www.poggr.com/home" target="_blank">poggr.com</a></em>; creating a browser based tool that is simple, flexible, and powerful for creating interactive and compelling documents that work in any web browser.</p>

<p>The potential of browser-based literate programming is why I find the idea of <em>Literate CoffeeScript</em> facinating. It is not just the idea of documenting code or even the idea of describing code in a blog post. It is the idea of creating flexible and effective browser based <em>task</em> and <em>tool</em> documents. The power in these types of documents is you see the code you are executing, which is extremely useful for programmer&rsquo;s notes. It seems literate CoffeeScript might have something to say about how to create browser-based interactive notes that include inline code, like emacs/org-mode/babel has done for emacs users.</p>

<p>Since <em><a href="http://www.poggr.com/home" target="_blank">poggr.com</a></em> supports compiling CoffeeScript into JavaScript  I decided to turn on literate CoffeeScript and give it a go to see if this is a legitimate way to combine code and blogging in a single pogg document.</p>

<h3>Poggr CoffeeScript Compilation</h3>

<p>The way poggr works is that when you save a <em>CoffeeScript</em> document <em>poggr</em> keeps both source code and compiled <em>JavaScript</em> code. Just like when you save a <em>markdown</em> document poggr saves both the source markdown and the compiled html. When a document is requested using a <em>poggid</em> in an http request, poggr will deliver the compiled code unless a query parameter is used to request source. This works out quite well in most cases, since the compiled version is what browsers are expecting (html, css, JavaScript). This model allows poggr to support other markup and languages like <em>less</em>, <em>scss</em>, <em>yaml</em>, etc to work similarly.</p>

<p><em>LitCoffeeScript</em> is unique in that compilation produces two documents (markdown &ndash;> html) and (CoffeeScript &ndash;> JavaScript). Thus, one challenge is knowing whether a document request is for the  html or JavaScript version. I felt compelled enough to experiment that I added a test case where adding a <strong>.js</strong> extention to a <em>poggid</em> will return the JavaScript, otherwise it will return the compiled html version of the document.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>&lt;script src="http://fooqri.github.io//www.poggr.com/peJo73gk0Nx:dxkfEl2RANx.js"&gt;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>I wanted to pick something fun to experiment with so I chose a game originally created by <em><a href="https://gist.github.com/macournoyer">Marc-AndrÃ© Cournoyer</a></em>.
in his <em><a href="https://gist.github.com/macournoyer/7357908" target="_blank">game.litcoffee</a></em> gist.</p>

<p>You can see my version of the  literate CoffeeScript post in action <a href="http://goddip.poggr.com/peJo73gk0Nx:dxkfEl2RANx" target="_blank">here</a>. What you will notice it the game is running as part of the post, and all the code is also embedded in the post. This may look like a normal code example post, but if you look at the  <a href="http://fooqri.github.io//source.poggr.com/peJo73gk0Nx:dxkfEl2RANx" target="_blank">source code</a> you will see at the end of the source document that the post actually loads the js version of itself. So by saving a literate CoffeeScript document you automatically get a blog post; in addition all of the fenced  CoffeeScript code is compiled into a JavaScript document.  Any changed inline code is re-compiled into an updated JavaScript document with each save. <strong><em>Mind Blown right!</em></strong></p>

<p>I can&rsquo;t see it replacing my emacs/org/babel workflow yet, but it certainly opens some possibilities for having a set of private online notes, experiments, and tools I can call up in any browser to edit and execute. One down-side is while emacs is mode-less in that editing and execution happen together, the browser model is built for view-only. Poggr is built on browser-based document editing, but viewing the rendered results is still a separate action. Although it is not exactly the same emacs/org-mode, there are cases where it is actually better. Emacs does not excel where rich visualization and rendering are beneficial, this is what the browser does best.</p>

<p>When I get a chance I will port a few of my org-mode notes over to literate CoffeeScript documents on poggr and make a note here when they are up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spreadsheet Driven Web Apps]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps/"/>
    <updated>2014-10-15T14:45:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps</id>
    <content type="html"><![CDATA[<p><a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e"><img src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/example_screen.png"></a></p>

<p>Using Google spreadsheets is a great way for a team to collaborate on a data set but it leaves a bit to be desired on presentation of the data. To that end I will be creating a series of fun examples showing how to build small interactive apps that utilize <em>Google Docs</em> and <em>Polymer</em> web components to quickly bring data to life. In this series I will be using a Google spreadsheet as the data source, but other data sources are possible, and I will get to those as well in future posts.</p>

<p>The first example is  <strong><em><a href="http://fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e">Hipster List</a></em></strong>, an app that shows cool places to visit in various cities. Check out the <strong><em><a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">README</a></em></strong> document for details on how this app is put together.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&usp=sharing#gid=0"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/spreadsheet_screen.png"></a></p>

<p>A little convention is used to make it work. Namely, I use a <a href="https://docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&amp;usp=sharing">Hipster Hot Spots</a> Google spreadsheet, where each city&rsquo;s data is represented by a tab in the spreadsheet. There is also a <em>key</em> tab that provides a list of all the cities in the spreadsheet and the tab id (<em>gid</em>) for each city&rsquo;s data. The app will load its data from the spreadsheet and populate the city drop-down list of <em>hot spots</em>, and display a map with markers for each <em>hot spot</em>. This was a fun first example, remember to checkout the <a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for code and explanation.</p>

<p><strong>Note</strong>: I enabled url fragment parameters so you can easily point the app at your own copy of the spreadsheet for testing. See the <a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for the how-to instructions. Feel free to copy the spreadsheet and try out the app with your own list of cities and <em>hot spots</em>.</p>

<p> Separating code and data is always beneficial, but there is something cool about connecting an app to a Google spreadsheet. There are many spreadsheet users who would like to have an app to visualize their data, but may not be up to the coding challenge yet. I think many small useful apps could be built this way;  I will pick a few to build in the next few weeks and discuss them here. I am using the <em><a href="http://fooqri.github.io//www.poggr.com/home">poggr.com</a></em> service for the example, which is a service I built just for these types of small quick apps that can rely on an external data service. It is basically working to merge interactive content creation and blogging into a single service.</p>

<p> Leave me a comment if you have an small spreadsheet driven app you would like me to build. If it seems reasonable I may add it to the list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData.SQLDebug for RubyMotion]]></title>
    <link href="http://fooqri.github.io/blog/2013/06/01/coredata-dot-sqldebug-for-rubymotion/"/>
    <updated>2013-06-01T12:23:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2013/06/01/coredata-dot-sqldebug-for-rubymotion</id>
    <content type="html"><![CDATA[<p>It is sometimes handy to turn on CoreData.SQLDebug in the simulator when debugging a Core Data issue. I have found the output to be very useful in finding the hard to find little bugs that pop-up between restkit and core data. It can also help find performance issues with the database.  Unfortunately there isn&rsquo;t any documentation for how to do this in RubyMotion. I found one solution that works to a degree. It requires installing the ios_sim app and forcing the simulator into CoreData.SQLDebug mode after the rubymotion build.</p>

<p>You will need to install ios_sim</p>

<pre><code>$ brew install ios-sim
</code></pre>

<p>Then add the following two line as the last lines in your RubyMotion rakefile</p>

<pre><code># Be sure to substitute your app name and make sure you are using
# the correct path to the app based on simulator version.
ios_sim = `which ios-sim`.strip
sh "#{ios_sim} launch build/iPhoneSimulator-6.1-Development/appname.app --args -com.apple.CoreData.SQLDebug 1"
</code></pre>

<p>This will open the simulator in CoreData.SQLDebug mode, and log debug information to the terminal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting RKLogConfigureByName working in RubyMotion]]></title>
    <link href="http://fooqri.github.io/blog/2013/03/07/getting-rklogconfigurebyname-working-in-rubymotion/"/>
    <updated>2013-03-07T15:21:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/03/07/getting-rklogconfigurebyname-working-in-rubymotion</id>
    <content type="html"><![CDATA[<p>Just a quick note, I was getting an undefined constant error for
RKLogConfigureByName, the standard way of setting up logging in
RestKit. It seems that the #define statements in the
<em>/vendor/Pods/RestKit/Code/Support/RKLog.h</em> file are not getting
picked up. I am using the pod and loading with RubyMotion pod support,
so IÃ¥m not sure what the issue is. I will need to investigate further
but this quick workaround works, just call the lower-level method
mapped via the #define. For example instead of RKLogConfigureByName
use RKlcl_configure_by_name.  I also list all the RKlcl_v constants to
use instead of the RKLogLevel constants. I also included an example of
how they are used, in this case I have put the setup in a method, and
it gets called from the the standard didFinishLaunchingWithOption
application block.</p>

<div><script src='https://gist.github.com/4733618.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nvALT and Emacs]]></title>
    <link href="http://fooqri.github.io/blog/2013/03/04/nvalt-and-emacs/"/>
    <updated>2013-03-04T11:19:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/03/04/nvalt-and-emacs</id>
    <content type="html"><![CDATA[<p>In a previous post <a href="http://www.pragmaux.com/post/38158334752/wiki-searchable-notes">wiki-searchable-notes</a> I mentioned that I was using nvALT for note taking. nvALT is a very simple way to create and search notes and store them in flat files that can be used by other tools. One use is publishing to a github wiki, today I will discuss another.</p>

<p>I am an Emacs user and often found myself dropping out of emacs to find a note I needed in nvALT. I went looking for the best way to index and access my nvALT notes inside Emacs, and found the very cool emacs script called <a href="http://jblevins.org/projects/deft/">Deft</a> that works with <a href="http://jblevins.org/projects/markdown-mode/">EMacs Markdown Mode</a> to create the equivalent of nvALT inside of emacs. It can be configured to work with the nvALT repository so they work well together.</p>

<p>A few pointers&hellip;</p>

<ul>
<li>If you use markdown in nvALT as I do, follow the instructions to install <a href="http://jblevins.org/projects/markdown-mode/">markdown-mode</a> via git clone.</li>
<li>Follow the instructions to install  <a href="http://jblevins.org/projects/deft/">Deft</a> via git clone. It is an active repository, so clone makes keeping up-to-date easy. Also update init.el to require the deft.el script.</li>
<li>For markdown and nvALT using the flat file config (see  <a href="http://www.pragmaux.com/post/38158334752/wiki-searchable-notes">wiki-searchable-notes</a> for flat file config) you need to add a few additional expressions in init.el. Add these four lines as discussed on the deft documentation.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq deft-extension "md")
</span><span class='line'>(setq deft-directory "~/Development/wikis/Notes.wiki/")
</span><span class='line'>(setq deft-text-mode 'markdown-mode)
</span><span class='line'>(setq deft-use-filename-as-title t)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Follow the instructions to map a keyboard shortcut to open deft. I use H-d (see my <a href="http://www.pragmaux.com/post/41867238595/emacs-experimental-hyper-key-mappings">emacs hyper-key post</a> ) but a simple function key mapping would be.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(global-set-key [f8] 'deft)</span></code></pre></td></tr></table></div></figure>


<p>    <br/>
* Create a symlink from ~/.deft to your nvALT notes directory, this is shown in the nvALT preferences under the notes tab. See example below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s ~/Documents/notes/ .deft</span></code></pre></td></tr></table></div></figure>


<p>When you eval init.el or restart emacs you should be set. Fire up Deft and the UI will operate just like nvALT, only it works in an Emacs buffer!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Experimental Hyper-Key Mappings]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/30/emacs-experimental-hyper-key-mappings/"/>
    <updated>2013-01-30T10:19:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/30/emacs-experimental-hyper-key-mappings</id>
    <content type="html"><![CDATA[<p>In a previous post <a href="http://www.pragmaux.com/post/39243391147/remapping-my-caps-lock-key">Remapping My Caps Lock Key</a> I mentioned that I remapped my caps-lock key to escape, but also created a &ldquo;hyper-key&rdquo; (ctrl-shift-cmd-opt) when the caps-lock key is held down. This opens up a keyboard worth of new shortcuts for emacs. Here are a few I have been playing with for the past few days. An alternative key mapping would be to map the hyper key to holding down the tab key, if you already have the caps lock key mapped to control, and thus muscle memory might preclude this mapping from working for you.</p>

<p>H is the remapped caps-lock HyperKey from my earlier post, which translates as C-M-S-s in the emacs init.el key-mappings. I include an init.el excerpt at the end of the post for all of these mappings.</p>

<ul>
<li>(H-l) This will mark the entire current line, from any position on the line. Using the arrow keys will extent the selection one line at a time either up or down.</li>
<li>(H-f) This invokes text expansion for code completion, I do this a lot so I wanted it to be very comfortable.</li>
<li>(H-3) This invokes the comment/uncomment function on a region, ruby comment is the # so I thought I would try this binding.</li>
<li>(H-Right Arrow) This opens a new window to the right of the current window, I do this often enough I wanted it to be quick</li>
<li>(H-Left Arrow) This closes the current window, sort of the opposite of Right arrow.</li>
<li>(H-Down Arrow) This opens a new window below the current window</li>
<li>(H-p) In the current window switch to the previous buffer</li>
<li>(H-n) In the current window switch to the next buffer</li>
<li>(H-delete) Kill this buffer</li>
<li>(H-w) Quick copy line, pressing multiple times adds more lines to the copy</li>
<li>(H-k) Quick cut line, pressing multiple times adds more lines to the cut</li>
<li>(H-c) Copy region into register (prompts for register number)</li>
<li>(H-v) Paste from register (prompts for register number)</li>
<li>(H-spacebar) Open a popup shell in directory of current buffer.</li>
<li>(H-e) Eval buffer, mostly used to eval init.el after tweaks</li>
</ul>


<p>I will likely be tweaking more in the upcoming weeks as I experiment with key mappings, I will post an update after I get a chance to work with the hyper-key for a while, and settle on a favorite set of key-mappings. See the excerpt from my init.el below.</p>

<div><script src='https://gist.github.com/5691402.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying out Pixate - CSS for iOS app Development]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/23/trying-out-pixate-css-for-ios-app-development/"/>
    <updated>2013-01-23T22:09:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/23/trying-out-pixate-css-for-ios-app-development</id>
    <content type="html"><![CDATA[<p>Recently I have been using RubyMotion for iOS development; I really  appreciate developing in Ruby, and prefer Emacs to Xcode. Compared to using interface builder, styling apps can be a challenge. It is possible to use RubyMotion with XIB files created in Xcode&rsquo;s Interface Builder, but I have been trying to avoid this. I am striving for a more web-app like design and development workflow.</p>

<p>I have been using <a href="https://github.com/rubymotion/teacup">teacup</a>, which takes a declarative approach to styling and uses a CSS-like DSL. Although I liked teacup, I had been anxiously awaiting the arrival of <a href="http://www.pixate.com/">Pixate</a> because of its support for CSS-based styling. Pixate became generally available this month, and I purchased a license. The license is $199, and although expensive, a small price compared to time saved if it works. Since I already do a lot of CSS work on the web side it seems like a nice way to leverage my CSS skills and experience. The Pixate team along with the RubyMotion team created a <a href="https://github.com/Pixate/RubyMotion-Pixate">RubyMotion-Pixate gem</a> that makes it easy to get Pixate working with RubyMotion.</p>

<p>After 2 days of coding I have my basic controllers in place as well as several TableViewControllers. I have used Pixate to style many of the elements. With Pixate you can style with four types of selectors:</p>

<ul>
<li>element type selector &ndash; Select a control by element name</li>
<li>universal selector &ndash; Select any control</li>
<li>class selector &ndash; Select a control by class name</li>
<li>id selector &ndash; Select a control by ID</li>
</ul>


<!--more-->


<p>It also supports attribute selectors and pseudo classes. See the <a href="http://cdn.pixate.com/docs/engine/ios/1.0/Pixate%20Engine%20for%20iOS%20Styling%20Reference.html">complete list</a> for more information on selectors and styling.</p>

<p>One really nice feature is the ability to set up Pixate to dynamically change your app in the simulator when you update the CSS. This is an awesome feature. To set it up add these two  <em>PXStylesheet</em> lines to your app_delegate.rb file near the end of the <em>application</em> method:</p>

<pre><code> def application(application, didFinishLaunchingWithOptions:launchOptions)
    ...
    PXStylesheet.styleSheetFromFilePath('path-to/default.css', withOrigin:0)
    PXStylesheet.currentApplicationStylesheet.monitorChanges = true  
    true
 end
</code></pre>

<p>I was only able to get it to work by providing the absolute path to the css file, so add your absolute path in place of <em>path-to</em> in the above method call. I will post if I figure out how to do a relative path, I hate putting in absolute paths.</p>

<p><strong>Warning</strong>: I found that Pixate 1.0.2 does not work properly on the device if these two statements are left in the app delegate when compiling for the device. If your styles are not being picked up on the device this may be the reason. To get around this during development I put in a test for simulator using the <em>Device.simulator?</em> method in <a href="https://github.com/rubymotion/BubbleWrap">Bubblewrap</a>,</p>

<pre><code> def setup_pixate_monitor 
   PXStylesheet.styleSheetFromFilePath('path-to/default.css', withOrigin:0)
   PXStylesheet.currentApplicationStylesheet.monitorChanges = true
 end
</code></pre>

<p>Then include this conditional call:</p>

<pre><code> setup_pixate_monitor if Device.simulator?
</code></pre>

<p>So far Pixate has mostly worked as expected, but there was one odd issue. I had expected that I could create zero-sized frames and allow CSS to style them to the correct size. For example creating a new label object might look like this.</p>

<pre><code> @name_label = UILabel.alloc.initWithFrame(CGRectZero)
 @name_label.styleId = 'name_label'
</code></pre>

<p>CGRectZero, a CGRect constant, will set the frame to size [0,0][0,0]. Then the CSS style definition below should set the frame size correctly.</p>

<pre><code> #name_label { 
   position:fixed;
   top              :20px;
   left             :5px;
   width            :300px;
   height           :30px;  
   font-size        :16px;
   font-align       :center;  
 } 
</code></pre>

<p>I would expect the frame to be set to [5,20][300, 30] when the application is run. Instead the frame remains set to [0,0][0,0], so the text in the label is not displayed in the interface. This [0,0][0,0] frame size is confirmed with REPL using the tree command that comes with the <a href="https://github.com/rubymotion/sugarcube">sugarcube gem</a>.</p>

<p>When I set the frame to a non-zero size when creating the UI object, then the CSS style is picked up and the frame size is set correctly by Pixate. Very odd, I am assuming this to be a bug, but maybe there was a reason to leave zero-sized frames unaltered by CSS. Typically CGRectZero frames are used to hide UI elements until they are ready to be used, or until the dimensions are known based on content.  If a CSS selector matched zero-sized frames I suppose this could lead to some unexpected behavior for iOS developers accustom to zero-sized frames not being displayed until the specifically resize them in code.</p>

<p>In the end I created a new global constant</p>

<pre><code> CSSRect = [0, 0], [1, 0] 
</code></pre>

<p>and this allows the CSS to do its job. So</p>

<pre><code> @name_label = UILabel.alloc.initWithFrame(CSSRect)
 @name_label.styleId = 'name_label'
</code></pre>

<p>allows me to create frames that are then altered to the correct size via CSS. I also found that using CGRectInfinite works as well. Basically it sets a huge rectangle but the CSS resizes it as expected.</p>

<p>The  <a href="https://github.com/Pixate/RubyMotion-Pixate">RubyMotion-Pixate gem</a> also adds REPL support for changing the style via REPL. This is handy, but I find the dynamic updating via the CSS file to be easier to use.</p>

<p>The Pixate Engine consists of two core technologies: a 2D graphics engine and a CSS styling engine. So far my focus has been using the CSS styling engine.  By using a styling rendering engine, design execution can be pushed to run-time. One of the benefits of this approach is the ability to dynamically modify the look of an app, which can be useful in user testing, including A/B testing. For this, Pixate allows CSS to be loaded via a URL, much like a web browser. I am sure there will be performance implications of this dynamic rendering approach, so this will also have to be explored as a cost versus the benefit of dynamic styling.</p>

<p>I really liked Colin Gray&rsquo;s ideas around teacup, and the rubyesque way it integrated with rubymotion.</p>

<pre><code> @search = subview(UITextField, :search)
</code></pre>

<p>It would be interesting if this syntax could be used with Pixate versus the less elegant:</p>

<pre><code> @search = UITextField.alloc.initWithFrame(CSSRect)
 @search.styleId = 'search'
</code></pre>

<p>I have only just begun to use Pixate, there may be possibilities for making the calls a bit more elegant without writing too many helpers.</p>

<p>I will add more posts as I learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The three c's]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/21/the-three-cs/"/>
    <updated>2013-01-21T10:26:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/21/the-three-cs</id>
    <content type="html"><![CDATA[<p>I really enjoyed <a href="http://www.networkworld.com/community/blog/tony-fadell-unique-nature-apples-design-process">this interview</a> with Tony Fadell on the unique nature of Apple&rsquo;s design process. The discussion about project abandonment percentages is incredibly important, and often overlooked in large companies. In many cases abandonment is a financial decision related to either real or opportunity costs associated with launching a product. People who have never worked for a large consumer products company likely have no idea how many products are cancelled just before launch because of the incredible cost in launching a product into the market.</p>

<p>Tony makes an amazing point about the toll such high cancellation rates have on employees at a company, and on the quality of the products the company ships. The inverse is that high commitment to ship products that pass key milestones leads to better employee commitment.</p>

<blockquote><p>&ldquo;When youâre in a culture that has a point of view, and drives to launch everything it does, you know youâre on the hook and you better bring your best game every time,&rdquo; Fadell explained.</p></blockquote>

<p>Tony contrasts his experience at Apple with his experience at Philips:</p>

<blockquote><p>Fadell explained that a key and yet often overlooked difference between Apple and other tech companies is that Apple ships 99% of the products that pass certain internal milestones. By way of contrast, during Fadell&rsquo;s tenure at Philips &ndash; where he was charged with overseeing the company&rsquo;s audio strategy &ndash; the iPod guru noted that Philips would axe 9 projects out of 10, even if a particular product was about to ship.</p></blockquote>

<p>I don&rsquo;t think large companies have a metric for tracking the number and impact of cancelled projects. In my experience executive teams wanted to forget cancellations as quickly as possible and move on. They considered the cost to be in the past, and by having cancelled the project they had cut any ongoing cost.  But as Tony points out, there are ongoing costs, just not costs that have their own column on a balance sheet or scorecard. In my experience it was clear &hellip; the impact of cancellations were cumulative and devastating.</p>

<p>The importance of commitment is actually one of the 3 c&rsquo;s I use when evaluating a project: <em>Clarity</em>, <em>Competency</em>, and <em>Commitment</em>. Over the years I have found these to be the key pieces of early stage information that will best predict the success of a project. Tony&rsquo;s pont about commitment is that it isn&rsquo;t only about commitment to a project, it is about the culture of commitment in an organization. I like this point, and I imagine there is a corollary for organizational clarity and competency. Below are a few notes related to project level evaluation of the 3 c&rsquo;s</p>

<!--more-->


<p><strong>Clarity</strong></p>

<p>Clarity is an evaluation of how clear the goals are for the product, and how well understood the product is.</p>

<p>For example:</p>

<ul>
<li>A project to enhance a successful existing product with incremental features likely has very high clarity.</li>
<li>A project to move a successful product through a major transition will likely have medium clarity, but in some cases will have low clarity if the product manager and the team have different ideas about product direction.</li>
<li>A project to improve an unsuccessful product is usually medium to low clarity. If you are lucky you understand what went wrong, but lack of clarity is often the reason it failed in the first place.</li>
<li>A new product is usually low clarity, but if you have a great product manager it may be medium clarity to high clarity.</li>
<li>A new product in a new market is often low clarity and may even be disguised as medium to high clarity because the teams reviewing the product have little experience in the market. By this I mean the product brief will use language that sounds high clarity, but market experts would easily identify the brief as too vague. This is where competency and clarity overlap early in a project.</li>
</ul>


<p>My first task was always to make sure there was a plan in place to address any clarity issues immediately. From my experience without such a plan and milestones for high clarity, teams often started to build the wrong product, or multiple wrong products. If the team cannot agree on what the product really is, it will certainly fail. New products could achieve medium to high clarity. The key step is to identify clarity as an issue and put a plan in place to provide good clarity early in the project. I have seen many product requirements documents that were very detailed, but no two team members would describe the same product when asked what the product was. Providing detail  is not the same as providing clarity.</p>

<p><strong>Competency</strong></p>

<p>One of the other key issues in the success of a project is competency. In a large company design, and engineering <em>resources</em> tend to be plugged in to a project primarily based on their availability. There is an idea of a performance band with some people regularly performing better than others, but rarely a deep understanding of the individual competencies of  team members. Having directed both engineering and design teams, and worked closely with product management for many years I have come to see that individual competencies play a key role in project success; a role that is rarely reflected in evaluations or performance rankings. Evaluations rarely measure competency. For an interesting take on the fallacy of skills in success see <a href="http://www.amazon.com/The-Success-Equation-Untangling-Investing/dp/1422184234">The Success Equation: Untangling Skill and Luck in Business, Sports, and Investing</a></p>

<p>Here I look for a match in competency for the product needs, but also for how well the team works in the particular product context. How much experience does this team have defining and launching a new product? Has the lead engineer designed anything at this scale before? Many projects fail because a key competency is lacking on the product team.</p>

<p><strong>Commitment</strong></p>

<p>This is what Tony is referring to in his interview, how much commitment is there for this product? This refers to team commitment as well as executive commitment. In my experience, commitment issues fall into a few categories.</p>

<p><em>Market Issues</em></p>

<p>It is sometimes the case, especially in technology, where the market is moving so fast projects become obsolete before they are completed. This leads to high cancellation rates. These cases are about risk management, and understanding that the market evolution rate is a key issue. For example having a 24 month product cycle in a rapid innovation market may be taking on a lot of risk. If you can&rsquo;t move faster, maybe find a market that better matches your organizational delivery capabilities.</p>

<p><em>Structural Commitment Issues</em></p>

<p>In some cases a company is trying to do too many things, and commitment is a structural issue. I suspect Tony&rsquo;s characterization of Philips false into the structural definition. In these cases it is important to force prioritization and work with executives to understand that doing fewer things better will actually result in shipping not only better products, but more products. It can seem counter-intuitive, but I think Tony&rsquo;s description above shows how this has been proven at Apple. Less SKU&rsquo;s more volume.</p>

<p><em>Project Commitment Issues</em></p>

<p>I often found that when project comitment was low, it was low in very specific ways. Here are a few examples:</p>

<ul>
<li><p>Low hanging fruit &ndash; Many projects came across my desk as the so-called low-hanging fruit project. These are projects that are so low cost and high value that they seem obviously high-commitment on the surface; they often originate in an executive review meeting. The main issue here is that no one questions them, so their clarity is usually quite low, and their commitment falsely high. Usually as clarity rises even a small amount, commitment collapses because the actual project could never deliver on the low hanging fruit mirage that came out of a thirty minute executive discussion.</p></li>
<li><p>The magic mirror &ndash; Another class of projects with commitment issues were the magic mirror projects. These are projects where whomever is looking at the projects sees what they want to see, and ignores everything else. These types of projects are the most dangerous because they are usually multi-headed beasts that are trying to simultaneously serve many masters.  Their commitment is based in company politics and thus commitment can shift or disintegrate very quickly.</p></li>
</ul>


<p>Given my team&rsquo;s success was based solely on shipping successful products my most important task was usually at the early phase of projects, and mostly making sure that projects scored high on their combined CCC levels.</p>
]]></content>
  </entry>
  
</feed>
