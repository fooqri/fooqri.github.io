<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://fooqri.github.io/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2016-03-12T08:25:08-08:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Org Export Configurations]]></title>
    <link href="http://fooqri.github.io/blog/2016/03/11/Org-Export-Configurations/"/>
    <updated>2016-03-11T00:00:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2016/03/11/Org-Export-Configurations</id>
    <content type="html"><![CDATA[<p>Emacs <em>org mode</em> offers a variety of export options that make it easy to look at your notes in different formats, or perhaps make them available for others to view. Three I use regularly are <em>markdown</em>, <em>mindmap</em>, and <em>reveal presentation</em>.</p>

<h1>My approach to Note Taking</h1>

<p>The best way to learn something is to summarize the topic in your own words, in your own context, and present it to others with concrete examples. But in many cases notes must also serve to provide details that are easily forgotten like code snippets, checklists, etc. Even with detailed notes it is important to refactor the information into your own context to aid learning the topic. For this reason many of my notes on a topic have a <em>summary</em> section and a <em>details</em> section both organized in an org document.</p>

<p>Another purpose for notes is information logging, such as meeting notes, project team notes, daily journal, etc. Although <em>org</em> does an excellent job of supporting information logging and task management, I will leave that as a topic for a future post.</p>

<p>Ideally the summary of a topic can easily be converted to a presentation, and the details can be converted to a markdown document.   I will describe below how to accomplish this. Further I will describe how to convert the notes to OPML so it can be explored as a mindmap. Also see <a href="http://rwx.io/blog/2016/03/10/Deft-and-Emacs-for-Notes/">Deft + Org for Notes</a> for information on quick search of all notes.</p>

<h1>Setting Export Directory</h1>

<p>I want to keep everything under the org directory but to keep things tidy create sub directories by export type. The code snippet below when placed in init.el will set the correct export directory based on export type. Thus <em>opml</em> documents will be kept in <code>~/org/export_opml/</code>, <em>markdown</em> documents in <code>~/org/export_md/</code>, and <em>html</em> documents in <code>~/org/export_md/</code></p>

<pre><code>(defvar org-export-output-directory-prefix "export_" "prefix of directory used for org-mode export")

(defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
</code></pre>

<h1>Exporting to Markdown</h1>

<p>The configuration below will export markdown every time an org file is saved. The (C-c m) keyboard sequence will open the markdown version of the current buffer in Marked 2. Because all notes are automatically converted the <em>Marked 2</em> app will also allow you to follow note links to any interlinked notes. <em>Marked 2</em> provides a very nice reading interface for detailed notes so having this option is handy.</p>

<pre><code>(defun export-org-md-command-events ()
  (interactive)
  (execute-kbd-macro (kbd "C-c C-e m m"))
  )

;; Auto-export org files to Markdown when saved
(defun org-mode-export-hook ()
  (when (equal major-mode 'org-mode)
    (add-hook 'after-save-hook 'export-org-md-command-events t t)
  )
)

(defun markdown-preview-file ()
  "run Marked on the current file and revert the buffer"
  (interactive)
  (execute-kbd-macro (kbd "C-c C-e m m"))
  (shell-command
   (format "open -a /Applications/Marked2.app %s" 
       (shell-quote-argument (concat (file-name-directory buffer-file-name) "export_md/" (file-name-sans-extension (file-name-nondirectory buffer-file-name)) ".md"))))
  )

(global-set-key (kbd "C-c m") 'markdown-preview-file)
</code></pre>

<p>The markdown conversion works well but if you need to you can  embed markdown directly into your org document at any time using a markdown block. This will allow the markdown to pass through during export so it will be handled properly by the markdown rendering app.</p>

<pre><code>#+BEGIN_MD
```javascript
var s = "JavaScript syntax highlighting"; 
alert(s);
```
#+END_MD
</code></pre>

<h1>Exporting to Mindmap</h1>

<p>Mindmaps are a visualization of an outline, and since org mode specializes in keeping notes in a hierarchical fashion it is fairly easy to convert notes to mindmaps. OPML is an XML format for outlines that is supported by all mindmapping  apps. You can use <a href="https://www.emacswiki.org/emacs/FreeMind">org-freemind</a> to do mindmaps, but I use <a href="https://github.com/edavis/org-opml">org-opml</a> instead. Follow the <a href="https://github.com/edavis/org-opml">org-opml</a> installation instructions.</p>

<p>I also use a slight customization of the ox-opml.el file delivered with <a href="https://github.com/edavis/org-opml">org-opml</a>, because I use iThoughtsX and think it is cleaner to put paragraph blocks in notes rather than have them forced into a topic bubble.</p>

<pre><code>;; modify original ox-opml.el to put paragraphs into the notes attribute of a topic
;; instead of displaying paragraph as topic name.  
(defun org-opml-paragraph (paragraph contents info)
  (let* ((parent (org-element-type (org-export-get-parent paragraph)))
         (text (clean-text contents)))
    ;; Only display paragraphs when not in a list item
    (unless (eq parent 'item)
      (format "&lt;outline text='notes' note='%s' structure=\"paragraph\"/&gt;"  text))))

(defun org-opml-item (item contents info)
  (let* ((p (car (org-element-contents item)))
         (elements (org-element-contents p))
         (text (mapconcat
                (lambda (el)
                  (cond ((stringp el) (clean-text el))
                        ((equal (car el) 'link)  
                         (let ((url (org-element-property :raw-link el))
                               (text (org-element-contents el)))
                           (clean-text (format "%s" (car text)))))
                        ((equal (car el) 'italic)
                         (format "/%s/" (car (org-element-contents el))))
                        ((equal (car el) 'bold)
                         (format "*%s*" (car (org-element-contents el))))
                        ((equal (car el) 'verbatim)
                         (format "=%s=" (org-element-property :value el)))))
                elements " ")))
    (format "&lt;outline text='%s' structure='list'&gt;%s&lt;/outline&gt;" text contents)))
</code></pre>

<p>A second modification I use is to change the key-bindings for export because they conflict with markdown export. Below I changed the <code>?m</code> in the original <code>ox-opml.el</code> file to <code>?g</code> so <code>Export to OPML</code> will appear in the org export menu under the <code>g</code> key, and not <code>m</code> key</p>

<pre><code>:menu-entry '(?g "Export to OPML"
                 (lambda (a s v b) (org-opml-export-to-opml a s v b)))
</code></pre>

<p>The Lisp snippet below can be added to init.el and will allow viewing an org buffer as a mindmap using iThoughtsX with the (C-c o) keyboard sequence.</p>

<pre><code>(defun opml-preview-file ()
  "run iThoughtsX on the current file and revert the buffer"
  (interactive)
  (execute-kbd-macro (kbd "C-c C-e g"))
  (shell-command 
   (format "open -a /Applications/iThoughtsX.app %s"  
       (shell-quote-argument (concat (file-name-directory buffer-file-name) "export_opml/" (file-name-sans-extension (file-name-nondirectory buffer-file-name)) ".opml"))))
)

(global-set-key  (kbd "C-c o") 'opml-preview-file)
</code></pre>

<h1>Exporting to Reveal Presentation</h1>

<p>Another useful feature is exporting the current org buffer as a <a href="http://lab.hakim.se/reveal-js/">Reveal Presentation</a> and opening it in a browser. To do this you need to install and configure <a href="https://github.com/yjwen/org-reveal">org-reveal</a>. Once installed you can use the Lisp snippet below, the (C-c p) keyboard sequence will open the the current buffer as a <em>Reveal Presentation</em> in Safari (I use Mac).</p>

<pre><code>(defun 'presentation-preview-file ()
  "run export with ox-reveal on the current file and open browser"
  (interactive)
  (execute-kbd-macro (kbd "C-c C-e R R"))
  (shell-command 
   (format "open -a /Applications/Safari.app %s" 
       (shell-quote-argument (concat (file-name-directory buffer-file-name) "export_html/" (file-name-sans-extension (file-name-nondirectory buffer-file-name)) ".html"))))
)

(global-set-key  (kbd "C-c p") 'presentation-preview-file)
</code></pre>

<h1>Hiding Content</h1>

<p>I mentioned above that I like to organize my notes with both a summary for presentation, and details that would not work well in a presentation. To make it easy to hide content from the various export modules I added the code below to my init.el file.</p>

<pre><code> (defun set-ignored-headlines-tags (backend)
 "Remove all headlines with tag ignore_heading in the current buffer. 
    BACKEND is the export back-end being used, as a symbol."
 (cond ((org-export-derived-backend-p backend 'md) (setq  org-export-exclude-tags '("noexport" "mdignore")))
       ((org-export-derived-backend-p backend 'reveal) (setq  org-export-exclude-tags '("noexport" "revealignore")))
       ((org-export-derived-backend-p backend 'opml)  (setq  org-export-exclude-tags '("noexport" "opmlignore"))) 
       (t (setq  org-export-exclude-tags '("noexport")))
   ) 
)
</code></pre>

<p>Now I can hide content from reveal by adding a <em>:revealignore:</em> tag to the heading. The <em>:opmlignore:</em> and <em>:mdignore:</em> work similarly. <em>:noexport:</em> means hide from all exports. The tags support hierarchy so will hide any sub-headings.</p>

<pre><code>* My Slides :mdignore:opmlignore:
 ** Topic 1
    Slide content
 ** Topic 2
    Slide content
* My Detailed Notes  :revealignore:
 ** Chapter Notes
 ** Code Experiments :opmlignore:
</code></pre>

<h1>Conclusion</h1>

<p>With this setup is is easy to keep notes in a fashion that makes them easy to use in a number of formats, including presentations, mindmaps, and markdown documents. Org mode also supports the concept of <a href="http://orgmode.org/manual/Publishing.html">publishing</a> that is useful when sharing specific content, for example exporting specific notes to a web site along with images and attachments used in the notes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deft + Org for Notes]]></title>
    <link href="http://fooqri.github.io/blog/2016/03/10/Deft-and-Emacs-for-Notes/"/>
    <updated>2016-03-10T00:00:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2016/03/10/Deft-and-Emacs-for-Notes</id>
    <content type="html"><![CDATA[<p>In the <a href="http://rwx.io/blog/2013/03/04/nvalt-and-emacs/">nvALT and Emacs post</a> I described an integration between <em>nvAlt</em> and <em>Emacs</em> using <a href="http://jblevins.org/projects/deft/">Deft</a> for <em>markdown</em> notes. I the past year I have moved to using <em>Deft</em> for <em>org</em> notes rather than <em>markdown</em> notes. The nice thing about combining Deft with Org is that your notes are indexed and easy to find using Deft, but also retain all of the power of Org to orgainize and present information. For example typing <em>decision boundary</em> into <strong>deft</strong> quickly cuts down hundreds of org text notes to the handful that contain the words <strong>decision</strong> and <strong>boundary</strong> in them.</p>

<p>Deft also supports <em>regular expression</em> search mode to provide more precise searches (use C-c C-t to toggle search modes). Deft makes it easy to create new notes also, simply type a title and hit <em>ctrl-return</em> to create a new note with that title. See the UI in action in the animated gif below (image by <a href="http://jblevins.org/">Jason Blevins</a> via <a href="http://jblevins.org/projects/deft/">Deft</a> ). See the <a href="http://jblevins.org/projects/deft/">Documentation</a> for other handy features.</p>

<p><img src="http://fooqri.github.io/images/deft-v0.6.gif" alt="img" /></p>

<p>Below I describe setting up Deft for emacs, and show my current customization&rsquo;s.  Org also supports export to many different formats. In a future posts I will cover my setup for exporting notes to <em>markdown</em> documents, <em>reveal</em> presentations, and even <em>mindmaps</em>.</p>

<h1>Installing Deft</h1>

<p>Follow the instructions at <a href="http://jblevins.org/projects/deft/">Deft</a> to install from source (usually the latest version this way) or use the Emacs package installer as shown below.</p>

<pre><code>M-x package-install deft
</code></pre>

<h1>Configuring Deft</h1>

<p>I prefer to use Deft for <em>org</em> files and not others (txt, md, etc), so that is reflected in my configuration below. Using <a href="http://rwx.io/blog/2012/12/30/remapping-my-caps-lock-key/">this technique</a> I converted the tab key into a hyper-key (C-M-S-s), so with the key mapping below Deft can be called up with <strong>tab-d</strong> This technique is nice, because the tab key still works for tabbing, but when held down it acts like an additional modifier key that can be use in emacs key bindings.</p>

<pre><code>(require 'deft)
(setq deft-default-extension "org")
(setq deft-extensions '("org"))
(setq deft-directory "~/org")
(setq deft-recursive t)
(setq deft-use-filename-as-title nil)
(setq deft-use-filter-string-for-filename t)
(setq deft-file-naming-rules '((noslash . "-")
                               (nospace . "-")
                               (case-fn . downcase)))
(setq deft-text-mode 'org-mode)
(global-set-key (kbd "C-M-S-s-d") 'deft)
(global-set-key (kbd "C-x C-g") 'deft-find-file)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org Mode ES2015+ Code Blocks (updated)]]></title>
    <link href="http://fooqri.github.io/blog/2016/03/09/org-with-babel-node-updated/"/>
    <updated>2016-03-09T16:57:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2016/03/09/org-with-babel-node-updated</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Note:</strong> In this post I have updated the instructions for use with <em>Babel 6x</em>. For <em>Babel 5x</em> see the <a href="http://fooqri.github.io/blog/2015/10/06/org-with-babel-node/">original post</a>.</li>
</ul>


<p>Babel 6x is a significant change from Babel 5x, as the <em>cli</em> is now a separate node module called <em>babel-cli</em> and transforms are now also delivered as separate packages.</p>

<p>First make a few changes to the emacs environment so you can use JavaScript in <strong>org mode</strong>, as well as find local <em>node.js</em> modules you have installed. Replace <em>&ldquo;~/org/node_modules&rdquo;</em> in the configuration below with the location of any local node modules you want to use. Using this approach you don&rsquo;t have to pollute the global node_module directory if you don&rsquo;t want to.</p>

<p>Add the following to your emacs init.el file and evaluate it (or restart emacs).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setenv "NODE_PATH"
</span><span class='line'>  (concat
</span><span class='line'>   "~/org/node_modules" ":"
</span><span class='line'>   (getenv "NODE_PATH")
</span><span class='line'>  )
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>(org-babel-do-load-languages
</span><span class='line'> 'org-babel-load-languages
</span><span class='line'> '((js . t)))</span></code></pre></td></tr></table></div></figure>


<p>You can choose to install the Babel modules globally, or you can do it locally. In this example I will install them locally in the org directory (~/org/node_modules).</p>

<p>Next install the <em>babel-cli</em> module, this allows you to call Babel from the command line. You will also want to install the transforms you plan to use, the example below installs the common preset transforms used with <em>Babel 6</em>. Also install any local modules you need to use. I chose to install them from the ~/org directory where my notes are kept, but anywhere works as long as you have the correct path to <em>node_modules</em> set above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save-dev babel-cli
</span><span class='line'>npm install --save-dev babel-preset-es2015
</span><span class='line'>npm install --save-dev babel-preset-stage-0
</span><span class='line'>npm install --save-dev babel-preset-stage-1
</span><span class='line'>npm install --save-dev babel-preset-stage-2
</span><span class='line'>npm install --save-dev babel-preset-stage-3
</span><span class='line'>npm install --save-dev babel-preset-react
</span><span class='line'>npm install --save-dev mongodb
</span><span class='line'>npm install --save-dev bluebird</span></code></pre></td></tr></table></div></figure>


<p>Next you want to set up a symbolic link to the <em>babel-cli</em> script you just installed so it can be found from the command line. I decided to call it <em>org-babel-node</em> so it won&rsquo;t interfere with a <em>babel-node</em> executable linked to a global module of the same name.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s ~/org/node_modules/babel-cli/bin/babel-node.js /usr/local/bin/org-babel-node</span></code></pre></td></tr></table></div></figure>


<p>The default org-mode interpreter for JavaScript is <em>Node</em>, so you need to have that installed and its path set. But the cool thing is that you can change the interpreter inline in your code blocks in the cases you want to experiment with upcoming language features. To do this you simply tell <em>org mode</em> to use an alternative interpreter; in this case the <strong>babel-node</strong> transpiler installed earlier and linked as <em>org-babel-node</em>.</p>

<p>Adding  <em>:cmd &ldquo;org-babel-node&rdquo;</em>   after the  <em>#+begin_src js</em> tells <em>org mode</em> to use the <em>org-babel-node</em> transpiler instead of the default JavaScript interpreter. Because <em>Babel 6</em> uses external modules for transforms you need to also tell Babel which preset or plugins you wish to use with either the <strong>&mdash;presets</strong> or <strong>&mdash;plugins</strong> options. The <em>:results output</em> tells <em>org mode</em> that the results will be from an output statement <em>(using console.log() for JavaScript)</em></p>

<pre><code>   #+name: db.activities.findOne
   #+begin_src js :cmd "org-babel-node --presets stage-1" :results output drawer
      (async function(){
          try {
              let MongoDB = require('mongodb');
              let Promise = require('bluebird');
              Promise.promisifyAll(MongoDB);
              let db = await MongoDB.MongoClient.connectAsync(process.env.MY_DB);
              let activityCol = db.collection('activities')
              let result = await activityCol.findOne();
              db.close();
              console.log(`The first activity name is ${result.name}`);
            }
           catch(err){
             consule.log(err);
             throw err;
           }
         })()
   #+END_SRC
</code></pre>

<p>Now, simply place the cursor anywhere in the block and execute it using C-c C-c. The results will be placed under the block in second block entitled: <em>#+RESULTS:</em></p>

<p>The block can be executed as often as you like and the results will be refreshed. See the updated example with its results block below.</p>

<pre><code>   #+name: db.activities.findOne
   #+begin_src js :cmd "org-babel-node --presets stage-1" :results output drawer
      (async function(){
          try {
              let MongoDB = require('mongodb');
              let Promise = require('bluebird');
              Promise.promisifyAll(MongoDB);
              let db = await MongoDB.MongoClient.connectAsync(process.env.MY_DB);
              let activityCol = db.collection('activities')
              let result = await activityCol.findOne();
              db.close();
              console.log(`The first activity name is ${result.name}`);
            }
           catch(err){
             consule.log(err);
             throw err;
           }
         })()
   #+END_SRC

   #+RESULTS: db.activities.findOne
   :RESULTS:
   The first activity name is Shopping
   :END:
</code></pre>

<p>You can see several new and experimental language features including <em>async functions</em>, the <em>await</em> keyword for performing a non-blocking wait on a promise to complete, and <em>template strings</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANCS Example on BLE Nano]]></title>
    <link href="http://fooqri.github.io/blog/2016/01/27/ancs-example-on-blend-nano/"/>
    <updated>2016-01-27T12:19:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2016/01/27/ancs-example-on-blend-nano</id>
    <content type="html"><![CDATA[<p><img src="https://s3.amazonaws.com/rwx-blog/nano.png"></p>

<p>I decided to try getting <em>Apple Notification Center Service (ANCS)</em> working with the <a href="http://redbearlab.com/blenano/" target="_blank">RedBearLab BLE Nano</a>, and this post describes one way to get the Nordic ANCS demo running on a BLE Nano. This post shows how to get an <em>ARM</em> development environment and toolchain up and running on OS X in order to develop apps for the Nordic BLE SoC&rsquo;s (e.g. nRF51822 based boards like the BLE Nano).</p>

<p>There are a few options for developing applications for the BLE Nano:</p>

<ol>
<li>Using the <em>Nordic nRF5 BLE SDK</em> along with the  <em>arm-gcc</em> compiler. This requires setting up a toolchain on your local development machine (Mac OS X in my case).</li>
<li>Using <a href="http://mbed.org" target="_blank">mbed.org</a> and the <a href="https://developer.mbed.org/teams/Bluetooth-Low-Energy/" target="_blank">mbed Bluetooth Low Energy API</a>. This is the fastest way to get started, but unfortunately at the time of this post the API does not yet support peripherals as GATT Clients, and thus does not support ANCS development.</li>
<li>Using the Arduino SDK along with the <a href="https://github.com/RedBearLab/nRF51822-Arduino" target="_blank">nRF51822-Arduino add-on</a>. I am not sure whether this add-on would support peripherals as GATT Clients either, and haven&rsquo;t yet investigated the option.</li>
</ol>


<p>I decided to start with approach 1 since it seemed like the most stable approach to development. Below I describe my steps to getting the environment set up on OS X. For more on approach 2 &amp; 3 see <a href="http://redbearlab.com/getting-started-nrf51822" target="_blank">Getting Started with nRF51822</a></p>

<h2>Setting Up the Tool Chain on OS X</h2>

<p>Install the <em>arm-gcc compiler</em> for OS X so you can compile for ARM devices. Fortunately both <em>HomeBrew</em> and <em>MacPorts</em> have recipes for installing the compiler. Pick the one that works for you. If you don&rsquo;t have either HomeBrew or MacPorts installed please install one of them before proceeding.</p>

<p>Install the gcc-arm compiler using either <em>brew</em> command (HomeBrew) or <em>port</em> command (MacPorts):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install gcc-arm-none-eabi</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>port install arm-none-eabi-gcc</span></code></pre></td></tr></table></div></figure>


<p><em>Note: If you get a permissions error you may need to prepend the sudo command to provide brew/port with enhanced security privileges.</em></p>

<p>You will need to save the location of the arm-gcc compiler for updating the nRF5 toolchain config files later. In my case it was located in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/gcc_arm/gcc-arm-none-eabi-5_2-2015q4/</span></code></pre></td></tr></table></div></figure>


<p>you will also need the compiler version number, just run the command below and write down the resulting version number</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/gcc_arm/gcc-arm-none-eabi-5_2-2015q4/bin/arm-none-eabi-gcc  --version </span></code></pre></td></tr></table></div></figure>


<p>In my case the <em>/arm-none-eabi-gcc</em> version was <em>5.2.1</em></p>

<h2>Download the Nordic SDK</h2>

<p>The next step is to download the <a href="http://developer.nordicsemi.com/nRF5_SDK/" target="_blank">Nordic nRF5 SDK</a> I chose <em>nRF51_SDK_v10.x.x</em>. Unzip into a location that will be your working directory for the project.</p>

<h2>Download the Nordic Soft Device BLE Protocol Stack</h2>

<p>Nordic uses the term <em>Soft Device</em> to refer to its BLE protocol stack. I chose to use <em>S130-SD</em>, it can be downloaded from the <a href="http://www.nordicsemi.com/eng/Products/Bluetooth-Smart-Bluetooth-low-energy/nRF51822#Downloads" target="_blank">Nordic Download Page</a> under soft devices.</p>

<p>You will need to reference the soft device later, so I suggest saving it in your working directory at the same level you saved the SDK so it is easy to find.</p>

<h2>Updating the SDK configuration</h2>

<p>The next step is to modify the SDK configuration to point to your arm-gcc compiler. In your SDK directory edit <em>components/toolchain/gcc/Makefile.posix</em> to correct the <em>GNU_INSTALL_ROOT</em> and <em>GNU_VERSION</em>.  <strong>GNU_INSTALL_ROOT</strong> should be the location of the arm-gcc compiler directory.  <em><em>GNU_VERSIO</em>N</em> should be the version number of the arm-gcc compiler that I mentioned above. My <em>Makefile.posix</em> file looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GNU_INSTALL_ROOT := /usr/local/gcc_arm/gcc-arm-none-eabi-5_2-2015q4/
</span><span class='line'>GNU_VERSION := 5.2.1 
</span><span class='line'>GNU_PREFIX := arm-none-eabi</span></code></pre></td></tr></table></div></figure>


<h2>Compile the ANCS example</h2>

<p>The ANCS example is located in the sdk driectory under the <strong>examples</strong> subdirectory. Change to the subdirectory for the ble_app_ancs_c example. For example from the main SDK directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd examples/ble_peripheral/ble_app_ancs_c</span></code></pre></td></tr></table></div></figure>


<p>Like all the examples the ble_app_ancs_c directory contains <em>board package</em> subdirectories that are set up for the various development boards. For my test I changed to subdirectory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pca10028/s130/armgcc/</span></code></pre></td></tr></table></div></figure>


<p>This is essentially choosing the example created for <em>board package</em> <strong>pca10028</strong> and <em>soft device</em> <strong>s130</strong> and finally the <strong>armgcc</strong> build directory.</p>

<p>In this directory your will find a Makefile for compiling this example, so run <strong>make</strong> to compile the example.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<p>The compilation process will create a new subdirectory called <strong>_build</strong> that will hold the output of the compile. The key file for our purposes will be the one with a <strong>.hex</strong> extension. In my case is was named <em>nrf51422_xxac_s130.hex</em>. This is the hex code that will be loaded by the bootloader on the BLE Nano&rsquo;s nRF51822 SoC.</p>

<p>Since the nRF51 device is completely flash based. All the executable code, including Nordic’s “Soft Device” protocol stack and your applications, is programmed in this flash memory. The soft device is always in the lower region of the flash, using up to 128 kB, and the rest of the upper region of flash is available for your application. So before your applications hex code can be loaded on the BLE Nano, it must be merged with the hex code for the soft device, in this case the <em>S130</em> hex code.</p>

<p>To manipulate hex code you will need the <strong>srecord</strong> tool, which can be installed with HomeBrew or MacPorts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install srecord </span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>port install srecord</span></code></pre></td></tr></table></div></figure>


<h2>Merging application Hex Code with Soft Device Hex Code.</h2>

<p>Assuming the <em>S130 Soft Device</em> code was uncompressed into the same working directory as the sdk and was named <em>s130_nrf51_1.0.0</em> and the example application hex code file was named <em>nrf51422_xxac_s130.hex</em>. Then from inside the <em>_build</em> directory created above we could merge the hex code files with the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>srec_cat &lt;SDK_DIRECTORY&gt;/s130_nrf51_1.0.0/s130_nrf51_1.0.0_softdevice.hex -intel nrf51422_xxac_s130.hex  -intel -o ancs.hex -intel --line-length=44</span></code></pre></td></tr></table></div></figure>


<p>The above command would create a new (combined) hex code file in _build named <strong>ancs.hex</strong></p>

<h2>Loading the code on the BLE Nano</h2>

<p><img src="https://s3.amazonaws.com/rwx-blog/nano2.png"></p>

<p>This is the easy part. With the BLE Nano piggy backing on its MK20 USB board and plugged into a USB port, a folder named MBED should appear on your desktop (at least that is what it is named in my case). Just drag the combined hex file we created above <em>(ancs.hex)</em> to the MBED folder associated with the Nano device. The bootloader should load the new code, and the USB device may disappear momentarily from the desktop, then reappear.</p>

<h2>Test that the ANCS application was loaded correctly</h2>

<p>On an iPhone, open the <em>Settings</em> app, and choose <em>Bluetooth</em> and make sure Bluetooth is on. Under Devices you should see ANCS appear, and by tapping ANCS you should be able to successfully pair with the device.</p>

<h2>Next Steps</h2>

<p>The goal of this process was to get the ARM toolchain and Nordic SDK set up, next steps would be to use the ANCS example as a starting point to develop a custom ANCS app for some device that utilizes the BLE Nano. I hope to post some examples in the future as I work with the Nano more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ANCS Message Display]]></title>
    <link href="http://fooqri.github.io/blog/2016/01/23/ancs-message-display/"/>
    <updated>2016-01-23T11:12:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2016/01/23/ancs-message-display</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p>Ever want to see that last iPhone message without checking your phone. It is actually fairly easy to create a secondary message display using an Arduino, BLE, and an LCD display to conect to the <em>Apple Notification Center Service</em> on your iPhone.
<img src="https://s3.amazonaws.com/rwx-blog/IMG_6097.JPG"></p>

<p>For this project I used the <a href="http://redbearlab.com/blendmicro/" target="_blank">Blend Micro</a> from  RedBearLab, combined with an <a href="https://www.adafruit.com/product/358" target="_blank">AdaFruit ST7735R TFT LCD display</a>  The <em>Blend Micro</em> combines an Atmel ATmega32U4 micro-controller with a Nordic nRF8001 BLE chip. Simply hook up the LCD using SPI and you are in business. For this project I added a <a href="https://www.adafruit.com/products/160">piezo buzzer</a> for sound effects and a button to wake up the display if it has timed out.</p>

<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/IMG_6098.JPG"></p>

<p>The basic idea is to have the iPhone pass along alerts to the device using BLE/ANCS and to have the device play a tone and display the alert information. There is a timeout to power down the backlight on the display after a minute, and a button that can be pressed to turn the display&rsquo;s backlight on, so the last message can be viewed after the one minute timeout.  This power savings mode could allow the device to be powered by a battery.</p>

<p>I created a demo project on <a herf="https://codebender.cc/sketch:222511" target="_blank">codebender</a> to make it easy to replicate. You will need to import a few libraries into your personal libraries on codebender to get the project to work. It would be easy to enhance the project to save the last several messages and use a <a href="https://www.adafruit.com/product/444">2-Axis Analog Thumb Joystick</a> to control a simple interface that scans through messages.</p>

<p>Unfortunately the <em>Blend Micro</em> does not have an on-board LIPO charging circuit, so if you want to enable a combined USB/Battery solution a charging circuit would have to be added. RedBear warns that connecting a battery to VIN and USB simultaneously could damage the board.</p>

<p>I printed up a simple enclosure on the 3D printer and here is the enclosed LCD panel.</p>

<p><img src="https://s3.amazonaws.com/rwx-blog/IMG_6111.JPG"></p>

<h2>Pinouts</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  VIN & GND -&gt; to LIPO battery (DO NOT use USB power when battery connected)
</span><span class='line'>  PIN 2     -&gt; ST7735R LITE
</span><span class='line'>  PIN 8     -&gt; ST7735R D/C
</span><span class='line'>  PIN 9     -&gt; ST7735R Reset
</span><span class='line'>  PIN 10    -&gt; ST7735R TFT_CS
</span><span class='line'>  PIN 11    -&gt; ST7735R MOSI
</span><span class='line'>  PIN 13    -&gt; ST7735R SCK
</span><span class='line'>  PIN V33   -&gt; ST7735R VCC
</span><span class='line'>  PIN GND   -&gt; ST7735R GND
</span><span class='line'>
</span><span class='line'>  Button -&gt; PIN 5, GND
</span><span class='line'>  Buzzer -&gt; PIN 3, GND
</span></code></pre></td></tr></table></div></figure>


<h2>Detailed Instructions</h2>

<p>Follow the instructions for using <a href="http://redbearlab.com/quick-start-codebender" target="_blank">Blend Micro on codebender</a>. You should be able to get the LED Blink example working before continuing.</p>

<h3>Add key libraries</h3>

<p>To compile the code in the project above you will need to add several libraries to your personal libraries on codebender. Go to  <a href="https://codebender.cc" target="_blank">codebender.cc</a> and you will see the <em>*Upload Libraries</em> button on the upper right side of the page. There are four libraries you need to add.</p>

<ul>
<li><a href="https://github.com/NordicSemiconductor/ble-sdk-arduino" target="_blank">Nordic Bluetooth low energy SDK for Arduino beta version 0.9.0</a></li>
<li><a href="https://github.com/RedBearLab/nRF8001/" target="_blank">RedBearLab nRF8001 Library version 20140701</a></li>
<li><a href="https://github.com/RedBearLab/nRF8001/" target="_blank">RedBearLab Blend Add-On version 20140701</a></li>
<li><a href="https://github.com/robotastic/ANCS-Library" target="_blank">Robotastic/ANCS-Library</a></li>
</ul>


<p>Just download each of these as a zip file from github, and upload them to your <em>codebender personal library</em>. I created a fork of the <em>ANCS-Library</em> to thin it down a bit as memory was tight on the <em>Blend Micro</em> for another version of the project I am working on. It is on a branch called <strong>code-diet</strong> available on github  <a href="http://fooqri.github.io//github.com/fooqri/ANCS-Library/archive/code-diet.zip">ANCS-Library on a code-diet zip</a></p>

<p>Finally, clone my <a herf="https://codebender.cc/sketch:222511" target="_blank">codebender ANCS_Display_ST7735 project</a> and verify the code compiles with the libraries you uploaded, and run the project on Arduino.</p>

<p>Open the iPhone  <em>Settings</em> app and select <em>Bluetooth</em>. If everything is working correctly you should see <strong>ANCS_RUSK</strong> listed under <em>MyDevices</em>. Select it and choose pair.
<img src="https://s3.amazonaws.com/rwx-blog/IMG_6095.PNG">
<img src="https://s3.amazonaws.com/rwx-blog/IMG_6094.PNG"></p>

<p>Once paired you should hear a tone on the device, and the display will change from <strong>Status: Not Connected</strong> to <strong>Status: Connected</strong>.  If you receive any alerts on your iPhone you should now hear a tone on the device and the screen should display a message.</p>

<p>You can update the code to support custom tones and messages for different alert types, or add other interesting features.</p>

<h2>Additional Notes</h2>

<ul>
<li>The <a href="http://redbearlab.com/blenano/">Blend Nano</a> from ReadBearLab is a tiny alternative to the Blend Micro but it is based on the ARM Cortex-M0 SoC and uses the newer Nordic nRF51822 BLE chipset. The <em>ANCS-Library</em> is only compatible with the Nordic nRF8001 BLE chipset, so some work would be needed to port the library to the new platform.</li>
<li>Adafruit has just announced a few similar Arduino+BLE boards. The <a href="https://www.adafruit.com/products/2829">Feather 32u4 Bluefruit LE</a> using the ATmega32u4, and the <a href="https://www.adafruit.com/products/2995">Feather M0 Bluefruit LE</a> using the ATSAMD21G18 ARM Cortex. Both these boards provide a built in 100mA lipoly charger, so either would be a better choice for a mobile device. Both these boards use the  nRF51822 BLE chipset so like the Blend Nano would require porting the <em>ANCS-Library</em> before the code above could be used.</li>
<li>I have a <a href="https://www.adafruit.com/products/1393">SHARP Memory Display Breakout</a> from adafruit, which is a really nice eInk type display, but was unable to get it working with this demo on first try. This <a href="https://codebender.cc/sketch:220214">codebender sketch</a> was my first attempt. It seems that there is a conflict between the <em>Adafruit_SharpMem</em> library and the <em>ANCS Library</em>, because instantiating the Adafruit_SharpMem display object causes calls to notif.setup() to hang. I may look at it a bit more if I get a chance, but this was to be a quick experiment. There were some memory size issues initially, but I believe the hang may be an SPI issue, but I haven&rsquo;t yet had time to investigate further.</li>
<li>I also started to play with a headless version that instead uses neoPixels. I will post when I finish it. I like the idea of a fun neoPixel and sound only display connected with an iOS app that allows the user to customize what notifications the display responds to and how it responds. This would allow cheap simple peripheral displays to be created that respond to different notifications in different ways.</li>
<li>The <a href="http://makezine.com/2015/12/09/meet-esp32-new-big-brother-to-iot-board-esp8266/">ESP32</a> should make for an interesting platform for these types of displays because they could allow BLE for notifications, and use WiFi for connection to the home network. This could allow control a wide range of WiFi enabled home devices based on iOS app notifications. That sounds fun.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org Mode ES2015+ Code Blocks]]></title>
    <link href="http://fooqri.github.io/blog/2015/10/06/org-with-babel-node/"/>
    <updated>2015-10-06T16:57:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/10/06/org-with-babel-node</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Updated:</strong> I have <a href="http://fooqri.github.io/blog/2016/03/09/org-with-babel-node-updated/">updated instructions</a> for installing and using the recently released <em>Babel 6</em> with <em>org mode</em>.</li>
</ul>


<p>I use <strong>emacs org mode</strong> to keep notes including code nodes that support inline execution.  It is convenient for keeping useful code snippets, as well as experimenting while taking notes.  Because of features like <a href="http://rwx.io/blog/2013/03/04/nvalt-and-emacs/">Org + Deft</a> it is really easy to find the sweet spot between keeping coding notes organized but also easily searched.</p>

<p>As I have started to explore more ES6 and even ES7 features I wanted a way to transpile on the fly in my coding notes. It turns out it is very easy.</p>

<p>First make a few changes to the emacs environment so you can use JavaScript in <strong>org mode</strong>, as well as find local <em>node.js</em> modules you have installed. Replace <em>&ldquo;~/org/node_modules&rdquo;</em> in the config below with the location of any local node modules you want to pick up. Using this approach you don&rsquo;t have to pollute the global node_module directory if you don&rsquo;t want to.</p>

<p>Add the following to your emacs init.el file and evaluate it (or restart emacs).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setenv "NODE_PATH"
</span><span class='line'>  (concat
</span><span class='line'>   "~/org/node_modules" ":"
</span><span class='line'>   (getenv "NODE_PATH")
</span><span class='line'>  )
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>(org-babel-do-load-languages
</span><span class='line'> 'org-babel-load-languages
</span><span class='line'> '((js . t)))</span></code></pre></td></tr></table></div></figure>


<p>Next install the babel npm module globally, this allows you to call babel from the command line also. Then install any local modules you need to use. I chose to install them from the ~/org directory where my notes are kept, but anywhere works as long as you have the correct path set above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g babel
</span><span class='line'>npm install mongodb
</span><span class='line'>npm install bluebird</span></code></pre></td></tr></table></div></figure>


<p>The default  org-mode interpreter for js is node, so you need to have that installed and its path set. But the cool thing is that you can change the interpreter inline in your code blocks in the cases you want to experiment with upcoming language features. To do this you simply tell <em>org mode</em> to use an alternative interpreter; in this case <strong>babel-node</strong>, which also transpiles.</p>

<p>Adding  <em>:cmd &ldquo;babel-node&rdquo;</em>   after the  <em>#+begin_src js</em> tells <em>org mode</em> to use the babel_node command instead of the default JavaScript interpreter. The <em>:results output</em> tells <em>org mode</em> that the results will be from an output statement <em>(using console.log() for JavaScript)</em></p>

<pre><code>   #+name: db.activities.findOne
   #+begin_src js :cmd "babel-node" :results output drawer
      (async function(){
          try {
              let MongoDB = require('mongodb');
              let Promise = require('bluebird');
              Promise.promisifyAll(MongoDB);
              let db = await MongoDB.MongoClient.connectAsync(process.env.MY_DB);
              let activityCol = db.collection('activities')
              let result = await activityCol.findOne();
              db.close();
              console.log(`The first activity name is ${result.name}`);
            }
           catch(err){
             consule.log(err);
             throw err;
           }
         })()
   #+END_SRC
</code></pre>

<p>Now, simply place the cursor anywhere in the block and execute it using C-c C-c. The results will be placed under the block in second block entitled: <em>#+RESULTS:</em></p>

<p>The block can be executed as often as you like and the results will be refreshed. See the updated example with its results block below.</p>

<pre><code>   #+name: db.activities.findOne
   #+begin_src js :cmd "babel-node" :results output drawer
      (async function(){
          try {
              let MongoDB = require('mongodb');
              let Promise = require('bluebird');
              Promise.promisifyAll(MongoDB);
              let db = await MongoDB.MongoClient.connectAsync(process.env.MY_DB);
              let activityCol = db.collection('activities')
              let result = await activityCol.findOne();
              db.close();
              console.log(`The first activity name is ${result.name}`);
            }
           catch(err){
             consule.log(err);
             throw err;
           }
         })()
   #+END_SRC

   #+RESULTS: db.activities.findOne
   :RESULTS:
   The first activity name is Shopping
   :END:
</code></pre>

<p>You can see several new and experimental language features including <em>async functions</em>, the <em>await</em> keyword for performing a non-blocking wait on a promise to complete, and <em>template strings</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESP8266 Initial Notes]]></title>
    <link href="http://fooqri.github.io/blog/2015/09/09/esp8266-initial-notes/"/>
    <updated>2015-09-09T08:05:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/09/09/esp8266-initial-notes</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/sparkfun_thing.jpg"  style="height: 400px; display: block; margin: auto;"></p>

<h1>Here are a few notes from my experiments with the ESP8266</h1>

<p>I have started testing  the ESP8266 as an inexpensive WiFi enabled IoT device platform. I will added specific how-to notes later but wanted to capture a few items from my initial experiments.</p>

<p>I started with the <a href="https://www.sparkfun.com/products/13231" target="_blank">Sparkfun Thing</a>, which is a nice ESP8266 dev board that supports integrated LiPo battery management. They have a nice <a href="http://fooqri.github.io//learn.sparkfun.com/tutorials/esp8266-thing-hookup-guide" target="_blank">Hookup Guide</a> to get you started.</p>

<p>My use case is a very simple IoT type device that will send data to a cloud service that I have developed. The cloud service will aggregate the data from multiple personal IoT devices for a user. These devices will generally be powered via LiPo battery when in use for interaction and placed in a charging tray when not in interactive use. The devices are always active but have special meaning when in interactive use.</p>

<p>These constraints mean that battery life is a critical factor, but I do not need days, months, or years of battery life. The ESP8266 is a fairly power hungry device, especially when transmitting data, but it does have some power management features, most notably <strong>deep sleep</strong>.</p>

<h2>Notes from my initial experiments:</h2>

<h3>The Kit</h3>

<p>I used the <a href="http://fooqri.github.io//www.sparkfun.com/products/13231" target="_blank">Sparkfun Thing</a>, <a href="http://fooqri.github.io//www.sparkfun.com/products/9873" target="_blank">FTDIBreakout</a> for uploading code, and  <a href="http://fooqri.github.io//www.sparkfun.com/products/10718" target="_blank">LiPo battery</a>.</p>

<h3>Setup</h3>

<p>An easy way to get code running is to use the <a href="http://fooqri.github.io//learn.sparkfun.com/tutorials/esp8266-thing-hookup-guide/installing-the-esp8266-arduino-addon" target="_blank">Arduino Addon</a> that lets you leverage the Arduino libraries in programming the ESP8266. An alternative I will try in the future is the  <a href="http://fooqri.github.io//github.com/nodemcu/nodemcu-firmware" target="_blank">Lua based firmware</a></p>

<p>When using the FTDI to program the board take note that GPIO0 is used to set the run mode of the firmware. 3.3V puts it in <em>run mode</em> and 0V puts it in <em>program mode (bootloader)</em>. This is easy to miss in the instructions, so be sure to connect the <em>0</em> pin to ground when you wish to upload the code from the Arduino IDE.</p>

<h2>Power Management</h2>

<p>To use the <em>deep sleep</em> mode on the <em>Sparkfun Thing</em> you must connect <em>XPD</em> to <em>DTR</em>. Sparkfun connected DTR to RST on the <em>Thing</em> so a short negative voltage will reset the device. When in <em>deep sleep</em> most system services are powered off, but the RTC and timer interrupt remains active for the purpose of waking the device from sleep. This is handled by the firmware once these pins are connected, however this means you will have to remove the FTDI programmer to test the deep-sleep mode.</p>

<p>The <em>deepsleep()</em> call looks a lot like a <em>delayMicroseconds()</em> call, simply pass it the number of microseconds before it should wake up again. In deep sleep mode, the ESP8266 hits about 60 µA of power draw, down from its average of around 75mA, and the 200mA used while transmitting.</p>

<p>It should be possible to connect a button or some other independent sensor as an alternative to a timer based wakeup, so the device can be awaken by a button press or some physical world event.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ESP.deepSleep(1000000);  //sleep for 1 second</span></code></pre></td></tr></table></div></figure>


<h3>Saving State</h3>

<p>Unlike a call to <em>delay()</em> or <em>delayMicroseconds()</em>, the <em>deepsleep()</em> function actually causes the device to power down everything except the RTC and related services. Wake is essentially a device reboot and previous state is not maintained. This means any state will need to be stored in the ESP8266 EEPROM. For this there is an EEPROM library and EEPROM.get()</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  //some struct for saved object
</span><span class='line'>  struct BackupObj{
</span><span class='line'>    int setting;
</span><span class='line'>    int data;
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>  //write
</span><span class='line'>  int eeAddress = 0;
</span><span class='line'>  EEPROM.begin(4096);  //set up memory allocation
</span><span class='line'>  EEPROM.put( eeAddress, backupObj );
</span><span class='line'>  EEPROM.commit();
</span><span class='line'>  EEPROM.end();
</span><span class='line'>
</span><span class='line'>  //read
</span><span class='line'>  int eeAddress = 0; 
</span><span class='line'>  EEPROM.begin(4096);
</span><span class='line'>  EEPROM.get( eeAddress, backupObj );
</span><span class='line'>  EEPROM.end();</span></code></pre></td></tr></table></div></figure>


<h3>Adding Components</h3>

<p>The device works well for I2C, in my case I tested with an MPU-6050.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #include &lt;Wire.h&gt;
</span><span class='line'>
</span><span class='line'>  void setup() {
</span><span class='line'>    // ... other setup code
</span><span class='line'>    Wire.begin();
</span><span class='line'>    Wire.beginTransmission(MPU);
</span><span class='line'>    Wire.write(0x6B);  // PWR_MGMT_1 register
</span><span class='line'>    Wire.write(0);     // set to zero (wakes up the MPU-6050)
</span><span class='line'>    Wire.endTransmission(true);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // using arduino's loop mechanism
</span><span class='line'>  void loop(){
</span><span class='line'>    // ... other loop code
</span><span class='line'>    Wire.beginTransmission(MPU);
</span><span class='line'>    Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
</span><span class='line'>    Wire.endTransmission(false);
</span><span class='line'>    Wire.requestFrom(MPU,14,true); 
</span><span class='line'>    AcX=Wire.read()&lt;&lt;8|Wire.read();     
</span><span class='line'>    AcY=Wire.read()&lt;&lt;8|Wire.read();  
</span><span class='line'>    AcZ=Wire.read()&lt;&lt;8|Wire.read(); 
</span><span class='line'>    // ... other loop code
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>I tested using GPIO with a piezo used as a speaker. The Speaker is capable of playing simple notes using frequency of note mapped to cycles of sound and delay.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #define NOTE_C5  523 //middle C
</span><span class='line'>  #define NOTE_D5  587
</span><span class='line'>
</span><span class='line'>  const int SPEAKER_PIN = 5;
</span><span class='line'>  
</span><span class='line'>  void playNote(int targetPin, long frequency, long length) {
</span><span class='line'>    long delay = 1000000 / frequency / 2; 
</span><span class='line'>    long cycles = frequency * length / 1000; 
</span><span class='line'>    for (long i = 0; i &lt; cycle; i++) { 
</span><span class='line'>      digitalWrite(targetPin, HIGH); 
</span><span class='line'>      delayMicroseconds(delay); 
</span><span class='line'>      digitalWrite(targetPin, LOW); 
</span><span class='line'>      delayMicroseconds(delay);
</span><span class='line'>    } 
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  long noteDuration = 500;
</span><span class='line'>  long frequency = NOTE_C5;
</span><span class='line'>
</span><span class='line'>  playNote(SPEAKER_PIN, frequency, noteDuration);
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<p>I  tested  analog sensor input in the form of a second piezo connected to the ADC pin as a knock sensor. ADC is the only analog input pin on this device.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  const int KNOCK_SENSOR = A0;
</span><span class='line'>  const int KNOCK_THRESHOLD = 70;
</span><span class='line'>
</span><span class='line'>  sensorReading = analogRead(KNOCK_SENSOR); 
</span><span class='line'>  if (sensorReading &gt;= KNOCK_THRESHOLD) {
</span><span class='line'>    long noteDuration = 500;
</span><span class='line'>    long frequency = NOTE_E5;
</span><span class='line'>    playNode(SPEAKER_PIN, frequency, noteDuration); 
</span><span class='line'>  }
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<p>Finally there were enough pins remaining to hookup an RGB LED breakout. I added this test using the  <a href="http://fooqri.github.io//github.com/joushx/Arduino-RGB-Tools" target="_blank">RGB Tools Lib</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  #include &lt;RGBTools.h&gt;
</span><span class='line'>
</span><span class='line'>  const int RED_PIN = 4; 
</span><span class='line'>  const int GREEN_PIN = 12; 
</span><span class='line'>  const int BLUE_PIN = 13;
</span><span class='line'>
</span><span class='line'>  // set the RGB pins - here I used pins 4, 13, and 12
</span><span class='line'>  // use RGBTools rgb(4,13,12, COMMON_CATHODE); if using a cathode RGB
</span><span class='line'>  RGBTools rgb(4,13,12); 
</span><span class='line'>
</span><span class='line'>  //set a nice red
</span><span class='line'>  rgb.setColor(174,10,0);
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This was a quick run through to test some of the feature of the device, but even with a few sensors/actuators and a simple setup there is a nice combination of status and interaction feedback that can be performed with a simple and relatively inexpensive device. The <em>Sparkfun Thing</em> retails for around $15 right now but the <a href="http://fooqri.github.io//learn.adafruit.com/adafruit-huzzah-esp8266-breakout/overview" target="_blank">Huzzah</a> is under $10, and others can be found closer to $5.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Updating Edison Apps]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/18/self-updating-edison-app/"/>
    <updated>2015-08-18T10:49:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/18/self-updating-edison-app</id>
    <content type="html"><![CDATA[<p>One of the challenges I have had in handing out prototype devices is keeping the software up to date. Solutions like <a href-"www.resin.io" target="_blank">resin.io</a> do a nice job of deploying <a href="http://bundler.io/" target="_blank">bundler images</a> onto devices like the Edison. The primary issue I had was the overhead of pushing bundler images around when the only thing that was changing was the node app. It seemed easier to just use git and npm to handle the updates. I may go the resin.io route later, but this early in dev and testing the git route seems simpler.</p>

<h2>Overview of What I Did</h2>

<p>The product I am prototyping has two parts, an Edison device (with additional sensors and actuators) running a node app, and a node web service for managing device configuration and data running in the cloud.</p>

<ol>
<li>The device&rsquo;s node app is published in a private github repository.</li>
<li>I installed and configured git on each of the Edison devices.</li>
<li>I cloned the github repository onto each of the Edison devices.</li>
<li>I installed the forever module on each of the devices to keep the app up and allow easy restarting of the app.</li>
<li>I created a startup script that starts the app using forever.</li>
<li>I created and enabled a linux service that runs the startup script on boot.</li>
<li>I added code to the app to periodically ask the web service what the latest version of the app should be.</li>
<li>If a new version is available the app will do a pull and use forever to do a restart using the new version.</li>
</ol>


<h2>The Details</h2>

<h3>Initial Cleanup</h3>

<ul>
<li>Remove any app from the default Edison node_app_slot directory so you don&rsquo;t accidentally start the app using the default Edison process.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv /node_app_slot /node_app_slotbk
</span><span class='line'>mv  ~/.node_app_slot/ ~/.node_app_slotbk</span></code></pre></td></tr></table></div></figure>


<h3>Install Git</h3>

<h4>Update /etc/opkg/base-feeds.conf with these 3 lines</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>src all     http://iotdk.intel.com/repos/1.1/iotdk/all
</span><span class='line'>src x86 http://iotdk.intel.com/repos/1.1/iotdk/x86
</span><span class='line'>src i586    http://iotdk.intel.com/repos/1.1/iotdk/i586</span></code></pre></td></tr></table></div></figure>


<h4>Update opkg and install git</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>opkg update
</span><span class='line'>opkg install git</span></code></pre></td></tr></table></div></figure>


<h3>Option 1: Modify Edison&rsquo;s default port</h3>

<p>I wanted to use port 80 for the node app so I moved the default Edison config service to port 8080</p>

<h4>Change default port in edison-cofig-server</h4>

<p>Edit <em>/usr/lib/edison_config_tools/edison-config-server.js</em>
and change the last line to use a port other than 80.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http.createServer(requestHandler).listen(8080);</span></code></pre></td></tr></table></div></figure>


<h4>Option 2: Disable the Edison config web service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl disable edison_config
</span><span class='line'>systemctl stop    edison_config</span></code></pre></td></tr></table></div></figure>


<h3>Setup to use github</h3>

<h4>Generate a key for use with github</h4>

<ul>
<li>ssh-keygen -t rsa -b 4096 -C &ldquo;<a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#109;&#101;&#64;&#109;&#121;&#46;&#101;&#x6d;&#x61;&#x69;&#x6c;">&#x6d;&#x65;&#64;&#109;&#121;&#46;&#x65;&#109;&#x61;&#x69;&#108;</a>&rdquo;</li>
</ul>


<p>Follow the directions, easiest is just to hit return at the prompts. I chose to not do a passphrase for my small pilot.</p>

<h4>Generate a deployment key for the github repository</h4>

<ul>
<li>Go to your app&rsquo;s github repository, choose <em>settings</em>, choose <em>deployment keys</em></li>
<li>Click the <em>Add Deployment Key</em> button</li>
<li>Give it a title (the host name for the device works)</li>
<li>Back on the Edison run cat /home/root/.ssh/id_rsa.pub to get the text for the public key</li>
<li>copy the text for the public key to the <em>Key</em> input box back on github.</li>
</ul>


<h3>Clone your repo</h3>

<p>Back on the Edison</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /
</span><span class='line'>git clone &lt;your repo&gt; AppDirName
</span><span class='line'>cd /AppDirName</span></code></pre></td></tr></table></div></figure>


<h3>Pull Latest code</h3>

<p>Now any time you update code on master a simple <em>git pull</em> will update the latest code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull</span></code></pre></td></tr></table></div></figure>


<h3>Install forever module using npm</h3>

<p>Forever will automatically restart a node app if it crashes. It also has some handy restart features.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g forever</span></code></pre></td></tr></table></div></figure>


<h3>Create a startup script &amp; service</h3>

<p>Creating a startup service will allow your app to start automatically using forever.</p>

<h4>Create startup.sh to start node app (server.js in this case)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>cd /AppDirName 
</span><span class='line'>forever start server.js</span></code></pre></td></tr></table></div></figure>


<h4>Make startup.sh executable</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod +x startup.sh</span></code></pre></td></tr></table></div></figure>


<h4>Create a startup service file at /lib/systemd/system/startup.service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Unit]
</span><span class='line'> Description=STARTUP
</span><span class='line'> [Service]                           
</span><span class='line'> Type=idle                           
</span><span class='line'> RemainAfterExit=true
</span><span class='line'> ExecStart=/AppDirName/startup.sh
</span><span class='line'> Environment="HOME=/home/root"    
</span><span class='line'> WorkingDirectory=/AppDirName/   
</span><span class='line'> [Install]                     
</span><span class='line'> WantedBy=multi-user.target </span></code></pre></td></tr></table></div></figure>


<h4>Enable startup service</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl enable /lib/systemd/system/startup.service</span></code></pre></td></tr></table></div></figure>


<h3>Enable your node app to update itself</h3>

<p>By using a simple update function you can get your app to update itself and restart.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var spawn = require('child_process').exec;
</span><span class='line'>var semver = require('semver');
</span><span class='line'>var bunyan = require('bunyan');
</span><span class='line'>var log = bunyan.createLogger({
</span><span class='line'>    name: 'app',
</span><span class='line'>    streams: [{
</span><span class='line'>        type: 'rotating-file',
</span><span class='line'>        path: '/var/log/app.log',
</span><span class='line'>        period: '1d',
</span><span class='line'>        count: 7        
</span><span class='line'>    }]
</span><span class='line'>});
</span><span class='line'>var pjson = require('./package.json');
</span><span class='line'>
</span><span class='line'>var checkVersion = function(){
</span><span class='line'>  var currentVersion = pjson.version;
</span><span class='line'>  var options = {  hostname: 'www.myhost.com',
</span><span class='line'>                             port: 80,
</span><span class='line'>                   path: 'http://www.myhost.com/device_version/',
</span><span class='line'>                   method: 'GET',
</span><span class='line'>                   headers: {'Content-Type': 'application/json'}
</span><span class='line'>                };
</span><span class='line'>  var callback = function(response) {
</span><span class='line'>    var dataStr = '';
</span><span class='line'>    response.on('data', function (chunk) {
</span><span class='line'>      dataStr += chunk;
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    response.on('end', function () {
</span><span class='line'>      var versionInfo = JSON.parse(dataStr);
</span><span class='line'>      var latestVersion = versionInfo.client_version || "0.0.0"; //don't update if missing version info
</span><span class='line'>      log.info("current version: ", currentVersion);
</span><span class='line'>      log.info("latest version: ", latestVersion);
</span><span class='line'>      if (semver.gt(latestVersion, currentVersion)){
</span><span class='line'>        log.info("pulling newer versions");
</span><span class='line'>        spawn('git pull', function(error, stdout, stderr) {
</span><span class='line'>          if (error){
</span><span class='line'>            log.error("ERROR pulling latest: ", error);
</span><span class='line'>          }
</span><span class='line'>          else{
</span><span class='line'>            log.info("updating packages");
</span><span class='line'>            spawn('npm update', function(error, stdout, stderr){
</span><span class='line'>              if (error){
</span><span class='line'>                log.error("ERROR updating packages: ", error);
</span><span class='line'>              }
</span><span class='line'>              else {
</span><span class='line'>                log.info("restarting node");
</span><span class='line'>                spawn('forever restartall', function(error, stdout, stderr){
</span><span class='line'>                  if (error){
</span><span class='line'>                    log.error("ERROR restarting: ", error);
</span><span class='line'>                  }
</span><span class='line'>                  else {
</span><span class='line'>                     log.info("restarted");
</span><span class='line'>                  }
</span><span class='line'>                });
</span><span class='line'>              }           
</span><span class='line'>            });
</span><span class='line'>          }
</span><span class='line'>        }); 
</span><span class='line'>      }
</span><span class='line'>    });
</span><span class='line'>  };
</span><span class='line'>
</span><span class='line'>//check for updates at app startup
</span><span class='line'>checkVersion();
</span><span class='line'>
</span><span class='line'>//then check for updates every hour;
</span><span class='line'>setInterval(function() {
</span><span class='line'>    checkVersion();                                                       
</span><span class='line'>  }, 3600000);
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<h3>On the server</h3>

<p>You will need to add a route on your server to provide the version info. In this example the route was a GET request to the  <em>/device_version</em> route. For simplicity I just use an env_var on the service. I simply update the env_var when a new version is available. Then in the logic for the <em>/device_version</em> route I pass back the version found in the env_var.</p>

<p>The logic for comparing versions is very basic and flawed, but will work in this simple case.</p>

<h3>Improvements</h3>

<p>Ideally instead of a straight <em>git pull</em> you can instead download a tagged version, and keep the current and next version info for each device in the web service db. This would allow rolling out upgrades to specific devices, etc. Another approach would be to pass back version info to the device so updates could roll out immediately if the device is in use. Finally more logic on the device to schedule an update when not active would be ideal. In that case maybe adding more than <em>versionNumber</em> of the latest version to the server response, maybe a priority value also.</p>

<p>This was a quick experiment it getting updates to percolate out to devices prototype devices, and so far it seems to be working well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workbench Replaces My Desk]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/17/workbench/"/>
    <updated>2015-08-17T08:15:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/17/workbench</id>
    <content type="html"><![CDATA[<p><a href="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/workbench.JPG" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/workbench.JPG"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>I changed my desk out for a workbench and am very pleased with the results. I made the switch for two reasons:</p>

<ol>
<li>I spend a lot of time at my desk and wanted to mix in sitting and standing throughout the day.</li>
<li>I started to work more frequently on small hardware projects and found that being able to stand and move about the bench was more comfortable.</li>
</ol>


<p>A few additional changes I made:</p>

<ul>
<li>I found that I needed more tools at hand when I was working on hardware projects, so I brought in a small tool cabinet from the garage.</li>
<li>I wanted to have access to a large number of &ldquo;Maker&rdquo; materials in my office vs. the garage, so I also added an <a href="http://www.ikea.com/us/en/catalog/products/40196241/" target="_blank">IKEA Alex</a> cabinet. These can often be found in their discount section for around $60 if you don&rsquo;t mind a few minor marks. This cabinet holds larger hardware components (like Arduino boards) as well as design/art supplies like paper, ink, paint, cutting/carving tools, etc.</li>
<li>I wanted to have some smaller supplies at hand on top of the desk so I added a few <a href="http://www.amazon.com/gp/product/B000AIDBGC" target="_blank">Art Supply Drawers</a> for the top of the bench. The one to the left of the monitor holds small electronic components. The one to the right holds drawing pencils, pens, markers, etc that I use frequently.</li>
<li>I added a <a href="http://fooqri.github.io//www.amazon.com/gp/product/B00ANZRT4M" target="_blank">digital soldering station</a> and <a href="http://www.amazon.com/Weller-WSA350-Bench-Smoke-Absorber/dp/B000EM74SK" target="_blank">exhaust fan</a>. I still have a soldering station in the garage, but having one at hand is very convenient.</li>
<li>Another handy addition is the <a href="http://www.amazon.com/gp/product/B00XNYXQHE" target="_blank">USB Microscope</a>, as some solder joints just require very careful inspection. This is especially true with soldering of small components and SMD components.</li>
<li>I also had to add a <a href="http://www.amazon.com/gp/product/B001PMJXD2" target="_blank">bench height chair</a>.</li>
<li>The workbench is a <a href="http://www.amazon.com/Gladiator-GAWB08HWEG-Adjustable-Hardwood-Workbench/dp/B00ZTH82CW" target="_blank">Gladiator 8 ft. maple workbench</a> I had in the garage for a long time. The new ones allow height adjustment, and there are also less expensive bamboo top options.</li>
</ul>


<p>I am very pleased with the setup. One nice feature is the workbench depth is less than a traditional desk, so I gained some space back in the office. The main benefit is just better productivity, I find certain tasks are just easier to accomplish when standing. The final benefit? With two greyhounds in the house, having a tall desk means fewer expensive pens and markers go missing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I2C MPU-6050]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/17/i2c-mpu-6050/"/>
    <updated>2015-08-17T05:50:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/17/i2c-mpu-6050</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/mpu6050.jpg"  style="height: 400px; display: block; margin: auto;"></p>

<p>I am using an accelerometer in my most recent device to capture gesture and orientation information, as the device itself has no traditional user interface. Since the device is running a node.js app to capture data and push it to a cloud service the first prototype required a quick solution to getting data from an MPU.</p>

<p>To capture data I am using a  few node modules. In particular the <a href="https://github.com/hybridgroup/cylon" target="_blank">cylon.js</a> module, along with the <a href="https://github.com/hybridgroup/cylon-i2c" target="_blank">cylon-i2c</a> module.  This allows accelerometer data to be easily used by the following code block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cylon                                                                          
</span><span class='line'>  .robot()                                                                    
</span><span class='line'>  .connection("edison", { adaptor: "intel-iot", i2cPort: 1})                  
</span><span class='line'>  .device("accel", { driver: "mpu6050" })                                     
</span><span class='line'>  .on("ready", function(bot) {                                      
</span><span class='line'>    setInterval(function() {                                        
</span><span class='line'>      bot.accel.getAcceleration(function(err, data) {
</span><span class='line'>        //use data
</span><span class='line'>      });
</span><span class='line'>    });
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<h2>The MPUs</h2>

<p>The first prototype of this device is using a SparkFun Edison stack with the SparkFun I2C block connected to an MPU-6050, rather than the SparkFun Accelerometer block. At the time of this writing the cylon-i2c implementation of the lsm9ds0 driver is not working correctly with the SparkFun Accelerometer block, so I went the I2C route. The second an perhaps more important reason I went the I2C route is that MPU-6050 boards can be had for as low as $4, which is appealing for a low cost prototype.</p>

<p>I have a handful of MPUs I have tried and here is some info on them.</p>

<h3><a href="https://www.sparkfun.com/products/11028" target="_blank">SparkFun MPU-6050 Breakout</a></h3>

<p>This is great accelerometer breakout that works well with the Edison and Cylon module, but much less expensive options exist.</p>

<h3><a href="http://www.amazon.com/gp/product/B00H1OYE4Q" target="_blank">RioRand Triple Axis MPU-6050 Breakout</a></h3>

<p>This is currently my go to accelerometer. It is relatively low priced at $11 and arrives in 2 days via Amazon Prime. These work well with both the Edison 3.3V boards, and the cylon i2c module. Unfortunately the default I2C address for this board is 0x69, instead of the more common  0x68 (used by the cylon mpu6050 driver) so you will need to solder the AD0 jumper plate on the top of the board.</p>

<h3><a href="http://www.amazon.com/Kootek-MPU-6050-MPU6050-sensors-Accelerometer/dp/B008BOPN40/" target="_blank">Kootek GY-521 MPU-6050 MPU6050 Module</a></h3>

<p>At $4 with free shipping these look like a great option. They are reported to work well with 3.3V VCC. The down side is very slow delivery via the slow boat. I have a handful on order, I will provide an update when they arrive.</p>

<h3><a href="http://www.amazon.com/gp/product/B009M19L4Y" target="_blank">GY-521 6DOF MPU6050 Module</a></h3>

<p>At a little over $5 with free shipping this seems like a great option, unfortunately the onboard voltage regulator in the GY-521 is designed for the Arduino 5V VCC and when used with a 3.3V VCC of the Edison blocks results in too low power on the I2C SDA/SCL pins to register as proper high and low voltage values. It is possible to give the board a separate 5V VCC supply, but that just seems overly complicated for the prototype device. Another feature of this board is the breakout of AD0 into a pin, allowing easy switching between I2C 0x68 and 0x69 addresses using either a ground or VCC connection.</p>

<h2>Connecting the MPU</h2>

<p>For the first prototype I am using  SparkFun Edison blocks, as I have a a few sets of these interchangeable blocks that are quick to assemble into a prototype. In this case I am using the <a href="https://www.sparkfun.com/products/13034" target="_blank">SparkFun I2C</a> block with an Edison. This block allows the Edison to be snapped onto the block, and the MPU-6050 board to be connected with 4 jumpers (VCC, GND, SDA, SCL).</p>

<h2>Checking I2C Address</h2>

<p>Most MPU-6050 boards will have an I2C address of 0x68, but if you choose a different MPU and it isn&rsquo;t working with Cylon, the first thing to check will be whether the address is 0x68. The error message from Cylon will be a <em>&ldquo;RangeError: Trying to access beyond buffer length&rdquo;</em> for most errors where the MPU is not connected properly. To check the address use the following command when the MPU is connected via I2C.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i2cdetect -y -r 1</span></code></pre></td></tr></table></div></figure>


<p>The result will look something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
</span><span class='line'>00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
</span><span class='line'>60: -- -- -- -- -- -- -- -- 68 -- -- -- -- -- -- -- 
</span><span class='line'>70: -- -- -- -- -- -- -- --</span></code></pre></td></tr></table></div></figure>


<p>You will see either a 68 or a 69 if the MPU-6050 is connected properly. If the address displayed is 69, you will need to change the address to 68 using the technique recommended for your board (AD0 jumper). You may see other numbers in the results if you have other I2C components included in your assembled device, but if you are using an MPU-6050 and it is connected correctly either a 68 or a 69 should appear in the i2cdetect results.</p>

<p>I won&rsquo;t get into calibration or gesture recognition in this post, but will try to post more on MPU calibration, gesture recognition, etc in future posts. Given not all MPU-6050 breakouts work with the Edison because of their compatibility with 5V Arduino boards I wanted to post the notes of my experience with a few of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESP8266]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/16/esp8266/"/>
    <updated>2015-08-16T15:41:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/16/esp8266</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/ESP8266.jpg"  style="height: 400px; display: block; margin: auto;"></p>

<p>I have been building a few prototype devices with the following parts:</p>

<ul>
<li><a href="https://www.sparkfun.com/products/13024" target="_blank">Intel Edison</a></li>
<li><a href="https://www.sparkfun.com/products/13037" target="_blank">Sparkfun Battery Block</a></li>
<li><a href="https://www.sparkfun.com/products/13034" target="_blank">Sparkfun I2C Block</a></li>
<li><a href="http://www.amazon.com/gp/product/B00H1OYE4Q" target="_blank">MPU-6050</a></li>
</ul>


<p>The device runs a node.js app that handles configuration and also posting data to a web service running in the cloud. Each user has an account and can have 1 or more devices. I won&rsquo;t get into the purpose of the device here (or a few more components it has) but the device is working for its intended early prototyping purpose.</p>

<p>I have a drawer full of SparkFun Edison blocks, and often use them with an Edison for the first prototype of a device because it is such a powerful prototyping platform if you know Linux well. They Sparkfun boards are rather expensive, but so quick to use for rapid prototyping that I tend to always start with them. They also integrate well with various node libs including <a href="https://www.npmjs.com/package/cylon" target="_blank">cylon</a> and <a href="https://github.com/node-red/node-red" target="_blank">nodered</a>.</p>

<p>But when it is time to build more than a few prototype units, cost does start to matter.  Replacing the Sparkfun boards with a PCB approach is the next obvious step to lowering cost and customizing the device, but in this latest device the Edison platform itself is too expensive to create the devices at the price point I am targeting. It is the perfect physical size, but the price is too high.</p>

<p>After some analysis I have decided to try to reproduce the behavior of the current device using an ESP8266 instead of the Edison. I ordered some very inexpensive ESP8266 that are coming via the slow boat, but in the mean time my <a href="https://goo.gl/yCnruP" target="_blank">Sparkfun ESP8266 Thing</a> arrived. It is a breakout board featuring the ESP8266.</p>

<p>I hope to get time over the next week to dive into coding the ESP8266, but if anyone has previously hooked up an MPU-6050 to an 8266 I would love to hear about your experiences and any issues, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Edison Wi-Fi Configuration]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/16/edison-wifi-config/"/>
    <updated>2015-08-16T13:55:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/16/edison-wifi-config</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/IMG_4161.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>I built a handful of prototype devices using Intel Edison boards to hand out to testers, but one challenge is each tester will bring the devices to their own Wi-Fi environment (home, work, etc). The default method for configuring an Edison is to use a console and the command line configuration tool to add a Wi-Fi access point.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>configure_edison --wifi</span></code></pre></td></tr></table></div></figure>


<p>The <em>configure_edison</em> app will scan for Wi-Fi networks and provide a list of networks for the user to pick from, and then prompt the user for the access point password. Since my headless IoT device has no traditional interface, let alone terminal interface this posed a problem. I needed a way for users to configure the device for new Wi-Fi networks as they were encountered, and make it accessible using a web page presented by the Edison. I will post the code once I have it completed and tested with users but for a quick hint the trick is to allow the running node.js app to switch the device between access point mode and client mode so if no network is available the device becomes an access point allowing the user to use any Wi-Fi enabled device to connect with it. Once connected the user can use a standard web browser to update the configuration to include the new Wi-Fi network they are intending to use.</p>

<h3>wpa_supplicant</h3>

<p>The Edison uses the wpa_supplicant service to manage the client-mode Wi-Fi. The wpa_supplicant configuration file is located at: <strong>/etc/wpa_supplicant/wpa_supplicant.conf</strong></p>

<p>Wi-Fi networks are added and removed by updating this configuration file. Se an example configuration below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl_interface=/var/run/wpa_supplicant
</span><span class='line'>ctrl_interface_group=0
</span><span class='line'>config_methods=virtual_push_button virtual_display push_button keypad
</span><span class='line'>update_config=1
</span><span class='line'>fast_reauth=1
</span><span class='line'>device_name=Edison
</span><span class='line'>manufacturer=Intel
</span><span class='line'>model_name=Edison
</span><span class='line'>
</span><span class='line'>network={
</span><span class='line'>  ssid="guest"
</span><span class='line'>  key_mgmt=WPA-PSK
</span><span class='line'>  pairwise=CCMP TKIP
</span><span class='line'>  group=CCMP TKIP WEP104 WEP40
</span><span class='line'>  eap=TTLS PEAP TLS
</span><span class='line'>  psk="guest_pw"
</span><span class='line'>  id_str="guest"
</span><span class='line'>  priority=4
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>network={
</span><span class='line'>  ssid="MyPhone"
</span><span class='line'>  key_mgmt=WPA-PSK
</span><span class='line'>  pairwise=CCMP TKIP
</span><span class='line'>  group=CCMP TKIP WEP104 WEP40
</span><span class='line'>  eap=TTLS PEAP TLS
</span><span class='line'>  psk="hotspot_pw"
</span><span class='line'>  id_str="iphone_hotspot"
</span><span class='line'>  priority=2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see I have added two networks to the configuration, and given the network associated with my phone (in personal hotspot mode) a lower priority so it will be a fallback only. <em>Note: you can change the name of your iPhone (and thus its personal hotspot) using itunes, and you can find the hotspot password in the hotspot settings on the iphone.</em></p>

<p>You can also add support for connecting to any open network (at your own risk) with an empty network statement</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>network={
</span><span class='line'>  id_str="open"
</span><span class='line'>  priority=0
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If the network you are connecting to has a hidden ssid then you need to add <em>scan_ssid=1</em> to the configuration description. Because <em>scan_ssid=0</em> is the default setting and is used for a broadcast ssid it can be omitted from the configuration of networks using a broadcast ssid.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>network={
</span><span class='line'>  scan_ssid=1
</span><span class='line'>  ssid="MyHiddenSSID"
</span><span class='line'>  key_mgmt=WPA-PSK
</span><span class='line'>  pairwise=CCMP TKIP
</span><span class='line'>  group=CCMP TKIP WEP104 WEP40
</span><span class='line'>  eap=TTLS PEAP TLS
</span><span class='line'>  psk="hidden_hotspot_pw"
</span><span class='line'>  id_str="hidden_hotspot"
</span><span class='line'>  priority=2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Switching to AP mode and back</h3>

<p>The Edison comes pre-configured for AP mode but if you are curious about changing the settings the configuration file can be found at <em>/etc/hostapd/hostapd.conf</em>.  The other key networking file that should require no changes for this configuration is <em>/etc/network/interfaces</em>.</p>

<p>In the case when no configured network is available it is possible to connect a gesture (my device has an mpu-6050) to force the device into AP mode so it can get information from the user about how to connect to a new local network. The gesture observer thread can inform the node app when the preconditions of an AP mode switch should occur, the node app can then switch the Wi-Fi network temporarily to AP mode.</p>

<p>This is accomplished by stoping the wpa_supplicant service and starting the APN services using these two system commands that can be executed in  exec() or spawn() calls.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl stop wpa_supplicant
</span><span class='line'>systemctl start hostapd</span></code></pre></td></tr></table></div></figure>


<h3>Adding a network</h3>

<p>Now the device is in AP mode and the user can connect to the device by selecting it from the list of available networks, and go to the device confguration page for information about available networks and choose one to connect to. I won&rsquo;t get into the scanning now but you can look <a href="https://goo.gl/xDxM5R" target="_blank">here</a> for more info on using _wpa_cli scan<strong> and </strong>wpa scan_results__ for getting info on available networks.</p>

<p>Once the user chooses a network and provides a password you can configure the device to use the network. My preference is to add the network and a config entry in the wpa_supplicant.conf file so the network can be used again in the future, but you can also use the wpa_cli to configure the network directly. Just use the format shown above to append your entry to the file.</p>

<h3>Switch back to Wi-Fi client mode to connect to the newly added network.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wpa_cli reconfigure
</span><span class='line'>systemctl stop hostapd
</span><span class='line'>systemctl start wpa_supplicant</span></code></pre></td></tr></table></div></figure>


<p>I will add my code for the entire process to a public gist when I have fully tested it out, and update this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popup Workbench]]></title>
    <link href="http://fooqri.github.io/blog/2015/08/16/the-post-title/"/>
    <updated>2015-08-16T13:00:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/08/16/the-post-title</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/popup_workbench1.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>We are down to one car, as we can walk/bike to about anything we could possibly need including caltrain and light rail. So the garage is now empty of cars, and filled with toys. While playing ping pong one day I decided a beverage table would be nice in the garage, but something that could also serve as a work surface in a pinch. Something to put some tools on, etc. I wanted it to be something that could be folded out of the way when not needed, and something that didn&rsquo;t cost a lot since I wasn&rsquo;t sure if it would really prove useful. Sort of a prototype 1 of a collapsable work surface concept.</p>

<p>I had some left over bamboo flooring from an old home improvement project that I thought would make a great table top, and I always have a few sheets of plywood around. All I was missing was the folding legs. After some searching I found some <a href="http://www.amazon.com/gp/product/B00LGBZC4G" target="_blank">Folding Shelf Bench Brackets</a>. I ordered 2 and installed them into a couple of wall studs in the garage and mounted a plywood top. I then cut and glued the strand bamboo flooring to the top to make a nice hard surface.</p>

<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/popup_workbench2.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>For a true folding workbench something like <a href="http://goo.gl/lXKgtQ" target="_blank">this</a> looks very cool. If I decide I need something larger and more heavy duty I may go that route, but I have other benches already. I was looking for something that could add another table/work surface in a pinch in that particular location in the garage.</p>

<p>Now I also have a nice place to put cold drinks during ping pong matches.</p>

<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/popup_workbench3.JPG"  style="height: 400px; display: block; margin: auto;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisiting Buyer's Agent app using React.js]]></title>
    <link href="http://fooqri.github.io/blog/2015/06/09/revisiting-buyers-agent-app-using-react-dot-js/"/>
    <updated>2015-06-09T11:45:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2015/06/09/revisiting-buyers-agent-app-using-react-dot-js</id>
    <content type="html"><![CDATA[<p>In a past post I showed a <a href="http://rwx.io/blog/2014/10/22/mobile-real-estate-app-version-1/">Mobile Real Estate App</a> that was built with Polymer. This time around I will revisit the app but instead use <a href="https://facebook.github.io/react/" target="_blank">react.js</a>. The <strong>Mobile Buyer&rsquo;s Agent</strong> is a simple web based application used to demonstrate a basic React.js mobile web app.The goal is to allows a real estate buyer&rsquo;s agent to deliver a personalized mobile app experience to their clients by adding data to a Google spreadsheet. The agent updates a Google spreadsheet, and the web app loads its data from the spreadsheet.</p>

<p><a href="http://www.poggr.com/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m9" target="_blank"><img src="https://s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent_1.png"></a></p>

<p>This is a demonstration of using a shared <em>Google Spreadsheet</em>  as the data source for a simple web based application. By using poggr.com and <a href="http://facebook.github.io/react/" target="_blank">React.js</a> it is extremely easy to create a web application like the <strong><em><a href="http://www.poggr.com/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m9" target="_blank">Mobile Buyer&rsquo;s Agent</a></em></strong>.</p>

<p>The <em>Real Estate Shopper List</em> Google spreadsheet contains properties the agent wishes to present in the app. The neighborhood column is associated with the dropdown box, and allows a simple grouping/categorization of properties. The agent also provides other features and details associated with the properties.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheets/d/1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8/pubhtml" target="_blank"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent2.png" ></a></p>

<p><strong>Note:</strong> if you duplicate the example spreadsheet you must remember to publish it so it can be accessed by the <em>Mobile Buyer&rsquo;s Agent</em> app. If you get an error it is likely you forgotto publish the spreadsheet. To publish a spreadsheet while viewing it, use the file menu on Google Docs and choose <em>&ldquo;publish to the web&rdquo;</em>, and follow the instructions.</p>

<h3>Trying your own spreadsheet</h3>

<p>If you publish your own copy of the spreadsheet you can easily substitute it in the app with a simple url parameter called <strong>sheetid</strong>.</p>

<p>For example if the link your are given when you plublish your spreadsheet is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://docs.google.com/spreadsheets/d/1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8/pubhtml</span></code></pre></td></tr></table></div></figure>


<p>Then your sheetid is <strong>1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8</strong>, and you can use it in this app by using a url with sheetid parameter as shown below:</p>

<p><code style="white-space: nowrap;">po.gg/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m8</code></p>

<p>This will substitue your spreadsheet for the default spreadsheet used in the app.</p>

<p>For info on the code take a look at the <a href="http://www.poggr.com/p-kz3NoHhgl:dbJMG3EjSneg" target="_blank">README</a> document.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a New Intel Edison]]></title>
    <link href="http://fooqri.github.io/blog/2015/02/18/seting-up-an-edison/"/>
    <updated>2015-02-18T12:42:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2015/02/18/seting-up-an-edison</id>
    <content type="html"><![CDATA[<p><img src="http://fooqri.github.io//s3.amazonaws.com/rwx-blog/IMG_4161.JPG"  style="height: 400px; display: block; margin: auto;"></p>

<p>The Edison is a tiny and amazing computer, and ideal prototyping tool for wearable and IoT experiments. Here are the steps I am currently following to set up the Edison.</p>

<h2>Flashing the Edison</h2>

<p>Like many developers I have Mac, Windows, and Linux laptops but I find that Linux is the best environment for flashing the Edison, even though I do most development on my Mac. I came to this conclusion after trying to recover an Edison with a lost password, the only platform that worked was Linux.</p>

<p>The first step is flashing the Edison. Follow <a href="https://communities.intel.com/docs/DOC-23200">Flashing Edison Linux</a>. You can also try <a href="https://communities.intel.com/docs/DOC-23193">Flashing Edison Mac</a>.</p>

<p>The only change I would recommend is to create a folder that contains the Edison images, and then unzip the downloaded folder into a sub directory named after the build number. Over time you may find yourself flashing to older or newer images based on the project needs.</p>

<h2>Setting up WiFi</h2>

<p>Sparkfun offers a great guide for <a href="https://learn.sparkfun.com/tutorials/edison-getting-started-guide#connecting-to-WiFi">Setting up WiFi</a> on the Edison. This takes only a few minutes and even if you don&rsquo;t plan to use WiFi in your projects it makes working with the Edison easier because you can use SCP and SSH to connect with the Edison over the network.</p>

<h2>Connect to Edison</h2>

<p>For OSX or Linux the best way to connect to the Edison is via SSH. On OSX you can use the name you gave the Edison in the step above. For example <em>ssh root@edison2.local</em> where <em>edison2</em> is the name you gave your Edison. On Linux you will use the Edison&rsquo;s IP address, for example <em>ssh root@10.0.1.12</em>.</p>

<h2>Using Emacs</h2>

<p>If you are an Emacs user then once WiFi is setup you can use <a href="http://www.emacswiki.org/emacs/TrampMode">Emacs Tramp</a> to work with files on the Edison. Just use <em>C-x C-f</em> as usual, but instead of a directory use <em>root@edison2.local</em> or use the ip address for Linux.</p>

<p>Emacs will present a directory of files on the Edison that you can open, or just keep typing the name for auto suggest feature. For example <em>root@edison2.local/home/root/notes.md</em>.</p>

<h2>Setup Bluetooth</h2>

<p>Bluetooth is available in the Edison, but in the default configuration is not enabled at boot. If you are using Bluetooth you will likely want to enable it on every reboot or power cycle.</p>

<h3>Enable Bluetooth at Boot</h3>

<p>Use the <strong>systemctl</strong> command to cause Bluetooth to start automatically</p>

<pre><code> systemctl enable bluetooth
</code></pre>

<h3>Create a BT startup script</h3>

<p>Create a script file with the following five lines (<em>/home/root/btup.sh</em>).</p>

<pre><code> #!/bin/sh
 /usr/sbin/rfkill unblock bluetooth
 /usr/bin/hciconfig hci0 up
 /usr/bin/hciconfig hci0 piscan
 /usr/bin/hciconfig hic0 sspmode 0
</code></pre>

<h3>Make the script executable</h3>

<pre><code> chmod +x /home/root/btup.sh
</code></pre>

<h3>Create a new service file (<em>/lib/systemd/system/btup.service</em>).</h3>

<pre><code> [Unit]
 Description=BTUP
 After=bluetooth.target
 Before=systemd-user-sessions.service
 [Service]
 Type=simple
 RemainAfterExit=true
 ExecStart=/home/root/btup.sh
 Environment="HOME=/home/root"
 WorkingDirectory=/home/root/
 [Install]
 WantedBy=multi-user.target
</code></pre>

<h3>Enable the service</h3>

<pre><code> systemctl enable /lib/systemd/system/btup.service
</code></pre>

<h3>Reboot the Edison</h3>

<pre><code> reboot
</code></pre>

<h2>Create a Backup</h2>

<p>Now is a good time to create a backup of the Edison that can be recovered if you need to return to a clean install. For example you may want to update nodejs, or install node modules, or even other drivers that may cause an issue you want to start over from.</p>

<p>Place a MicroSD card with at least 4GB of available space into the MicroSD slot on the dev kit board where the Edison is installed. Backup the Edison to an image file on the MicroSD. In the example below it is named <em>edison2_backup.img</em>. Make sure the file name has a <em>.img</em> extension. If you have a large MicroSD card you can store multiple backup images from multiple Edisons, making it quick and easy to recover each of them. It is wise to consider a consistent naming system.</p>

<pre><code> dd if=/dev/mmcblk0 of=/media/sdcard/edison2_bk.img
</code></pre>

<h2>Restoring an Edison from Backup</h2>

<p> If you need to restore the Edison from backup just reverse the process</p>

<pre><code> dd if=/media/sdcard/edison2_bk.img of=/dev/mmcblk0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo Caption Challenge - using Facebook Login, S3, and DynamoDb in browser app]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/23/photo-caption-challenge-using-s3-and-dynamodb-in-browser-app/"/>
    <updated>2014-10-23T13:18:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/23/photo-caption-challenge-using-s3-and-dynamodb-in-browser-app</id>
    <content type="html"><![CDATA[<p>One of the challenges of building small mobile web apps without a traditional back-end server is storing global state in a secure way. In my exploration of ways to store state I decided to build a very simple multi-player social app that allows players to participate in a simple photo challenge game. The game author specifies a <em>photo caption</em> and then invites friends to add photo responses that <em>most creatively</em> match the caption. The second feature is to allow people to vote on their favorite photo responses.</p>

<p><a href="http://fooqri.github.io//fooqri.poggr.com/peJE7qM0YUl" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/fooqri-poggs/peJE7qM0YUl/static/images/peJE7qM0YUl_screen.png"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>Such a game would typically require a server to support a few key behaviors:</p>

<ul>
<li><strong>player login</strong>: is needed to connect players with their uploaded photos, and also to limit their votes so as to keep voting fair.</li>
<li><strong>photo storage</strong>: photo upload and storage is needed to store the photos so they can be displayed when the page is loaded. In addition a back-end service is typically used to re-size uploaded images before storing them to reduce storage costs.</li>
<li><strong>global state</strong>: is generally provided by a database that stores information such as: which players have uploaded photos, and where the corresponding photos are located.</li>
</ul>


<p>There are many challenges to running a back-end server to support an app, including configuration, maintenance, and security. In the ideal case one could build all sorts of small fun apps without having to manage any such servers. With the <strong>Photo Caption Challenge</strong> app I explored using the following services instead of running an app server.</p>

<ul>
<li><strong>player login</strong>: I  used Facebook for player login as a way to differentiate players, and connect ids to votes and photos.</li>
<li><strong>photo storage</strong>: I used Amazon S3 for storing photos uploaded by players, and  used <em>canvas</em> and <em>canvas.toBlob()</em> (using <a href="https://github.com/blueimp/javascript-canvas-to-blob">JavaScript Canvas to Blob</a> polyfill) to re-size images and store them in a blob for upload to S3. Thus all image re-sizing is done in the client.</li>
<li><strong>global state</strong>: I used Amazon DynamoDB to provide state via a table that stores information about photo entries and votes.</li>
</ul>


<p>I  also used the Amazon IAM is the way to limit privileges from the client app to the data services (S3 and DynamoDB). For example you want the user to have write/delete access to only their information in the data services, but client API calls to the server can be manipulated, thus authentication information is critical to limiting privileges in accessing the data services.</p>

<p>IAM policies can specify an <em>identity provider</em> like Facebook to make sure to limit access based on current session identity information, and not the API request data. For example you can configure an IAM policy for S3 that secures S3 bucket privileges so that sub-folder privileges are connected to user identity. In the case of &ldquo;Photo Challenge&rdquo; the policy states any logged in Facebook user running the Photo Challenges app will be able to view photos in any sub-folder, but only upload, modify, or delete items that are in a folder that matches their identity provider&rsquo;s assigned userid. It also states that any user can create a folder in the bucket as long as the folder name matches their identity provider&rsquo;s assigned userid.</p>

<p>The Amazon IAM policy for DynamoDB works similarly. Any logged in Facebook user running the Photo Challenges app will be able to query the DB index for the current list of photo entries, but can only add/delete records that have a userId value that matches their identity provider&rsquo;s assigned userid. Thus a user can&rsquo;t spoof who added the record, it is connected to their userId or it is rejected by the IAM policy assigned to the DynamoDB table. For more information see <a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/FGAC_DDB.html">Fine-Grained Access Control for DynamoDB</a>.</p>

<h2>Conclusion</h2>

<p>In <a href="http://octopress.dev/blog/2014/10/22/mobile-real-estate-app-version-1/">Mobile Real Estate App</a> and <a href="http://octopress.dev/blog/2014/10/15/spreadsheet-driven-web-apps/">Spreadsheet Driven Web Apps</a> I  described a technique for using a Google Spreadsheet to provide web application data, but this works best when the application data is read only. For an app that requires both read, write, and query transactions, a database like DynamoDB is a great solution.</p>

<p>Like many examples on this blog, I built this app using <em><a href="http://www.poggr.com">poggr.com</a></em> because poggs are incredibly flexible and require zero configuration.  Use this app at <a href="http://fooqri.poggr.com/peJE7qM0YUl:dxJ4NmcMAK8x">fooqri.po.gg/peJE7qM0YUl</a> or if you have a poggr account you can clone <a href="http://www.poggr.com/#/projects/project/peJE7qM0YUl">this pogg</a> and use its configuration tool to set up Facebook, S3, IAM, and DynamoDB and have your version of the game running in less than 5 minutes. If you don&rsquo;t have an account you can still check out the pogg&rsquo;s <a href="http://fooqri.poggr.com/peJE7qM0YUl:dxkgN7qMCtLg">README</a> to learn more about how it was build and view the source documents.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Real Estate App - Version 1]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/22/mobile-real-estate-app-version-1/"/>
    <updated>2014-10-22T19:46:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/22/mobile-real-estate-app-version-1</id>
    <content type="html"><![CDATA[<p>I promised a few examples of spreadsheet driven apps. You may remember the <a href="http://rwx.io/blog/2014/10/15/spreadsheet-driven-web-apps/">Hipster List</a> was the first example. These are simple web apps that are initialized using data from a Google Spreadsheet once the user loads them in a browser. Using spreadsheets to keep app information current is easy for anyone. There is even a way for users to point the app at their own Google Spreadsheet if the app developer wants to turn feature that on.</p>

<p>The next example of a spreadsheet driven app (<em>below</em>) is the <strong><em>Mobile Buyer&rsquo;s Agent</em></strong> app. This may take a little time to load because it is an experiment, and thus not using a vulcanized Polymer library, so it is importing lots of individual library documents. Be patient and once cached in your browser it will be fast.</p>

<p><a href="http://fooqri.github.io//fooqri.poggr.com/pe16vKTbVLg::16" target="_blank"><img src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/screen1.png"  style="height: 400px; display: block; margin: auto;"></a></p>

<p>The idea is to create a mobile web app that can be used by buyers as they shop for a home. Once again the data is maintained in a Google spreadsheet, this time by the buyer&rsquo;s agent. The agent can add houses, home information, and notes to the spreadsheet and the buyer can use the app to view the information as they shop. This is an easy way for an agent to personalize their client experience.</p>

<p>Take a look at the <a href="https://docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdEhuM1gxY1g0ckwwWl9RSzNGTGQwemc&amp;usp=sharing#gid=4">spreadsheet</a> to see how information is organized. It allows the agent to add personalized title and notes to each house.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdEhuM1gxY1g0ckwwWl9RSzNGTGQwemc&usp=sharing#gid=4"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/spreadsheet.png"></a></p>

<p>The <a href="https://fooqri.poggr.com/pe16vKTbVLg:dgkE6vtp-4Ll::16">README</a> document provides  more details on how the app was built. Or <a href="https://fooqri.poggr.com/pe16vKTbVLg::16">try the app here</a>. I will likely provide a few updates to this app in the near future to make it a bit more interesting, but I though the first version showed a few nice features, and how to build them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[d3 charts - wrapping 'NVD3 Charts' in a web component]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/17/d3-charts-wrapping-nvd3-charts-web-component/"/>
    <updated>2014-10-17T06:39:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/17/d3-charts-wrapping-nvd3-charts-web-component</id>
    <content type="html"><![CDATA[<p>In my continued experiments with <a href="https://www.polymer-project.org/" target="_blank">Polymer</a>, I created a web component that wraps  <a href="http://nvd3.org/" target="_blank">NVD3</a> &ndash; a reusable chart library for  <a href="http://d3js.org/" target="_blank">d3.js</a>.
As part of the activity I ported all of the  <a href="http://nvd3.org/examples/index.html" target="_blank">NVD3 example charts</a> to a web component I am calling <em>&lt;goddip-charts></em>. The component is contained in a <a href="http://www.poggr.com/pekqyTpXDEe:deJoY70GdVx" target="_blank">pogg</a> on <a href="http://www.poggr.com/home/" target="_blank">poggr.com</a>, as this is where I do my experimenting and it allows me to code and serve the project documents in the one place.</p>

<iframe width="680px" height="380px" src="http://www.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::53"></iframe>


<p></p>

<p>The above chart is an iframe to <a href="http://www.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::53" target="_blank">this document</a> The actual element tag used is as follows:</p>

<pre><code> &lt;goddip-charts  
   class="small-chart-styles"
   chartType="bar"
   context="/pg1GXbi9MBx:deyDCclAEUg::53" 
   css="/pg1GXbi9MBx:dxkNM7ZicfBe::53" &gt;
 &lt;/goddip-charts &gt;
</code></pre>

<p>To view the uncompiled and unminified source see (<a href="http://source.poggr.com/pg1GXbi9MBx:dlym9bhp4Lx::49" target="_blank">html document source</a>, <a href="http://source.poggr.com/pg1GXbi9MBx:deyDCclAEUg::49" target="_blank">data document source</a>, and <a href="http://source.poggr.com/pg1GXbi9MBx:dxkNM7ZicfBe::49" target="_blank">style document source</a>).</p>

<p>The best way to learn about the <em>&lt;goddip-charts></em> component is to take a look at its <a href="http://www.poggr.com/pg1GXbi9MBx:dgJXG7boqzSe" target="_blank">README document</a>. This describes how to use each of the charts, reference data, add styling, etc. You can always view the component <a href="http://source.poggr.com/pg1GXbi9MBx:dlJkI7k9tBe" target="_blank">source</a>. If you have a <em>poggr.com</em> account you can view, clone, and edit <em>goddip-charts</em> using the <a href="http://project.poggr.com/pg1GXbi9MBx" target="_blank">poggr project UI</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Literate CoffeeScript]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript/"/>
    <updated>2014-10-15T16:53:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript</id>
    <content type="html"><![CDATA[<p>As an emacs/<a href="http://orgmode.org/" target="_blank">org-mode</a>/<a href="http://orgmode.org/worg/org-contrib/babel/" target="_blank">babel</a> user I have always been fascinated with the potential of <a href="http://en.wikipedia.org/wiki/Literate_programming" target="_blank">literate programming</a> and combining inline code in my notes. I have many org-mode documents that interactively execute code for various tasks and procedures. These tasks includes certain maintenance activities, or destructive operations I don&rsquo;t want to get wrong. I have an entire org document devoted to db maintenance, filled with Ruby code to execute complicated db queries and operations.  It is nice to see the example code inline in my notes, and be able to modify the code and execute it directly in my notes. This works especially well for checklist where calculations or actions are called for. You might even say org-mode was one inspiration for building <em><a href="http://www.poggr.com/home" target="_blank">poggr.com</a></em>; creating a browser based tool that is simple, flexible, and powerful for creating interactive and compelling documents that work in any web browser.</p>

<p>The potential of browser-based literate programming is why I find the idea of <em>Literate CoffeeScript</em> facinating. It is not just the idea of documenting code or even the idea of describing code in a blog post. It is the idea of creating flexible and effective browser based <em>task</em> and <em>tool</em> documents. The power in these types of documents is you see the code you are executing, which is extremely useful for programmer&rsquo;s notes. It seems literate CoffeeScript might have something to say about how to create browser-based interactive notes that include inline code, like emacs/org-mode/babel has done for emacs users.</p>

<p>Since <em><a href="http://www.poggr.com/home" target="_blank">poggr.com</a></em> supports compiling CoffeeScript into JavaScript  I decided to turn on literate CoffeeScript and give it a go to see if this is a legitimate way to combine code and blogging in a single pogg document.</p>

<h3>Poggr CoffeeScript Compilation</h3>

<p>The way poggr works is that when you save a <em>CoffeeScript</em> document <em>poggr</em> keeps both source code and compiled <em>JavaScript</em> code. Just like when you save a <em>markdown</em> document poggr saves both the source markdown and the compiled html. When a document is requested using a <em>poggid</em> in an http request, poggr will deliver the compiled code unless a query parameter is used to request source. This works out quite well in most cases, since the compiled version is what browsers are expecting (html, css, JavaScript). This model allows poggr to support other markup and languages like <em>less</em>, <em>scss</em>, <em>yaml</em>, etc to work similarly.</p>

<p><em>LitCoffeeScript</em> is unique in that compilation produces two documents (markdown &ndash;> html) and (CoffeeScript &ndash;> JavaScript). Thus, one challenge is knowing whether a document request is for the  html or JavaScript version. I felt compelled enough to experiment that I added a test case where adding a <strong>.js</strong> extention to a <em>poggid</em> will return the JavaScript, otherwise it will return the compiled html version of the document.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>&lt;script src="http://fooqri.github.io//www.poggr.com/peJo73gk0Nx:dxkfEl2RANx.js"&gt;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>I wanted to pick something fun to experiment with so I chose a game originally created by <em><a href="https://gist.github.com/macournoyer">Marc-André Cournoyer</a></em>.
in his <em><a href="https://gist.github.com/macournoyer/7357908" target="_blank">game.litcoffee</a></em> gist.</p>

<p>You can see my version of the  literate CoffeeScript post in action <a href="http://goddip.poggr.com/peJo73gk0Nx:dxkfEl2RANx" target="_blank">here</a>. What you will notice it the game is running as part of the post, and all the code is also embedded in the post. This may look like a normal code example post, but if you look at the  <a href="http://fooqri.github.io//source.poggr.com/peJo73gk0Nx:dxkfEl2RANx" target="_blank">source code</a> you will see at the end of the source document that the post actually loads the js version of itself. So by saving a literate CoffeeScript document you automatically get a blog post; in addition all of the fenced  CoffeeScript code is compiled into a JavaScript document.  Any changed inline code is re-compiled into an updated JavaScript document with each save. <strong><em>Mind Blown right!</em></strong></p>

<p>I can&rsquo;t see it replacing my emacs/org/babel workflow yet, but it certainly opens some possibilities for having a set of private online notes, experiments, and tools I can call up in any browser to edit and execute. One down-side is while emacs is mode-less in that editing and execution happen together, the browser model is built for view-only. Poggr is built on browser-based document editing, but viewing the rendered results is still a separate action. Although it is not exactly the same emacs/org-mode, there are cases where it is actually better. Emacs does not excel where rich visualization and rendering are beneficial, this is what the browser does best.</p>

<p>When I get a chance I will port a few of my org-mode notes over to literate CoffeeScript documents on poggr and make a note here when they are up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spreadsheet Driven Web Apps]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps/"/>
    <updated>2014-10-15T14:45:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps</id>
    <content type="html"><![CDATA[<p><a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e"><img src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/example_screen.png"></a></p>

<p>Using Google spreadsheets is a great way for a team to collaborate on a data set but it leaves a bit to be desired on presentation of the data. To that end I will be creating a series of fun examples showing how to build small interactive apps that utilize <em>Google Docs</em> and <em>Polymer</em> web components to quickly bring data to life. In this series I will be using a Google spreadsheet as the data source, but other data sources are possible, and I will get to those as well in future posts.</p>

<p>The first example is  <strong><em><a href="http://fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e">Hipster List</a></em></strong>, an app that shows cool places to visit in various cities. Check out the <strong><em><a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">README</a></em></strong> document for details on how this app is put together.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&usp=sharing#gid=0"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/spreadsheet_screen.png"></a></p>

<p>A little convention is used to make it work. Namely, I use a <a href="https://docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&amp;usp=sharing">Hipster Hot Spots</a> Google spreadsheet, where each city&rsquo;s data is represented by a tab in the spreadsheet. There is also a <em>key</em> tab that provides a list of all the cities in the spreadsheet and the tab id (<em>gid</em>) for each city&rsquo;s data. The app will load its data from the spreadsheet and populate the city drop-down list of <em>hot spots</em>, and display a map with markers for each <em>hot spot</em>. This was a fun first example, remember to checkout the <a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for code and explanation.</p>

<p><strong>Note</strong>: I enabled url fragment parameters so you can easily point the app at your own copy of the spreadsheet for testing. See the <a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for the how-to instructions. Feel free to copy the spreadsheet and try out the app with your own list of cities and <em>hot spots</em>.</p>

<p> Separating code and data is always beneficial, but there is something cool about connecting an app to a Google spreadsheet. There are many spreadsheet users who would like to have an app to visualize their data, but may not be up to the coding challenge yet. I think many small useful apps could be built this way;  I will pick a few to build in the next few weeks and discuss them here. I am using the <em><a href="http://fooqri.github.io//www.poggr.com/home">poggr.com</a></em> service for the example, which is a service I built just for these types of small quick apps that can rely on an external data service. It is basically working to merge interactive content creation and blogging into a single service.</p>

<p> Leave me a comment if you have an small spreadsheet driven app you would like me to build. If it seems reasonable I may add it to the list.</p>
]]></content>
  </entry>
  
</feed>
