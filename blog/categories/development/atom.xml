<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | ]]></title>
  <link href="http://fooqri.github.io/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2014-10-17T09:18:18-07:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoreData.SQLDebug for RubyMotion]]></title>
    <link href="http://fooqri.github.io/blog/2013/06/01/coredata-dot-sqldebug-for-rubymotion/"/>
    <updated>2013-06-01T12:23:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2013/06/01/coredata-dot-sqldebug-for-rubymotion</id>
    <content type="html"><![CDATA[<p>It is sometimes handy to turn on CoreData.SQLDebug in the simulator when debugging a Core Data issue. I have found the output to be very useful in finding the hard to find little bugs that pop-up between restkit and core data. It can also help find performance issues with the database.  Unfortunately there isn&rsquo;t any documentation for how to do this in RubyMotion. I found one solution that works to a degree. It requires installing the ios_sim app and forcing the simulator into CoreData.SQLDebug mode after the rubymotion build.</p>

<p>You will need to install ios_sim</p>

<pre><code>$ brew install ios-sim
</code></pre>

<p>Then add the following two line as the last lines in your RubyMotion rakefile</p>

<pre><code># Be sure to substitute your app name and make sure you are using
# the correct path to the app based on simulator version.
ios_sim = `which ios-sim`.strip
sh "#{ios_sim} launch build/iPhoneSimulator-6.1-Development/appname.app --args -com.apple.CoreData.SQLDebug 1"
</code></pre>

<p>This will open the simulator in CoreData.SQLDebug mode, and log debug information to the terminal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying out Pixate - CSS for iOS app Development]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/23/trying-out-pixate-css-for-ios-app-development/"/>
    <updated>2013-01-23T22:09:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/23/trying-out-pixate-css-for-ios-app-development</id>
    <content type="html"><![CDATA[<p>Recently I have been using RubyMotion for iOS development; I really  appreciate developing in Ruby, and prefer Emacs to Xcode. Compared to using interface builder, styling apps can be a challenge. It is possible to use RubyMotion with XIB files created in Xcode&rsquo;s Interface Builder, but I have been trying to avoid this. I am striving for a more web-app like design and development workflow.</p>

<p>I have been using <a href="https://github.com/rubymotion/teacup">teacup</a>, which takes a declarative approach to styling and uses a CSS-like DSL. Although I liked teacup, I had been anxiously awaiting the arrival of <a href="http://www.pixate.com/">Pixate</a> because of its support for CSS-based styling. Pixate became generally available this month, and I purchased a license. The license is $199, and although expensive, a small price compared to time saved if it works. Since I already do a lot of CSS work on the web side it seems like a nice way to leverage my CSS skills and experience. The Pixate team along with the RubyMotion team created a <a href="https://github.com/Pixate/RubyMotion-Pixate">RubyMotion-Pixate gem</a> that makes it easy to get Pixate working with RubyMotion.</p>

<p>After 2 days of coding I have my basic controllers in place as well as several TableViewControllers. I have used Pixate to style many of the elements. With Pixate you can style with four types of selectors:</p>

<ul>
<li>element type selector &ndash; Select a control by element name</li>
<li>universal selector &ndash; Select any control</li>
<li>class selector &ndash; Select a control by class name</li>
<li>id selector &ndash; Select a control by ID</li>
</ul>


<!--more-->


<p>It also supports attribute selectors and pseudo classes. See the <a href="http://cdn.pixate.com/docs/engine/ios/1.0/Pixate%20Engine%20for%20iOS%20Styling%20Reference.html">complete list</a> for more information on selectors and styling.</p>

<p>One really nice feature is the ability to set up Pixate to dynamically change your app in the simulator when you update the CSS. This is an awesome feature. To set it up add these two  <em>PXStylesheet</em> lines to your app_delegate.rb file near the end of the <em>application</em> method:</p>

<pre><code> def application(application, didFinishLaunchingWithOptions:launchOptions)
    ...
    PXStylesheet.styleSheetFromFilePath('path-to/default.css', withOrigin:0)
    PXStylesheet.currentApplicationStylesheet.monitorChanges = true  
    true
 end
</code></pre>

<p>I was only able to get it to work by providing the absolute path to the css file, so add your absolute path in place of <em>path-to</em> in the above method call. I will post if I figure out how to do a relative path, I hate putting in absolute paths.</p>

<p><strong>Warning</strong>: I found that Pixate 1.0.2 does not work properly on the device if these two statements are left in the app delegate when compiling for the device. If your styles are not being picked up on the device this may be the reason. To get around this during development I put in a test for simulator using the <em>Device.simulator?</em> method in <a href="https://github.com/rubymotion/BubbleWrap">Bubblewrap</a>,</p>

<pre><code> def setup_pixate_monitor 
   PXStylesheet.styleSheetFromFilePath('path-to/default.css', withOrigin:0)
   PXStylesheet.currentApplicationStylesheet.monitorChanges = true
 end
</code></pre>

<p>Then include this conditional call:</p>

<pre><code> setup_pixate_monitor if Device.simulator?
</code></pre>

<p>So far Pixate has mostly worked as expected, but there was one odd issue. I had expected that I could create zero-sized frames and allow CSS to style them to the correct size. For example creating a new label object might look like this.</p>

<pre><code> @name_label = UILabel.alloc.initWithFrame(CGRectZero)
 @name_label.styleId = 'name_label'
</code></pre>

<p>CGRectZero, a CGRect constant, will set the frame to size [0,0][0,0]. Then the CSS style definition below should set the frame size correctly.</p>

<pre><code> #name_label { 
   position:fixed;
   top              :20px;
   left             :5px;
   width            :300px;
   height           :30px;  
   font-size        :16px;
   font-align       :center;  
 } 
</code></pre>

<p>I would expect the frame to be set to [5,20][300, 30] when the application is run. Instead the frame remains set to [0,0][0,0], so the text in the label is not displayed in the interface. This [0,0][0,0] frame size is confirmed with REPL using the tree command that comes with the <a href="https://github.com/rubymotion/sugarcube">sugarcube gem</a>.</p>

<p>When I set the frame to a non-zero size when creating the UI object, then the CSS style is picked up and the frame size is set correctly by Pixate. Very odd, I am assuming this to be a bug, but maybe there was a reason to leave zero-sized frames unaltered by CSS. Typically CGRectZero frames are used to hide UI elements until they are ready to be used, or until the dimensions are known based on content.  If a CSS selector matched zero-sized frames I suppose this could lead to some unexpected behavior for iOS developers accustom to zero-sized frames not being displayed until the specifically resize them in code.</p>

<p>In the end I created a new global constant</p>

<pre><code> CSSRect = [0, 0], [1, 0] 
</code></pre>

<p>and this allows the CSS to do its job. So</p>

<pre><code> @name_label = UILabel.alloc.initWithFrame(CSSRect)
 @name_label.styleId = 'name_label'
</code></pre>

<p>allows me to create frames that are then altered to the correct size via CSS. I also found that using CGRectInfinite works as well. Basically it sets a huge rectangle but the CSS resizes it as expected.</p>

<p>The  <a href="https://github.com/Pixate/RubyMotion-Pixate">RubyMotion-Pixate gem</a> also adds REPL support for changing the style via REPL. This is handy, but I find the dynamic updating via the CSS file to be easier to use.</p>

<p>The Pixate Engine consists of two core technologies: a 2D graphics engine and a CSS styling engine. So far my focus has been using the CSS styling engine.  By using a styling rendering engine, design execution can be pushed to run-time. One of the benefits of this approach is the ability to dynamically modify the look of an app, which can be useful in user testing, including A/B testing. For this, Pixate allows CSS to be loaded via a URL, much like a web browser. I am sure there will be performance implications of this dynamic rendering approach, so this will also have to be explored as a cost versus the benefit of dynamic styling.</p>

<p>I really liked Colin Gray&rsquo;s ideas around teacup, and the rubyesque way it integrated with rubymotion.</p>

<pre><code> @search = subview(UITextField, :search)
</code></pre>

<p>It would be interesting if this syntax could be used with Pixate versus the less elegant:</p>

<pre><code> @search = UITextField.alloc.initWithFrame(CSSRect)
 @search.styleId = 'search'
</code></pre>

<p>I have only just begun to use Pixate, there may be possibilities for making the calls a bit more elegant without writing too many helpers.</p>

<p>I will add more posts as I learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean API on Heroku]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/17/lean-api-on-heroku/"/>
    <updated>2013-01-17T08:46:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/17/lean-api-on-heroku</id>
    <content type="html"><![CDATA[<p>We have recently been working on an iOS app that requires a backend service. In this case I was looking for something leaner, simpler, and faster than Rails since it was only an API for a mobile app, no web front-end. I wanted it to be very lean and scalable so we could make it through early user testing without spending a lot on servers. Ok, ideally without spending anything on servers; basically how much could I squeeze out of one Heroku worker.</p>

<p>After some investigation of the typical light weight ruby frameworks (Sinatra, Merb, etc) I stumbled upon <a href="https://github.com/intridea/grape">Grape</a>, a ruby API micro-framework. Grape uses a very simple DSL for defining APIs for your Ruby objects. Grape runs on <a href="https://github.com/postrank-labs/goliath">Goliath</a>, which is a non-blocking Ruby web server framework that uses Ruby fibers to simplify the handling of asynchronous requests. Goliath runs on the popular <a href="https://github.com/eventmachine/eventmachine">EventMachine</a> reactor. EventMachine is an event-driven Ruby library that works much like Node.js.</p>

<p>The <a href="https://github.com/intridea/grape">Grape</a> github page provides a great deal of information on getting started, and David Jones has a great <a href="https://github.com/djones/grape-goliath-example">example</a> project on GitHub demonstrating how to deploy a grape API on Heroku.</p>

<p>The DSL is really simple and I was able to wrap some ruby objects in a day and deploy it on Heroku. Here is an snippet of what the DSL looks like.</p>

<p><div><script src='https://gist.github.com/4555788.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>As you can see the Grape framework supports API versioning, and the DSL provides a simple way to define API endpoints by defining resources and then specifying the HTTP requests (get, post, put, delete) for that resource. Any Rails developer should feel comfortable with the paths, params, and routes syntax in Grape.</p>

<p>In this code snippet I show part of the API definition for two resources (missions &amp; players). This will mean the path for accessing these are <em>/missions</em> and <em>/players</em>. Because I specified <em>prefix &lsquo;api&rsquo;</em> at the top of the file, the actual path becomes <em>/api/missions</em> and <em>/api/players</em>. So for example the <em>get &ldquo;/:id&rdquo;</em> would correspond to a get request of /api/players/7E781305-777F-4044-9770-C7995585F540 where the UUID is a player id and would be available in the params[:id] variable.</p>

<p>I should also note that even though these are simple <em>get</em> requests Grape will expect a header to be set for the secret key(secretk), and also require an Accept header with the version, vendor info, and content type (json). The easiest way to test your API will be to use an app like <a href="http://goo.gl/daZ5Q">Postman</a> that makes it easy to formulating requests, setting headers, from your Chrome browser. Postman also allows you to save requests, and re-run them.</p>

<p>I happen to be using Mongo for this, but Grape supports most major DBs. I am only showing two get methods, my full definition supports CRUD for these objects, as well as a few common queries of the db. The error checking of the request is fairly straightforward. I am checking for an API key, but this would be replaced with an API key lookup function to validate the requestor. It is easy to respond with specific errors as you can see.</p>

<p>The terse <em>error!, unless</em> syntax makes the error handling code very readable. The request handling for these two examples are simple: I query a mongo collection for an id, then map that response onto objects, and then convert the objects to json. This looks funny since it is basically json-&gt;object-&gt;json since mongo returns json, but there is more that happens in the object mapping; the json from the db and the json from the object are not the same.</p>

<p>By requiring <em>mission.rb</em> and <em>player.rb</em> at the top of the file, I pull in my Mission and Player classes so they can be used in the map operation.   Try to ignore the lame <em>.first</em> operation, this was a bit of laziness in dealing with what is an array of one item resulting from the map operation. As with all Ruby, the output of the last operation is what is returned in the body of the response.</p>

<p>The DSL is very clean and makes API maintenance relatively easy.</p>

<p>A few other handy links:</p>

<ul>
<li><a href="https://github.com/postrank-labs/goliath">Grape Project</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups#!forum/ruby-grape">Grape Forum</a></li>
<li><a href="https://github.com/flyerhzm/newrelic-grape">NewRelic-Grape Gem Info</a> &ndash; NewRelic instrumentation for the Grape API DSL.</li>
<li><a href="https://github.com/djones/grape-goliath-example">Heroku example</a></li>
<li><a href="http://www.confreaks.com/videos/475-rubyconf2010-the-grapes-of-rapid">Grape Intro Video</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple state machine example]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/15/simple-state-machine-example/"/>
    <updated>2013-01-15T12:24:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/15/simple-state-machine-example</id>
    <content type="html"><![CDATA[<p>I have been investigating using the ruby <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem for a project. State machines can be very handy in simplifying code where objects move through various states. The <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem embeds state machine behavior into any class that uses it. My first test was to create a simple todo list example.  The todo list will include a main list that contains items and sublists.  This allows a way to organize items easily into sublists.</p>

<p>A simple way to do this is to declare two classes <em>List</em> and <em>Item</em> and allow an object of class <em>List</em> to contain a list of <em>Lists</em> and a list of <em>Items</em>. This approach allows a flat list with many items, or a hierarchical list with top-level items, but also sub-lists that contain their own items.</p>

<p>In addition to lists and items, I want is to track whether I have completed all of the items in a list. In the case of a hierarchical list this means all items of sub-lists as well. Thus in addition to lists and items, we need to track whether items and lists are in progress or completed.</p>

<p>The next step is deciding on the states of the two object types. For my example, I decided:
* a list will have an initial state of <em>available</em>, and will transition to state <em>started</em> when the first item on the list is completed. When all items and sublists are <em>completed</em> the list will move to the state <em>completed</em>.
* an item will have an initial state of <em>available</em> and will transition to <em>completed</em> when the item is finished.</p>

<p>Finally I want to inform the user when:
* an item is completed
* a list is completed
* the project is completed (all items and sublists are completed)</p>

<p>Here is a quick example of the code to meet these requirements:</p>

<p><div><script src='https://gist.github.com/4549146.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>As you can see there is a rich environment for embedding behavior, including adding it in the <em>state</em> definitions, adding it using the <em>before_transition</em> method, and adding it using the <em>after_transition</em> method. You can also define methods inside the state definition so you can extend the functionality of a state.</p>

<p>Now if you load this example in IRB you can play with the lists and items like so:</p>

<pre><code> load "list_example.rb"
 list = List.new("Groceries", "Get some groceries")
 wf = list.add_list("Whole Foods", "Get some groceries from Whole Foods")
 milk = list.add_item("Milk", "2% Milk")
 strawberries = wf.add_item("Strawberries", "Ripe organic Strawberries"))
 oranges = wf.add_item("Oranges", "Ripe mandarine oranges")

 strawberries.finish 
 =&amp;gt; finished item Strawberries

 oranges.finish  
 =&amp;gt; finished item Oranges
 =&amp;gt; congrats on completing list Whole Foods

 milk.finish
 =&amp;gt; finished item Milk
 =&amp;gt; congrats on completing project Groceries
</code></pre>

<p>This was a really simple example, but shows how easy it is to create classes that embed state machines. For more check out the <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem.</p>

<h3>State Diagrams</h3>

<p>The library also allows you to generate graphs of the states and transitions in each class. For example:</p>

<p>create a Rakefile.rb</p>

<pre><code> require 'tasks/state_machine'
 require './list_example.rb
</code></pre>

<p>Then in terminal execute:</p>

<pre><code> rake state_machine:draw CLASS=List 
</code></pre>

<p>For the <em>List</em> class shown above this will generate a png file named <em>List_list_state.png</em> that looks like the image below.</p>

<p><img src="http://media.tumblr.com/d78e332b4656b62dec36c2a2d2408a82/tumblr_inline_mgqav0Q8uW1qz562v.png" alt="" /></p>

<p>The <em>List</em> class is very simple so the diagram is also simple. In the case of my project there are many states and more complicated transitions between states so the diagram can be very handy to visualize what is happening when  debugging a strange transition,</p>

<h3>Wrapup</h3>

<p>This todo list example is very simple but it allows exploring the basic features of the <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem, and demonstrates how simple it is to add state machine functionality to classes.  If a class you are designing has variables that keep state, and you are triggering behaviors when those variables change, then a state machine will likely be a more clean approach to organizing behavior in your class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring: making master programmers]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/14/refactoring-making-master-programmers/"/>
    <updated>2013-01-14T16:34:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/14/refactoring-making-master-programmers</id>
    <content type="html"><![CDATA[<p>There is often a tension between product management and engineering when it comes to time spent adding new features vs. time spent in code refactoring.  One could even explain this in terms of top line vs bottom line descriptions. Features mean sales, codebase is an asset, and poor code quality is a liability that affects cost and thus profit. Sloppy, risky, or fragile code is even called &ldquo;technical debt&rdquo; in many circles. This tension between features and code quality has always been a tightrope walk for any successful software or Internet company. Starve features and you kill sales, ignore expanding bloat and you will never win a sprint, let alone the marathon of staying relevant.</p>

<p>But there is a lot more to refactoring than code quality. In this post I wanted to mention one that is often overlooked: <em>&ldquo;refactoring makes good coders into master coders.&rdquo;</em>  The best lessons come from revisiting your mistakes and improving them, but without refactoring the revisiting is limited to quick fixes to limit the impact of a bad architecture, design, or implementation. Yes we can learn from our mistakes by trying different approaches on future projects, but the problems are ever changing, and thus the learnings are not as clear. I have always found I learned so much more as a designer and a developer by revisiting a problem with a new level of experience to draw from.</p>

<p>Design has been more fortunate regarding the opportunity for refactoring; good design organizations understand how much can be learned by refactoring a design and thus fight hard to allow for it. Development has often not been as successful in making the case. I wonder if the cost analysis could be changed if executives understood that refactoring actually significantly improved two of the most important assets at a software company: the code base and the engineering talent. Then it becomes a more interesting decision versus a simple weighing of new features vs improved quality.</p>

<p><img src="http://media.tumblr.com/7095223771e3c38939367f18458726e1/tumblr_inline_mgmwbwyolq1qz562v.jpg" alt="image" />Bull</p>

<p>I got to thinking about this looking at Picasso&rsquo;s Bull series.  This is an excellent example of a master working through a problem to develop the most elegantly simplified expression of the subject. To become a master, one must work through a problem incrementally and always looking for elegant ways to improve, to simplify the end expression of the solution. Even for a competent coder, it is not always apparent what is elegant without seeing the real life consequences of chosen approaches. Whether the approach makes the code fragile, bloated, or unfriendly, it is only through the experience of trying to grow a code base that these issues can be truly understood. Under the right conditions refactoring provides a sort of express lane  to becoming a master developer. This is very difficult if you are never allowed to truly revisit a subject after completing the first expression of the solution. I like the &ldquo;Bull&rdquo; example because it is how I think of elegant design and development, just enough to represent the solution and no more, anything else is bloat that will be nothing but cost later. Through refactoring, a developer can develop insights, skills, and techniques more quickly by addressing a well understood problem from a more experienced perspective.  Practice make perfect. If not the code, maybe the coder.</p>
]]></content>
  </entry>
  
</feed>
