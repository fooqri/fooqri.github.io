<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opinion | ]]></title>
  <link href="http://fooqri.github.io/blog/categories/opinion/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2014-10-24T11:42:54-07:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The three c's]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/21/the-three-cs/"/>
    <updated>2013-01-21T10:26:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/21/the-three-cs</id>
    <content type="html"><![CDATA[<p>I really enjoyed <a href="http://www.networkworld.com/community/blog/tony-fadell-unique-nature-apples-design-process">this interview</a> with Tony Fadell on the unique nature of Apple&rsquo;s design process. The discussion about project abandonment percentages is incredibly important, and often overlooked in large companies. In many cases abandonment is a financial decision related to either real or opportunity costs associated with launching a product. People who have never worked for a large consumer products company likely have no idea how many products are cancelled just before launch because of the incredible cost in launching a product into the market.</p>

<p>Tony makes an amazing point about the toll such high cancellation rates have on employees at a company, and on the quality of the products the company ships. The inverse is that high commitment to ship products that pass key milestones leads to better employee commitment.</p>

<blockquote><p>&ldquo;When you’re in a culture that has a point of view, and drives to launch everything it does, you know you’re on the hook and you better bring your best game every time,&rdquo; Fadell explained.</p></blockquote>

<p>Tony contrasts his experience at Apple with his experience at Philips:</p>

<blockquote><p>Fadell explained that a key and yet often overlooked difference between Apple and other tech companies is that Apple ships 99% of the products that pass certain internal milestones. By way of contrast, during Fadell&rsquo;s tenure at Philips &ndash; where he was charged with overseeing the company&rsquo;s audio strategy &ndash; the iPod guru noted that Philips would axe 9 projects out of 10, even if a particular product was about to ship.</p></blockquote>

<p>I don&rsquo;t think large companies have a metric for tracking the number and impact of cancelled projects. In my experience executive teams wanted to forget cancellations as quickly as possible and move on. They considered the cost to be in the past, and by having cancelled the project they had cut any ongoing cost.  But as Tony points out, there are ongoing costs, just not costs that have their own column on a balance sheet or scorecard. In my experience it was clear &hellip; the impact of cancellations were cumulative and devastating.</p>

<p>The importance of commitment is actually one of the 3 c&rsquo;s I use when evaluating a project: <em>Clarity</em>, <em>Competency</em>, and <em>Commitment</em>. Over the years I have found these to be the key pieces of early stage information that will best predict the success of a project. Tony&rsquo;s pont about commitment is that it isn&rsquo;t only about commitment to a project, it is about the culture of commitment in an organization. I like this point, and I imagine there is a corollary for organizational clarity and competency. Below are a few notes related to project level evaluation of the 3 c&rsquo;s</p>

<!--more-->


<p><strong>Clarity</strong></p>

<p>Clarity is an evaluation of how clear the goals are for the product, and how well understood the product is.</p>

<p>For example:</p>

<ul>
<li>A project to enhance a successful existing product with incremental features likely has very high clarity.</li>
<li>A project to move a successful product through a major transition will likely have medium clarity, but in some cases will have low clarity if the product manager and the team have different ideas about product direction.</li>
<li>A project to improve an unsuccessful product is usually medium to low clarity. If you are lucky you understand what went wrong, but lack of clarity is often the reason it failed in the first place.</li>
<li>A new product is usually low clarity, but if you have a great product manager it may be medium clarity to high clarity.</li>
<li>A new product in a new market is often low clarity and may even be disguised as medium to high clarity because the teams reviewing the product have little experience in the market. By this I mean the product brief will use language that sounds high clarity, but market experts would easily identify the brief as too vague. This is where competency and clarity overlap early in a project.</li>
</ul>


<p>My first task was always to make sure there was a plan in place to address any clarity issues immediately. From my experience without such a plan and milestones for high clarity, teams often started to build the wrong product, or multiple wrong products. If the team cannot agree on what the product really is, it will certainly fail. New products could achieve medium to high clarity. The key step is to identify clarity as an issue and put a plan in place to provide good clarity early in the project. I have seen many product requirements documents that were very detailed, but no two team members would describe the same product when asked what the product was. Providing detail  is not the same as providing clarity.</p>

<p><strong>Competency</strong></p>

<p>One of the other key issues in the success of a project is competency. In a large company design, and engineering <em>resources</em> tend to be plugged in to a project primarily based on their availability. There is an idea of a performance band with some people regularly performing better than others, but rarely a deep understanding of the individual competencies of  team members. Having directed both engineering and design teams, and worked closely with product management for many years I have come to see that individual competencies play a key role in project success; a role that is rarely reflected in evaluations or performance rankings. Evaluations rarely measure competency. For an interesting take on the fallacy of skills in success see <a href="http://www.amazon.com/The-Success-Equation-Untangling-Investing/dp/1422184234">The Success Equation: Untangling Skill and Luck in Business, Sports, and Investing</a></p>

<p>Here I look for a match in competency for the product needs, but also for how well the team works in the particular product context. How much experience does this team have defining and launching a new product? Has the lead engineer designed anything at this scale before? Many projects fail because a key competency is lacking on the product team.</p>

<p><strong>Commitment</strong></p>

<p>This is what Tony is referring to in his interview, how much commitment is there for this product? This refers to team commitment as well as executive commitment. In my experience, commitment issues fall into a few categories.</p>

<p><em>Market Issues</em></p>

<p>It is sometimes the case, especially in technology, where the market is moving so fast projects become obsolete before they are completed. This leads to high cancellation rates. These cases are about risk management, and understanding that the market evolution rate is a key issue. For example having a 24 month product cycle in a rapid innovation market may be taking on a lot of risk. If you can&rsquo;t move faster, maybe find a market that better matches your organizational delivery capabilities.</p>

<p><em>Structural Commitment Issues</em></p>

<p>In some cases a company is trying to do too many things, and commitment is a structural issue. I suspect Tony&rsquo;s characterization of Philips false into the structural definition. In these cases it is important to force prioritization and work with executives to understand that doing fewer things better will actually result in shipping not only better products, but more products. It can seem counter-intuitive, but I think Tony&rsquo;s description above shows how this has been proven at Apple. Less SKU&rsquo;s more volume.</p>

<p><em>Project Commitment Issues</em></p>

<p>I often found that when project comitment was low, it was low in very specific ways. Here are a few examples:</p>

<ul>
<li><p>Low hanging fruit &ndash; Many projects came across my desk as the so-called low-hanging fruit project. These are projects that are so low cost and high value that they seem obviously high-commitment on the surface; they often originate in an executive review meeting. The main issue here is that no one questions them, so their clarity is usually quite low, and their commitment falsely high. Usually as clarity rises even a small amount, commitment collapses because the actual project could never deliver on the low hanging fruit mirage that came out of a thirty minute executive discussion.</p></li>
<li><p>The magic mirror &ndash; Another class of projects with commitment issues were the magic mirror projects. These are projects where whomever is looking at the projects sees what they want to see, and ignores everything else. These types of projects are the most dangerous because they are usually multi-headed beasts that are trying to simultaneously serve many masters.  Their commitment is based in company politics and thus commitment can shift or disintegrate very quickly.</p></li>
</ul>


<p>Given my team&rsquo;s success was based solely on shipping successful products my most important task was usually at the early phase of projects, and mostly making sure that projects scored high on their combined CCC levels.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern problems vs logic problems]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/18/pattern-problems-vs-logic-problems/"/>
    <updated>2013-01-18T11:48:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/18/pattern-problems-vs-logic-problems</id>
    <content type="html"><![CDATA[<blockquote><p>Suppose three men can paint three fences in three hours. How long would it take one man to paint one fence?</p></blockquote>

<p>I ran across this interesting problem in <a href="http://www.amazon.com/The-Joy-Guided-Infinity-ebook/dp/B006R8PL7G/ref=tmm_kin_title_0">&ldquo;The Joy of x: A Guided Tour of Math, from One to Infinity,&rdquo;</a> a very accessible and interesting tour of mathematics.</p>

<p>It turns out most people quickly answer “one hour.”  As Strogatz opines,</p>

<blockquote><p>The words themselves nudge you that way. The drumbeat in the first sentence— three men, three fences, three hours— catches your attention by establishing a rhythm, so when the next sentence repeats the pattern with one man, one fence, ____ hours, it’s hard to resist filling in the blank with “one.” The parallel construction suggests an answer that’s linguistically right but mathematically wrong.</p></blockquote>

<p>The correct answer is three hours. It is obvious if you imagine each person painting their own fence for three hours. Remove two people and two fences and you are left with one person, still painting their one fence for three hours, as before.</p>

<p>What struck me about this problem is that it is an incredibly simple, concrete, and visual example of how our brains try to match patterns, but more importantly the side effect that occurs when a pattern is matched. Neuroscience studies suggest that dopamine (a neurotransmitter associated with pleasure) is released when we solve a problem, thus giving us a biological explanation for that wonderful feeling we get when we have solved a problem.</p>

<p>This made me wonder, does our brain perhaps release dopamine when we solve the faux pattern matching problem and <em>tricks</em> us into thinking we solved the actual logic problem? Thus we quickly blurt out the wrong answer.  After all, we have spent a lifetime feeling the dopamine rush when we believe we have the answer to a problem. Strogatz&rsquo;s observation about this particular word problem having two solutions (a pattern solution, and a logic solution) is very interesting, and is likely very related to a number of <a href="http://en.wikipedia.org/wiki/List_of_biases_in_judgment_and_decision_making">Cognitive Biases</a>. It is perhaps valuable to think about this explicitly when considering information:</p>

<ul>
<li>What is the pattern problem being suggested?</li>
<li>What is the logic problem being suggested?</li>
</ul>


<p>And make sure you have the answer the right question when you feel that first burst of dopamine show up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creativity Booster: Get a dog.]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/17/creativity-booster-get-a-dog/"/>
    <updated>2013-01-17T12:47:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/17/creativity-booster-get-a-dog</id>
    <content type="html"><![CDATA[<p>It probably sounds specious, but I have found having a dog around has made me both more productive and more creative. The evidence for this claim is the number of daily messages I post to our team message board that start with the phrase &ldquo;While I was out walking the dog I had this idea&hellip;.&rdquo;</p>

<p>Before getting a dog I would get sucked into a problem and become obsessed with solving it, the kind of linear obsession that leaves no room for creative leaps. What is needed is to allow the problem to marinate in my subconscious, to facilitate the unexpected synaptic connections that occur when you finally let your mind relax. The problem is, obsession with solving the problem makes this type of relaxed mind difficult and leaps of creativity less frequent. I am sure with practice one could recognize the symptoms and use some type of mediation exercise, but for me the answer is walking the dog. The pattern repeats regularly &hellip; I hit a nasty bug or design conundrum, get stuck, and then take the dog out for 15-20 minutes, and the answer suddenly presents itself.</p>

<p>For me, dog walking seems to engage the kind of subconscious pattern matching that provides the keys to unlock many problems. <a href="http://en.wikipedia.org/wiki/Graham_Wallas">Wallas</a> would have called this the <a href="http://en.wikipedia.org/wiki/Creativity#Incubation">incubation</a> phase of creativity. I think of it as a cousin to Mihály Csíkszentmihályi&rsquo;s concept of the <a href="http://en.wikipedia.org/wiki/Flow_(psychology">flow</a>) mental state. This seems to be validated by Nardi&rsquo;s <a href="http://www.youtube.com/watch?v=MGfhQTbcqmA">work</a> on the neuroscience of personality. Specifically, the brain imaging results where he describes the delta state in terms of Csíkszentmihályi&rsquo;s flow, but adds that &ldquo;also on occasion when we are copacetic, open to whatever comes next.&rdquo; This is a perfect description of my mental state on a walk with the dog. I feel close to that feeling of flow, but not quite the same &mdash; an approximation. But it seems to do the trick. As a side note, Nardi’s brain imaging results of people watching TV shows up as black; similar to a deep non-dreaming sleep. So TV is not so good for creativity &hellip; just saying.</p>

<p>I don&rsquo;t find that walking alone or with another person works as well. I wonder if it is the non-conversational interactions with the dog, just enough interaction to get me to stop focussing on the issue, but not so much that my mind is focussed on keeping up a conversation with someone else. Whatever the reason, it works; almost always presenting a promising new direction, if not an outright answer.</p>

<p>This is my muse, Archer, the retired racing greyhound.</p>

<p><img src="http://media.tumblr.com/cfdcc46c180984c7ab7e3d43cb14a116/tumblr_inline_mgs53cHq981qz562v.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring: making master programmers]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/14/refactoring-making-master-programmers/"/>
    <updated>2013-01-14T16:34:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/14/refactoring-making-master-programmers</id>
    <content type="html"><![CDATA[<p>There is often a tension between product management and engineering when it comes to time spent adding new features vs. time spent in code refactoring.  One could even explain this in terms of top line vs bottom line descriptions. Features mean sales, codebase is an asset, and poor code quality is a liability that affects cost and thus profit. Sloppy, risky, or fragile code is even called &ldquo;technical debt&rdquo; in many circles. This tension between features and code quality has always been a tightrope walk for any successful software or Internet company. Starve features and you kill sales, ignore expanding bloat and you will never win a sprint, let alone the marathon of staying relevant.</p>

<p>But there is a lot more to refactoring than code quality. In this post I wanted to mention one that is often overlooked: <em>&ldquo;refactoring makes good coders into master coders.&rdquo;</em>  The best lessons come from revisiting your mistakes and improving them, but without refactoring the revisiting is limited to quick fixes to limit the impact of a bad architecture, design, or implementation. Yes we can learn from our mistakes by trying different approaches on future projects, but the problems are ever changing, and thus the learnings are not as clear. I have always found I learned so much more as a designer and a developer by revisiting a problem with a new level of experience to draw from.</p>

<p>Design has been more fortunate regarding the opportunity for refactoring; good design organizations understand how much can be learned by refactoring a design and thus fight hard to allow for it. Development has often not been as successful in making the case. I wonder if the cost analysis could be changed if executives understood that refactoring actually significantly improved two of the most important assets at a software company: the code base and the engineering talent. Then it becomes a more interesting decision versus a simple weighing of new features vs improved quality.</p>

<p><img src="http://media.tumblr.com/7095223771e3c38939367f18458726e1/tumblr_inline_mgmwbwyolq1qz562v.jpg" alt="image" />Bull</p>

<p>I got to thinking about this looking at Picasso&rsquo;s Bull series.  This is an excellent example of a master working through a problem to develop the most elegantly simplified expression of the subject. To become a master, one must work through a problem incrementally and always looking for elegant ways to improve, to simplify the end expression of the solution. Even for a competent coder, it is not always apparent what is elegant without seeing the real life consequences of chosen approaches. Whether the approach makes the code fragile, bloated, or unfriendly, it is only through the experience of trying to grow a code base that these issues can be truly understood. Under the right conditions refactoring provides a sort of express lane  to becoming a master developer. This is very difficult if you are never allowed to truly revisit a subject after completing the first expression of the solution. I like the &ldquo;Bull&rdquo; example because it is how I think of elegant design and development, just enough to represent the solution and no more, anything else is bloat that will be nothing but cost later. Through refactoring, a developer can develop insights, skills, and techniques more quickly by addressing a well understood problem from a more experienced perspective.  Practice make perfect. If not the code, maybe the coder.</p>
]]></content>
  </entry>
  
</feed>
