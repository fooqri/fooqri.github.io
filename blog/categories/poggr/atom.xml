<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: poggr | ]]></title>
  <link href="http://fooqri.github.io/blog/categories/poggr/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2014-10-16T06:56:03-07:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fun with Literate Coffeescript]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript/"/>
    <updated>2014-10-15T16:53:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/fun-with-literate-coffeescript</id>
    <content type="html"><![CDATA[<p>As an emacs/org-mode user I have always been enamored with the possibility of combining inline code in my notes. I actually have a number of org-mode files that interactively execute code for procedures where I may go long periods of time between use. This includes certain maintenance activities, or destructive operations I don&rsquo;t want to get wrong. It is nice to see the example code inline in my notes, and be able to modify the code and execute it directly in my notes. This works especially well for checklist types of notes where calculations or actions are called for.</p>

<p>That is why I find the idea of <em>Literate Coffeescript</em> facinating. It is not just the idea of documenting code or even the idea of describing code in a blog post. It is the idea of creating flexible and effective <em>tool</em> documents that run in a web browser. The issue with these types of documents is keeping the instructions and code in sync, and it seems literate coffeescript might have something to say about that. The fact that the code is visible also makes for a nice teaching tool, especially for small functions where data manipulation or transformation tools are concerned. I often wonder how many lives map and reduce functions could change if non-programmers could just learn to use these two functions on their data.</p>

<p>Since <em><a href="//www.poggr.com/home">poggr.com</a></em> supports compiling coffeescript into javascript  I decided to turn on litcoffeescript and give it a go to see if this is a legitimate way to combine code and blogging in a single pogg document.</p>

<h3>Poggr Coffeescript Compilation</h3>

<p>The way poggr works is that when you save a coffeescript document poggr keeps both source code and compiled javascript code. Just like when you save a markdown document poggr saves both the source markdown and the compiled html. When a document is requested in an http request poggr will deliver the compiled code unless a query parameter is used to request source. This works out quite well in most cases, since the compiled version is what browsers are expecting (html, css, javcript). This model allows other markup like scss, yaml, etc to work similarly.</p>

<p><em>Litcoffeescript</em> is unique in that the compiled output is both html and javascript, and in some cases you may want the javascript without the html. I felt compelled enough to experiment that I added a test case where adding a <strong>.js</strong> extention will return the javascript, otherwise it will return the compiled html version of the document.</p>

<p>```
&hellip;</p>

<p><script src="http://fooqri.github.io//www.poggr.com/peJo73gk0Nx:dxkfEl2RANx.js">
&hellip;
```</p>

<p>I wanted to pick something fun to experiment with so I chose a game originally created by <em><a href="https://gist.github.com/macournoyer">Marc-Andr√© Cournoyer</a></em>.
in his <em><a href="https://gist.github.com/macournoyer/7357908">game.litcoffee</a></em> gist.</p>

<p>You can see my version of the  litcoffeescript post in action <a href="http://goddip.poggr.com/peJo73gk0Nx:dxkfEl2RANx">here</a>. What you will notice it the game is running as part of the post, and all the code is also embedded in the post. This may look like a normal code example post, but if you look at the <a href="//source.poggr.com/peJo73gk0Nx:dxkfEl2RANx">source code</a> you will see at the end of the source document that the post actually loads the js version of itself. So by saving a litcoffeescript document you automatically get a blog post and all of the fenced  coffeescript code is compiled into a javascript document.  <strong>Mind Blown right!</strong></p>

<p>So basically any change to the inline code automatically re-compiles the js document with each save. I can&rsquo;t see it replacing emacs/org/babel for me but it certainly opens some possibilities for single page interactive blog posts where displaying the code is important.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spreadsheet Driven Web Apps]]></title>
    <link href="http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps/"/>
    <updated>2014-10-15T14:45:00-07:00</updated>
    <id>http://fooqri.github.io/blog/2014/10/15/spreadsheet-driven-web-apps</id>
    <content type="html"><![CDATA[<p><a href="http://fooqri.github.io//fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e"><img src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/example_screen.png"></a></p>

<p>Google spreadsheets is a great way for a team to collaborate on a data set but it leaves a bit to be desired on presentation of the data. To that end I will be creating a series of fun examples showing how to build small interactive apps that utilize <em>Google Docs</em> and <em>Polymer</em> web components to quickly bring data to life. In this series I will be using a Google spreadsheet as the data source, but other data sources are possible, and I will get to those as well in future posts.</p>

<p>The first example is  <strong><em><a href="http://fooqri.poggr.com/pgyUYTfcMUe:dgyFhkQ9M8e">Hipster List</a></em></strong>, an app that shows cool places to visit in various cities. Check out the <strong><em><a href="//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">README</a></em></strong> document for details on how this app is put together.</p>

<p><a href="http://fooqri.github.io//docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&usp=sharing#gid=0"><img class="spreadsheet-screen" src="http://fooqri.github.io//s3.amazonaws.com/goddip-poggs/pgyUYTfcMUe/spreadsheet_screen.png"></a></p>

<p>A little convention is used to make it work. Namely, I use a <a href="https://docs.google.com/spreadsheet/ccc?key=0Ahy9ODkMXc1GdHRaTlI3Y2EydllTa2NsRjlxRVhMRlE&amp;usp=sharing">Hipster Hot Spots</a> Google spreadsheet, where each city&rsquo;s data is represented by a tab in the spreadsheet. There is also a <em>key</em> tab that provides a list of all the cities in the spreadsheet and the tab id (<em>gid</em>) for each city&rsquo;s data. The app will load its data from the spreadsheet and populate the city drop-down list of <em>hot spots</em>, and display a map with markers for each <em>hot spot</em>. This was a fun first example, remember to checkout the <a href="//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for code and explanation.</p>

<p><strong>Note</strong>: I enabled url fragment parameters so you can easily point the app at your own copy of the spreadsheet for testing. See the <a href="//fooqri.poggr.com/pgyUYTfcMUe:dxJgUYaGcGUl">readme document</a> for the how-to instructions. Feel free to copy the spreadsheet and try out the app with your own list of cities and <em>hot spots</em>.</p>

<p> Separating code and data is always beneficial, but there is something cool about connecting an app to a Google spreadsheet. There are many spreadsheet users who would like to have an app to visualize their data, but may not be up to the coding challenge yet. I think many small useful apps could be built this way;  I will pick a few to build in the next few weeks and discuss them here. I am using the <em><a href="//www.poggr.com/home">poggr.com</a></em> service for the example, which is a service I built just for these types of small quick apps that can rely on an external data service. It is basically working to merge interactive content creation and blogging into a single service.</p>

<p> Leave me a comment if you have an small spreadsheet driven app you would like me to build. If it seems reasonable I may add it to the list.</p>
]]></content>
  </entry>
  
</feed>
