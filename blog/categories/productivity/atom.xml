<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | ]]></title>
  <link href="http://fooqri.github.io/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2014-10-17T09:21:33-07:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nvALT and Emacs]]></title>
    <link href="http://fooqri.github.io/blog/2013/03/04/nvalt-and-emacs/"/>
    <updated>2013-03-04T11:19:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/03/04/nvalt-and-emacs</id>
    <content type="html"><![CDATA[<p>In a previous post <a href="http://www.pragmaux.com/post/38158334752/wiki-searchable-notes">wiki-searchable-notes</a> I mentioned that I was using nvALT for note taking. nvALT is a very simple way to create and search notes and store them in flat files that can be used by other tools. One use is publishing to a github wiki, today I will discuss another.</p>

<p>I am an Emacs user and often found myself dropping out of emacs to find a note I needed in nvALT. I went looking for the best way to index and access my nvALT notes inside Emacs, and found the very cool emacs script called <a href="http://jblevins.org/projects/deft/">Deft</a> that works with <a href="http://jblevins.org/projects/markdown-mode/">EMacs Markdown Mode</a> to create the equivalent of nvALT inside of emacs. It can be configured to work with the nvALT repository so they work well together.</p>

<p>A few pointers&hellip;</p>

<ul>
<li>If you use markdown in nvALT as I do, follow the instructions to install <a href="http://jblevins.org/projects/markdown-mode/">markdown-mode</a> via git clone.</li>
<li>Follow the instructions to install  <a href="http://jblevins.org/projects/deft/">Deft</a> via git clone. It is an active repository, so clone makes keeping up-to-date easy. Also update init.el to require the deft.el script.</li>
<li>For markdown and nvALT using the flat file config (see  <a href="http://www.pragmaux.com/post/38158334752/wiki-searchable-notes">wiki-searchable-notes</a> for flat file config) you need to add a few additional expressions in init.el. Add these four lines as discussed on the deft documentation.
<code>
(setq deft-extension "md")
(setq deft-directory "~/Development/wikis/Notes.wiki/")
(setq deft-text-mode 'markdown-mode)
(setq deft-use-filename-as-title t)
</code></li>
<li>Follow the instructions to map a keyboard shortcut to open deft. I use H-d (see my <a href="http://www.pragmaux.com/post/41867238595/emacs-experimental-hyper-key-mappings">emacs hyper-key post</a> ) but a simple function key mapping would be.
<code>
(global-set-key [f8] 'deft)
</code></li>
<li>Create a symlink from ~/.deft to your nvALT notes directory, this is shown in the nvALT preferences under the notes tab. See example below.
<code>
ln -s ~/Documents/notes/ .deft
</code>
When you eval init.el or restart emacs you should be set. Fire up Deft and the UI will operate just like nvALT, only it works in an Emacs buffer!!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remapping My Caps Lock Key]]></title>
    <link href="http://fooqri.github.io/blog/2012/12/30/remapping-my-caps-lock-key/"/>
    <updated>2012-12-30T16:24:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2012/12/30/remapping-my-caps-lock-key</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had my caps lock key mapped to the control key for the last few months as I have migrated back to Emacs from TextMate. It was a slight improvement over the placement of the control key but not a huge improvement. I came across this article: <a href="http://brettterpstra.com/a-useful-caps-lock-key/">A Useful CAPS-Lock Key</a> from Brett Terpstra and decided to give his mapping a try. This mapping requires free third party software, but I was particularly intrigued not by the escape key mapping, which is very handy, but by the &ldquo;Hyper-key&rdquo; (ctrl-shift-cmd-opt) being mapped to holding down the shift key. This opens a lot of potential system wide shortcut key-bindings that are a lot easier than using the uncomfortable ctrl-shift-cmd-opt.</p>

<p>So far it is very useful, I like the hyper-t for opening iTerm2 in visor mode, very handy. I will check back in in a month on this topic and share any other key bindings I come up with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FoldingText and productivity]]></title>
    <link href="http://fooqri.github.io/blog/2012/12/26/foldingtext-and-productivity/"/>
    <updated>2012-12-26T19:19:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2012/12/26/foldingtext-and-productivity</id>
    <content type="html"><![CDATA[<p>I have been using the <a href="http://www.foldingtext.com/">FoldingText</a> app for  a couple of weeks. It is a very interesting app targeting writers, something I am not, but I was intrigued by the  interactivity of this minimalist app. Specifically the ability to add interactive todo lists and timers and have them execute in a text document. Please take a look at the <a href="http://www.foldingtext.com/#watchmovie">FoldingText Video</a> to get a feel for it, I don&rsquo;t want to describe ideas that a video shows so clearly.</p>

<p>I have been using it for my daily plan the past 2 weeks. I usually start each day with a mix of items I want to accomplish. These items usually include a mix of coding items for a sprint, some user stories for the backlog, and some wireframes for a future sprint, etc.  The mix keeps the day feeling balanced. I add a mix of these to the day&rsquo;s plan, and then organize them into <a href="http://en.wikipedia.org/wiki/Pomodoro_Technique">pomodoro</a> time slices.</p>

<p>The app&rsquo;s simplicity allows some really interesting customization that isn&rsquo;t present in an app like Vitamin-R, which is a good pomodoro app, but like most apps is not very flexible. For example, I have found that keeping the daily plan, now and later notes, and the time slices all in a single document is very powerful. Further I can add notes indented under time slices to describe what I did during each slice. Since everything is in a single text document (markdown) and lives in my nvALT notes app, I can easily search and find my daily notes that include what I accomplished each day, etc. This is good for reviewing how well certain activities mix together, looking at my velocity over time, etc.</p>

<p>All of that is useful but the reason for my making this post is that I find the interaction model to be very interesting, basically a text document with very simple embedded mini-apps that are triggered by simple human-readable phrases that add functionality while the document is open and in use. With all output living in the text document. It gives hints of a feeing of empowerment that early spreadsheet apps like Lotus123 delivered. I can imagine all sorts of useful embedded mini-apps, the key will be maintaining the simplicity. Many apps used for productivity today are incredibly prescriptive, FoldingText feels like you are really in control and able to customize the document as a very simple app. Of course FoldingText itself is still more of an app than a platform, but I can imagine it as a platform with many developers adding these mini-apps. Todo lists and timers seem like a powerful start, I can&rsquo;t wait to see what comes next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wiki + searchable notes.]]></title>
    <link href="http://fooqri.github.io/blog/2012/12/17/wiki-plus-searchable-notes/"/>
    <updated>2012-12-17T13:25:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2012/12/17/wiki-plus-searchable-notes</id>
    <content type="html"><![CDATA[<p>For our startup I have been using github wiki to keep the product specs, design docs, user stories, etc organized and up-to-date. The nice thing about github is you can clone the wiki and work on it locally and push changes up to the server. See this <a href="https://github.com/wicketstuff/core/wiki/Editing-Wiki-Locally" title="writeup" target="_blank">writeup</a> for more info. This is handy because you can then work on the wiki using markdown syntax in a regular text editor versus a web page editor.</p>

<p>The ease of this made me wonder if there was a way to do my normal note taking, code journalling, etc in markdown vs Evernote. I did some looking around and found <a href="http://brettterpstra.com/project/nvalt/" title="nvAlt" target="_blank">nvALT</a>, which is a markdown based notebook that can save notes as flat .md files.</p>

<p>So as an experiment I cloned my personal notes wiki from github.  After configuring nvALT to use the cloned wiki directory as its directory I could immediately see and search all of my wiki files as nvALT note files. Also I could add new files and they would now become linkable as wiki files. So basically nvALT acts as a note taking system, but notes can be also linked together via a mmd link notation that is supported by the github wiki. You can install the <a href="https://github.com/github/gollum" title="Gollum">gollum</a> gem and interact with the wiki locally to test the wiki pages.</p>

<p>So I can now create, edit, search notes in markdown, but also link them, as well as view them as a wiki.</p>

<p>I will post again after a few weeks trying out the solution with more info on how it is working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast PhotoSync from iPhone]]></title>
    <link href="http://fooqri.github.io/blog/2012/12/17/fast-photosync-from-iphone/"/>
    <updated>2012-12-17T05:14:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2012/12/17/fast-photosync-from-iphone</id>
    <content type="html"><![CDATA[<p>Doing iOS design and development I find myself capturing images on the iPhone all the time to make notes on. These usually end up being added to my notes or to our project wiki (see <a href="http://fooqri.tumblr.com/post/38160399193/screen-capture-goodness" title="Screen Capture Goodness">Screen capture goodness</a> and  <a href="http://fooqri.tumblr.com/post/38158334752/wiki-searchable-notes" title="Wiki + Searchable Notes">Wiki + Searchable Notes</a> for more on that).</p>

<p>To get the images from the phone to my Mac I was using Apple&rsquo;s Photo Stream feature but it took too long and sometime images just didn&rsquo;t show up on the Mac. So I went looking for a better solution and found the <a href="http://www.photosync-app.com/" title="PhotoSync">PhotoSynch </a>app in the app store. You install it on the iphone via the ios app store ($1.99), and on the Mac via the Mac app store (Free).</p>

<p>It can then be configured to synch all the images in your camera roll with the Mac over wifi. It has a quick transfer feature that allows it to transfer all images since the last sync to the Mac.</p>

<p>You start the transfer on the phone, and when it completes a Finder window will appear on the Mac so you can see the images. At this point I use script to move certain images into the right folders. The process is quick, simple, and works every time.</p>
]]></content>
  </entry>
  
</feed>
