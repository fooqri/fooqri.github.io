<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | ]]></title>
  <link href="http://fooqri.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://fooqri.github.io/"/>
  <updated>2016-03-12T08:25:08-08:00</updated>
  <id>http://fooqri.github.io/</id>
  <author>
    <name><![CDATA[Patrick Goddi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parsing a simple markdown style list in Ragel]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/19/parsing-a-simple-markdown-style-list-in-ragel/"/>
    <updated>2013-01-19T13:04:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/19/parsing-a-simple-markdown-style-list-in-ragel</id>
    <content type="html"><![CDATA[<p>In an earlier post <a href="http://www.pragmaux.com/post/40689737812/simple-state-machine-example">Simple state machine example</a>, I provided an example of using the Ruby <em>state_machine</em> gem to create a state machine for handling a simple list of tasks. In this post I will provide a similar but not exactly compatible description of building a parser to read lists from a text file. In this example I use the markdown syntax for lists, where items can be placed hierarchically, thus removing the need for a separate &ldquo;list&rdquo; object.</p>

<p>I found the <a href="http://www.complang.org/ragel/ragel-guide-6.7.pdf">Ragel documentation</a> to be excellent. The only issue is a lack of practical examples. Given the dearth of examples available, I though I would add my +1 example to help the cause. If you are serious about using Ragel I recommend reading the documentation start to finish quickly, then a second go through taking notes on key items like default machines, syntax, priorities, actions, etc before building a parser. Having a strong base will help tremendously when using examples.</p>

<p>There are three files involved in this solution to the list problem:</p>

<ul>
<li>lists.txt: a data file that contains two lists for the parser to parse.</li>
<li>mdlist.rb: a ruby class that will call the parser and output the list returned from the parser.</li>
<li>mdlist_parser.rl: A file that will be used by Ragel to create a parser class definition (mdlist_parse.rb).</li>
</ul>


<p>I added all three files to one gist, which is shown below. Below the lists.txt data file uses a markdown like syntax where hierarchy is expressed through indentation (4 spaces or a tab).</p>

<!--more-->


<p><div><script src='https://gist.github.com/4573704.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>To create an app that supported operating on these lists you would need to parse the list and create objects that could be operated on. Perhaps adding checkboxes in a UI, or strike-through font when the item is marked complete.</p>

<p>In this example I am using Ragel, which uses a set of state machine definitions to generate a state machine. In this case I am using Ragel to generate a parser to parse lists similar to the ones shown in lists.txt. In Ragel you specify a Ruby class that uses a series of preprocessors (%%) that are processed by the Ragel library.  Ragel will replace these blocks and preprocessor commands with ruby parser code and a parse table; resulting in a state machine for parsing the file.  The documentation will describe all of the required preprocessor commands for Ruby. Ragel supports many languages and the preprocessor commands differ slightly for different languages. Check the documentation for meaning.</p>

<p>The bulk of the instructions for creating a parser are inside the <em>%%{ }%%</em> block. The block is made up of machine definitions and actions. Ragel state machines recognize byte sequences as regular expression machines do, but can also execute code at arbitrary points in the recognition of a regular language (actions).  Here regular expressions are used to define a regular grammar, see type-3 in the <a href="http://en.wikipedia.org/wiki/Chomsky_hierarchy">Chomsky hierarchy</a>.</p>

<p>Thus when you see the statement:</p>

<pre><code>task_title =  [^\n]+ [\n]
</code></pre>

<p>this is defining a machine (<em>[^\n]+ [\n]</em>) and assigning it a name <em>task_title</em>. The Ragel documentation refers to the right side of the expression as a <em>regular expression machine</em> or <em>machine</em>, this is roughy equivalent to production rules in tradition grammar design. Using named expressions this way allows grammar rules to be built up recursively, much like non-terminals are used in traditional grammar definitions.</p>

<p>Thus an expression like:</p>

<p>   task = (task_header &gt;MarkTaskStart) . task_item*;</p>

<p>uses the rules <em>task_header</em><strong><strong> and <em>task_item</em></strong></strong> in the definition of the expression. Ragel expressions look unusual at first because they are both defining a grammar and embedding behavior (code). For example the above expression includes a reference to of a block of code <strong><em>MarkTaskStart</em></strong> that should be executed when the <strong><em>task_header</em></strong> machine is matched. These code blocks are called <em>actions</em> in Ragel. It can be useful to use a convention like all lowercase for rules, and CamelCase for actions to make the expressions easier to read.</p>

<p>Ragel defines a syntax for specifying when an action is to be called relative to state transitions between machines. For example before a transition, after a transition, or at the end of file, etc. The documentation is very good, though it is terse.</p>

<table border="1">
<col style="padding-right: 30px;" />
<col style="padding-right: 30px;" />
<col />
  <tr>
    <th>Name</th>
    <th>Syntax</th>
  </tr>
  <tr>
    <td style="width: 200px;">entering action</td>
    <td style="width: 200px;">expr &gt;action</td>
  </tr>
  <tr>
    <td style="width: 200px;">finishing action</td>
    <td style="width: 200px;">expr @ action </td>
  </tr>
    <tr>
    <td style="width: 200px;">all transitions action</td>
    <td style="width: 200px;">expr $ action</td>
  </tr>
  <tr>
    <td style="width: 200px;">leaving actions</td>
    <td style="width: 200px;">expr % action</td>
  </tr>
</table>


<br />


<p>Ragel also allows you to embed error handling behavior using a similar mechanism.</p>

<p>Finally, one of the challenges of regular grammars is the requirement that they are <a href="http://en.wikipedia.org/wiki/Deterministic_finite_automaton">DFA&rsquo;s</a> and thus need to be deterministic. Ragel provides a mechanism for including priorities in the case where multiple next states are possible; you can define which state will be taken. For more see the Ragel documentation on priorities and guarded expressions. The reason I suggested reading through the documentation prior to reading example grammars is that Ragel expressions can begin to look very confusing if you are not versed in the difference between the syntax associated with machines, actions, priorities and guards, since they all appear intermingled in a Ragel expression.</p>

<p>To create a parser for the <em>mdlist_parser.rl</em> file shown above use this command:</p>

<pre><code> ragel -R mdlist_parser.rl
</code></pre>

<p>This will create a parser written in ruby called <em>mdlist_parser.rb</em> that can be included into your Ruby program.</p>

<p>Now we need a simple Ruby program to use the parser, I am including this because I didn&rsquo;t see a lot of examples for how to do this so wanted to add one here.</p>

<p>The simple ruby class defined in <em>mdlist.rb</em> will open the data file and read it in to a string, and pass the string to the parser. The parser will return a Ruby object that has a <em>lists</em> method that returns the list in a data structure. The above class will then output the list formatted to show the hierarchy. The list could easily be used to create a list object that includes the state machine from my earlier <a href="http://www.pragmaux.com/post/40689737812/simple-state-machine-example">state machine</a> post.</p>

<p>I will assume you have Ragel, installed, if not get it <a href="http://www.complang.org/ragel/">here</a>. To see the parser in action you need all three files (mdlist_parser.rl, mdlist.rb, lists.txt) in the same directory and then take these steps:</p>

<ol>
<li><strong>run the ragel parser:</strong>   ragel -R mdlist_parser.rl</li>
<li><p><strong>run irb</strong> and enter the following into irb:</p>

<ul>
<li>load &ldquo;mdlist.rb&rdquo;</li>
<li>list = MDList.new(&ldquo;lists.txt&rdquo;)</li>
</ul>
</li>
</ol>


<p>You should see the output of the puts statements displaying the lists data structure with information about the hierarchy of the list. It would be easy to replace the puts with a call to a method like add_item() from my state_machine example referenced earlier.</p>

<p>That&rsquo;s it. Defining grammars and using parser generators can seem challenging at first, but once you get through a few examples and build a simple grammer it will become very simple, since the rules are really very simple. The language of grammar definition can be challenging at first,  but just try to understand the concepts and don&rsquo;t get too bogged down in the terminology. Ragel is a very powerful tool for any developer to have in their tool belt, especially if you are interested in building high performance APIs, it combines a powerful parser generator with an expressive syntax for generating powerful state machines. To fully understand this and other examples check out the Ragel documentation and tutorials listed below.</p>

<ul>
<li><a href="http://www.complang.org/ragel/">Ragel Home</a></li>
<li><a href="http://thingsaaronmade.com/blog/a-simple-intro-to-writing-a-lexer-with-ragel.html">A simple intro to writing a lexer with Ragel.</a></li>
<li><a href="http://www.devchix.com/2008/01/13/a-hello-world-for-ruby-on-ragel-60/">A Hello World for Ruby on Ragel 6.0</a></li>
<li><a href="http://www.zedshaw.com/essays/ragel_state_charts.html">Ragel State Charts</a></li>
<li><a href="http://tech.blog.cueup.com/regular-expressions-will-stab-you-in-the-back">Regular Expressions Will Stab You in the Back</a></li>
</ul>


<p>Also see this great <a href="http://www.confreaks.com/videos/491-rubyconf2010-consuming-gherkin-one-byte-at-a-time"> Consuming Gherkin: One Byte at a Time video</a> intro of Mike Sassak &amp; Greg Hnatiuk discussing their experience using Ragel for the Cucumber parser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean API on Heroku]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/17/lean-api-on-heroku/"/>
    <updated>2013-01-17T08:46:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/17/lean-api-on-heroku</id>
    <content type="html"><![CDATA[<p>We have recently been working on an iOS app that requires a backend service. In this case I was looking for something leaner, simpler, and faster than Rails since it was only an API for a mobile app, no web front-end. I wanted it to be very lean and scalable so we could make it through early user testing without spending a lot on servers. Ok, ideally without spending anything on servers; basically how much could I squeeze out of one Heroku worker.</p>

<p>After some investigation of the typical light weight ruby frameworks (Sinatra, Merb, etc) I stumbled upon <a href="https://github.com/intridea/grape">Grape</a>, a ruby API micro-framework. Grape uses a very simple DSL for defining APIs for your Ruby objects. Grape runs on <a href="https://github.com/postrank-labs/goliath">Goliath</a>, which is a non-blocking Ruby web server framework that uses Ruby fibers to simplify the handling of asynchronous requests. Goliath runs on the popular <a href="https://github.com/eventmachine/eventmachine">EventMachine</a> reactor. EventMachine is an event-driven Ruby library that works much like Node.js.</p>

<p>The <a href="https://github.com/intridea/grape">Grape</a> github page provides a great deal of information on getting started, and David Jones has a great <a href="https://github.com/djones/grape-goliath-example">example</a> project on GitHub demonstrating how to deploy a grape API on Heroku.</p>

<p>The DSL is really simple and I was able to wrap some ruby objects in a day and deploy it on Heroku. Here is an snippet of what the DSL looks like.</p>

<p><div><script src='https://gist.github.com/4555788.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>As you can see the Grape framework supports API versioning, and the DSL provides a simple way to define API endpoints by defining resources and then specifying the HTTP requests (get, post, put, delete) for that resource. Any Rails developer should feel comfortable with the paths, params, and routes syntax in Grape.</p>

<p>In this code snippet I show part of the API definition for two resources (missions &amp; players). This will mean the path for accessing these are <em>/missions</em> and <em>/players</em>. Because I specified <em>prefix &lsquo;api&rsquo;</em> at the top of the file, the actual path becomes <em>/api/missions</em> and <em>/api/players</em>. So for example the <em>get &ldquo;/:id&rdquo;</em> would correspond to a get request of /api/players/7E781305-777F-4044-9770-C7995585F540 where the UUID is a player id and would be available in the params[:id] variable.</p>

<p>I should also note that even though these are simple <em>get</em> requests Grape will expect a header to be set for the secret key(secretk), and also require an Accept header with the version, vendor info, and content type (json). The easiest way to test your API will be to use an app like <a href="http://goo.gl/daZ5Q">Postman</a> that makes it easy to formulating requests, setting headers, from your Chrome browser. Postman also allows you to save requests, and re-run them.</p>

<p>I happen to be using Mongo for this, but Grape supports most major DBs. I am only showing two get methods, my full definition supports CRUD for these objects, as well as a few common queries of the db. The error checking of the request is fairly straightforward. I am checking for an API key, but this would be replaced with an API key lookup function to validate the requestor. It is easy to respond with specific errors as you can see.</p>

<p>The terse <em>error!, unless</em> syntax makes the error handling code very readable. The request handling for these two examples are simple: I query a mongo collection for an id, then map that response onto objects, and then convert the objects to json. This looks funny since it is basically json-&gt;object-&gt;json since mongo returns json, but there is more that happens in the object mapping; the json from the db and the json from the object are not the same.</p>

<p>By requiring <em>mission.rb</em> and <em>player.rb</em> at the top of the file, I pull in my Mission and Player classes so they can be used in the map operation.   Try to ignore the lame <em>.first</em> operation, this was a bit of laziness in dealing with what is an array of one item resulting from the map operation. As with all Ruby, the output of the last operation is what is returned in the body of the response.</p>

<p>The DSL is very clean and makes API maintenance relatively easy.</p>

<p>A few other handy links:</p>

<ul>
<li><a href="https://github.com/postrank-labs/goliath">Grape Project</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups#!forum/ruby-grape">Grape Forum</a></li>
<li><a href="https://github.com/flyerhzm/newrelic-grape">NewRelic-Grape Gem Info</a> &ndash; NewRelic instrumentation for the Grape API DSL.</li>
<li><a href="https://github.com/djones/grape-goliath-example">Heroku example</a></li>
<li><a href="http://www.confreaks.com/videos/475-rubyconf2010-the-grapes-of-rapid">Grape Intro Video</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple state machine example]]></title>
    <link href="http://fooqri.github.io/blog/2013/01/15/simple-state-machine-example/"/>
    <updated>2013-01-15T12:24:00-08:00</updated>
    <id>http://fooqri.github.io/blog/2013/01/15/simple-state-machine-example</id>
    <content type="html"><![CDATA[<p>I have been investigating using the ruby <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem for a project. State machines can be very handy in simplifying code where objects move through various states. The <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem embeds state machine behavior into any class that uses it. My first test was to create a simple todo list example.  The todo list will include a main list that contains items and sublists.  This allows a way to organize items easily into sublists.</p>

<p>A simple way to do this is to declare two classes <em>List</em> and <em>Item</em> and allow an object of class <em>List</em> to contain a list of <em>Lists</em> and a list of <em>Items</em>. This approach allows a flat list with many items, or a hierarchical list with top-level items, but also sub-lists that contain their own items.</p>

<p>In addition to lists and items, I want is to track whether I have completed all of the items in a list. In the case of a hierarchical list this means all items of sub-lists as well. Thus in addition to lists and items, we need to track whether items and lists are in progress or completed.</p>

<p>The next step is deciding on the states of the two object types. For my example, I decided:
* a list will have an initial state of <em>available</em>, and will transition to state <em>started</em> when the first item on the list is completed. When all items and sublists are <em>completed</em> the list will move to the state <em>completed</em>.
* an item will have an initial state of <em>available</em> and will transition to <em>completed</em> when the item is finished.</p>

<p>Finally I want to inform the user when:
* an item is completed
* a list is completed
* the project is completed (all items and sublists are completed)</p>

<p>Here is a quick example of the code to meet these requirements:</p>

<p><div><script src='https://gist.github.com/4549146.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>As you can see there is a rich environment for embedding behavior, including adding it in the <em>state</em> definitions, adding it using the <em>before_transition</em> method, and adding it using the <em>after_transition</em> method. You can also define methods inside the state definition so you can extend the functionality of a state.</p>

<p>Now if you load this example in IRB you can play with the lists and items like so:</p>

<pre><code> load "list_example.rb"
 list = List.new("Groceries", "Get some groceries")
 wf = list.add_list("Whole Foods", "Get some groceries from Whole Foods")
 milk = list.add_item("Milk", "2% Milk")
 strawberries = wf.add_item("Strawberries", "Ripe organic Strawberries"))
 oranges = wf.add_item("Oranges", "Ripe mandarine oranges")

 strawberries.finish 
 =&amp;gt; finished item Strawberries

 oranges.finish  
 =&amp;gt; finished item Oranges
 =&amp;gt; congrats on completing list Whole Foods

 milk.finish
 =&amp;gt; finished item Milk
 =&amp;gt; congrats on completing project Groceries
</code></pre>

<p>This was a really simple example, but shows how easy it is to create classes that embed state machines. For more check out the <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem.</p>

<h3>State Diagrams</h3>

<p>The library also allows you to generate graphs of the states and transitions in each class. For example:</p>

<p>create a Rakefile.rb</p>

<pre><code> require 'tasks/state_machine'
 require './list_example.rb
</code></pre>

<p>Then in terminal execute:</p>

<pre><code> rake state_machine:draw CLASS=List 
</code></pre>

<p>For the <em>List</em> class shown above this will generate a png file named <em>List_list_state.png</em> that looks like the image below.</p>

<p><img src="http://media.tumblr.com/d78e332b4656b62dec36c2a2d2408a82/tumblr_inline_mgqav0Q8uW1qz562v.png" alt="" /></p>

<p>The <em>List</em> class is very simple so the diagram is also simple. In the case of my project there are many states and more complicated transitions between states so the diagram can be very handy to visualize what is happening when  debugging a strange transition,</p>

<h3>Wrapup</h3>

<p>This todo list example is very simple but it allows exploring the basic features of the <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem, and demonstrates how simple it is to add state machine functionality to classes.  If a class you are designing has variables that keep state, and you are triggering behaviors when those variables change, then a state machine will likely be a more clean approach to organizing behavior in your class.</p>
]]></content>
  </entry>
  
</feed>
