<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://rwx.io/posts/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>patrick@rwx.io (Patrick Goddi)</managingEditor>
    <webMaster>patrick@rwx.io (Patrick Goddi)</webMaster>
    <copyright>Â© 2018 rwx.io</copyright>
    <lastBuildDate>Wed, 17 Oct 2018 10:41:22 -0700</lastBuildDate>
    
	<atom:link href="http://rwx.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding Hyperlinks to Logger Output</title>
      <link>http://rwx.io/posts/logging-source-line-location-elixir/</link>
      <pubDate>Wed, 17 Oct 2018 10:41:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/logging-source-line-location-elixir/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/PMLogger.png&#34; alt=&#34;/images/PMLogger.png&#34; title=&#34;/images/PMLogger.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It would be nice to simply click on a debug message and have it open Emacs to the correct location in the corresponding file. There are a variety of ways to accomplish this, I chose to use terminal hyperlinks along with adding an Emacs URI protocol to my system.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS URI Protocol Handler</title>
      <link>http://rwx.io/posts/osx-uri-protocol-handler/</link>
      <pubDate>Sun, 14 Oct 2018 15:52:54 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/osx-uri-protocol-handler/</guid>
      <description>&lt;p&gt;Strangely over the past week I ran into the need for a URI protocol handler on three different occasions. Instead of looking for three separate existing handlers that might work, I decided to write a single generic handler.  The solution is a simple URI protocol router that forwards requests to shell scripts that handle the protocol requests. Below I describe some of the details; you can also find the end result on github: &lt;a href=&#34;https://github.com/fooqri/uri-handler&#34; title=&#34;uri-handler&#34;&gt;uri-handler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple Audio Analysis with pyAudioAnalysis</title>
      <link>http://rwx.io/posts/simple-audio-analysis-in-python/</link>
      <pubDate>Fri, 08 Apr 2016 16:01:32 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/simple-audio-analysis-in-python/</guid>
      <description>&lt;p&gt;I had a need to do some classification of sets of environmental audio files so started looking for an easy to use Python library that was up for the task. Here are my notes on setting up the &lt;a href=&#34;https://github.com/tyiannak/pyAudioAnalysis&#34; title=&#34;pyAudioAnalysis Library&#34;&gt;pyAudioAnalysis Library&lt;/a&gt; for simple audio classification task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/6e750e1e-d152-11e8-abd7-040cce2069a4.png&#34; alt=&#34;/images/6e750e1e-d152-11e8-abd7-040cce2069a4.png&#34; title=&#34;/images/6e750e1e-d152-11e8-abd7-040cce2069a4.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Org Export Configurations</title>
      <link>http://rwx.io/posts/org-export-configurations/</link>
      <pubDate>Fri, 11 Mar 2016 15:51:20 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/org-export-configurations/</guid>
      <description>Emacs org mode offers a variety of export options that make it easy to look at your notes in different formats, or perhaps make them available for others to view. Three I use regularly are markdown, mindmap, and reveal presentation.
My approach to Note Taking The best way to learn something is to sumarize the topic in your own words, in your own context, and present it to others with concrete examples.</description>
    </item>
    
    <item>
      <title>Deft &#43; Org for Notes</title>
      <link>http://rwx.io/posts/deft-and-orgmode-for-notes/</link>
      <pubDate>Thu, 10 Mar 2016 15:44:58 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/deft-and-orgmode-for-notes/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://rwx.io/posts/nvalt-and-emacs&#34; title=&#34;nvALT and Emacs post&#34;&gt;nvALT and Emacs post&lt;/a&gt; I described an integration between &lt;em&gt;nvAlt&lt;/em&gt; and &lt;em&gt;Emacs&lt;/em&gt; using &lt;a href=&#34;http://jblevins.org/projects/deft/&#34; title=&#34;Deft&#34;&gt;Deft&lt;/a&gt; for &lt;em&gt;markdown&lt;/em&gt; notes. I the past year I have moved to using &lt;em&gt;Deft&lt;/em&gt; for &lt;em&gt;org&lt;/em&gt; notes rather than &lt;em&gt;markdown&lt;/em&gt; notes. The nice thing about combining Deft with Org is that your notes are indexed and easy to find using Deft, but also retain all of the power of Org to orgainize and present information. For example typing &lt;em&gt;decision boundary&lt;/em&gt; into &lt;strong&gt;deft&lt;/strong&gt; quickly cuts down hundreds of org text notes to the handful that contain the words &lt;strong&gt;decision&lt;/strong&gt; and &lt;strong&gt;boundary&lt;/strong&gt; in them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/deft-v0.6.gif&#34; alt=&#34;/images/deft-v0.6.gif&#34; title=&#34;/images/deft-v0.6.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Org Mode ES2015&#43; Code Blocks (updated)</title>
      <link>http://rwx.io/posts/org-with-babel-node-updated/</link>
      <pubDate>Wed, 09 Mar 2016 16:57:39 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/org-with-babel-node-updated/</guid>
      <description>&lt;p&gt;Babel 6x is a significant change from Babel 5x, as the &lt;em&gt;cli&lt;/em&gt; is now a separate node module called &lt;em&gt;babel-cli&lt;/em&gt; and transforms are now also delivered as separate packages. First make a few changes to the emacs environment so you can use JavaScript in &lt;strong&gt;org mode&lt;/strong&gt;, as well as find local &lt;em&gt;node.js&lt;/em&gt; modules you have installed. Replace &lt;code&gt;~/org/node_modules&lt;/code&gt; in the configuration below with the location of any local node modules you want to use. Using this approach you don&#39;t have to pollute the global node_module directory if you don&#39;t want to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#+begin_src js :cmd &amp;quot;org-babel-node&amp;quot; :results output drawer
  let arr = [1, 2]; 
  let [x, y] = arr;

   console.log(x);
   console.log(y);
#+end_src

:RESULTS:
1
2
:END:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ancs-example-on-blend-nano</title>
      <link>http://rwx.io/posts/ancs-example-on-blend-nano/</link>
      <pubDate>Wed, 27 Jan 2016 12:19:19 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/ancs-example-on-blend-nano/</guid>
      <description>&lt;p&gt;I decided to try getting &lt;em&gt;Apple Notification Center Service (ANCS)&lt;/em&gt; working with the &lt;a href=&#34;http://redbearlab.com/blenano/&#34; title=&#34;RedBearLab BLE Nano&#34;&gt;RedBearLab BLE Nano&lt;/a&gt;, and this post describes one way to get the Nordic ANCS demo running on a BLE Nano. This post shows how to get an &lt;em&gt;ARM&lt;/em&gt; development environment and toolchain up and running on OS X in order to develop apps for the Nordic BLE SoC&#39;s (e.g. nRF51822 based boards like the BLE Nano).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/nano.png&#34; alt=&#34;/images/nano.png&#34; title=&#34;/images/nano.png&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ANCS Message Display</title>
      <link>http://rwx.io/posts/ancs-message-display/</link>
      <pubDate>Sat, 23 Jan 2016 11:12:00 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/ancs-message-display/</guid>
      <description>&lt;p&gt;Ever want to see that last iPhone message without checking your phone. It is actually fairly easy to create a secondary message display using an Arduino, BLE, and an LCD display to conect to the &lt;em&gt;Apple Notification Center Service&lt;/em&gt; on your iPhone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/6092.jpg&#34; alt=&#34;/images/6092.jpg&#34; title=&#34;/images/6092.jpg&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Org Mode ES2015&#43; Code Blocks</title>
      <link>http://rwx.io/posts/org-mode-es2015plus-code-blocks/</link>
      <pubDate>Tue, 06 Oct 2015 16:57:01 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/org-mode-es2015plus-code-blocks/</guid>
      <description>Update: I have updated instructions for installing and using the recently released Babel 6 with org mode.
I use emacs org mode to keep notes including code nodes that support inline execution. It is convenient for keeping useful code snippets, as well as experimenting while taking notes. Because of features like Org + Deft it is really easy to find the sweet spot between keeping coding notes organized but also easily searched.</description>
    </item>
    
    <item>
      <title>ESP8266 Initial Notes</title>
      <link>http://rwx.io/posts/esp8266-initial-notes/</link>
      <pubDate>Wed, 09 Sep 2015 08:05:16 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/esp8266-initial-notes/</guid>
      <description>&lt;p&gt;I have started testing the ESP8266 as an inexpensive WiFi enabled IoT device platform. I will added specific how-to notes later but wanted to capture a few items from my initial experiments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/sparkfun-thing.jpg&#34; alt=&#34;/images/sparkfun-thing.jpg&#34; title=&#34;/images/sparkfun-thing.jpg&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Self Updating Edison Apps</title>
      <link>http://rwx.io/posts/self-updating-edison/</link>
      <pubDate>Tue, 18 Aug 2015 10:49:20 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/self-updating-edison/</guid>
      <description>&lt;p&gt;One of the challenges I have had in handing out prototype devices is keeping the software up to date. Solutions like &lt;a href=&#34;www.resin.io&#34; title=&#34;resin.io&#34;&gt;resin.io&lt;/a&gt; do a nice job of deploying &lt;a href=&#34;http://bundler.io/&#34; title=&#34;bundler images&#34;&gt;bundler images&lt;/a&gt; onto devices like the Edison. The primary issue I had was the overhead of pushing bundler images around when the only thing that was changing was the node app. It seemed easier to just use git and npm to handle the updates. I may go the resin.io route later, but this early in dev and testing the git route seems simpler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/intel_edison.jpg&#34; alt=&#34;/images/intel_edison.jpg&#34; title=&#34;/images/intel_edison.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Workbench Replaces My Desk</title>
      <link>http://rwx.io/posts/workbench-replaces-my-desk/</link>
      <pubDate>Mon, 17 Aug 2015 08:15:52 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/workbench-replaces-my-desk/</guid>
      <description>&lt;p&gt;I changed my desk out for a workbench and am very pleased with the results. I made the switch for two reasons:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/workbench-pic.jpg&#34; alt=&#34;/images/workbench-pic.jpg&#34; title=&#34;/images/workbench-pic.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>I2C MPU-6050</title>
      <link>http://rwx.io/posts/i2c-mpu-6050/</link>
      <pubDate>Mon, 17 Aug 2015 05:50:59 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/i2c-mpu-6050/</guid>
      <description>&lt;p&gt;I am using an accelerometer in my most recent device to capture gesture and orientation information, as the device itself has no traditional user interface. Since the device is running a node.js app to capture data and push it to a cloud service the first prototype required a quick solution to getting data from an MPU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/mpu6050.jpg&#34; alt=&#34;/images/mpu6050.jpg&#34; title=&#34;/images/mpu6050.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP8266</title>
      <link>http://rwx.io/posts/esp8266/</link>
      <pubDate>Sun, 16 Aug 2015 15:41:39 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/esp8266/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/esp8266.jpg&#34; alt=&#34;/images/esp8266.jpg&#34; title=&#34;/images/esp8266.jpg&#34; /&gt;
I have been building a few prototype devices with the following parts:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Edison Wi-Fi Configuration</title>
      <link>http://rwx.io/posts/edison-wifi-configuration/</link>
      <pubDate>Sun, 16 Aug 2015 13:55:57 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/edison-wifi-configuration/</guid>
      <description>&lt;p&gt;I built a handful of prototype devices using Intel Edison boards to hand out to testers, but one challenge is each tester will bring the devices to their own Wi-Fi environment (home, work, etc).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/intel_edison.jpg&#34; alt=&#34;/images/intel_edison.jpg&#34; title=&#34;/images/intel_edison.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Popup Workbench</title>
      <link>http://rwx.io/posts/popup-workbench/</link>
      <pubDate>Sun, 16 Aug 2015 13:00:12 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/popup-workbench/</guid>
      <description>&lt;p&gt;We are down to one car, as we can walk/bike to about anything we could possibly need including caltrain and light rail. So the garage is now empty of cars, and filled with toys. While playing ping pong one day I decided a beverage table would be nice in the garage, but something that could also serve as a work surface in a pinch. Something to put some tools on, etc. I wanted it to be something that could be folded out of the way when not needed, and something that didn&#39;t cost a lot since I wasn&#39;t sure if it would really prove useful. Sort of a prototype 1 of a collapsable work surface concept.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/popup-workbench.jpg&#34; alt=&#34;/images/popup-workbench.jpg&#34; title=&#34;/images/popup-workbench.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Revisiting Buyer&#39;s Agent app using React.js</title>
      <link>http://rwx.io/posts/revisiting-buyers-agent-app/</link>
      <pubDate>Tue, 09 Jun 2015 11:45:40 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/revisiting-buyers-agent-app/</guid>
      <description>&lt;p&gt;In a past post I showed a &lt;a href=&#34;http://rwx.io/posts/mobile-real-estate-app-v1&#34; title=&#34;Mobile Real Estate App&#34;&gt;Mobile Real Estate App&lt;/a&gt; that was built with Polymer. This time around I will revisit the app but instead use &lt;a href=&#34;https://facebook.github.io/react/&#34; title=&#34;React.js&#34;&gt;React.js&lt;/a&gt;. The Mobile Buyer&#39;s Agent application is a simple web based application used to demonstrate a basic React.js mobile web app. The goal is to allows a real estate buyer&#39;s agent to deliver a personalized mobile app experience to their clients by adding data to a Google spreadsheet. The agent updates a Google spreadsheet, and the web app loads its data from the spreadsheet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.poggr.com/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m9&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent_1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting Up a New Intel Edison</title>
      <link>http://rwx.io/posts/setting-up-an-edison/</link>
      <pubDate>Wed, 18 Feb 2015 12:42:49 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/setting-up-an-edison/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;//s3.amazonaws.com/rwx-blog/IMG_4161.JPG&#34; style=&#34;height: 400px; display: block; margin: auto;&#34;&gt;&lt;/p&gt;

&lt;p&gt;The Edison is a tiny and amazing computer, and ideal prototyping tool for wearable and IoT experiments. Here are the steps I am currently following to set up the Edison.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Photo Caption Challenge</title>
      <link>http://rwx.io/posts/photo-caption-challenge/</link>
      <pubDate>Thu, 23 Oct 2014 13:18:47 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/photo-caption-challenge/</guid>
      <description>Using Facebook Login, S3, and DynamoDb in browser app One of the challenges of building small mobile web apps without a traditional back-end server is storing global state in a secure way. In my exploration of ways to store state I decided to build a very simple multi-player social app that allows players to participate in a simple photo challenge game. The game author specifies a photo caption and then invites friends to add photo responses that most creatively match the caption.</description>
    </item>
    
    <item>
      <title>Mobile Real Estate App - Version 1</title>
      <link>http://rwx.io/posts/mobile-real-estate-app-v1/</link>
      <pubDate>Wed, 22 Oct 2014 19:46:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/mobile-real-estate-app-v1/</guid>
      <description>&lt;p&gt;I promised a few examples of spreadsheet driven apps. You may remember the &lt;a href=&#34;http://rwx.io/posts/spreadsheet-driven-web-apps/&#34; title=&#34;Hipster List&#34;&gt;Hipster List&lt;/a&gt; was the first example. These are simple web apps that are initialized using data from a Google Spreadsheet once the user loads them in a browser. Using spreadsheets to keep app information current is easy for anyone. There is even a way for users to point the app at their own Google Spreadsheet if the app developer wants to turn feature that on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//www.poggr.com/pe16vKTbVLg::16&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/screen1.png&#34;  style=&#34;height: 400px; display: block; margin: auto&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>d3 charts - wrapping &#39;NVD3 Charts&#39; in a web component</title>
      <link>http://rwx.io/posts/d3-nvd3-charts/</link>
      <pubDate>Fri, 17 Oct 2014 06:39:57 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/d3-nvd3-charts/</guid>
      <description>In my continued experiments with Polymer, I created a web component that wraps NVD3 - a reusable chart library for d3.js. As part of the activity I ported all of the NVD3 example charts to a web component I am calling &amp;lt;goddip-charts&amp;gt;. The component is contained in a pogg on poggr, as this is where I do my experimenting and it allows me to code and serve the project documents in the one place.</description>
    </item>
    
    <item>
      <title>Spreadsheet Driven Web Apps</title>
      <link>http://rwx.io/posts/spreadsheet-driven-web-apps/</link>
      <pubDate>Wed, 15 Oct 2014 14:34:28 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/spreadsheet-driven-web-apps/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/64a285b2-d092-11e8-ac27-040cce2069a4.png&#34; alt=&#34;/images/64a285b2-d092-11e8-ac27-040cce2069a4.png&#34; title=&#34;/images/64a285b2-d092-11e8-ac27-040cce2069a4.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using Google spreadsheets is a great way for a team to collaborate on a data set but it leaves a bit to be desired on presentation of the data. To that end I will be creating a series of fun examples showing how to build small interactive apps that utilize &lt;em&gt;Google Docs&lt;/em&gt; and &lt;em&gt;Polymer&lt;/em&gt; web components to quickly bring data to life. In this series I will be using a Google spreadsheet as the data source, but other data sources are possible, and I will get to those as well in future posts.&#39;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fun with Literate CoffeeScript</title>
      <link>http://rwx.io/posts/fun-with-literate-coffeescript/</link>
      <pubDate>Wed, 15 Oct 2014 08:16:53 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/fun-with-literate-coffeescript/</guid>
      <description>I have always been fascinated with the potential of literate programming; combining inline code in my notes. I have many org-mode documents that interactively execute code for various tasks and procedures. These tasks includes certain maintenance activities, or destructive operations I don&#39;t want to get wrong. I have an entire org document devoted to db maintenance, filled with Ruby code to execute complicated db queries and operations. It is nice to see the example code inline in my notes, and be able to modify the code and execute it directly in my notes.</description>
    </item>
    
    <item>
      <title>CoreData.SQLDebug for RubyMotion</title>
      <link>http://rwx.io/posts/coredata-sqldebug-for-rubymotion/</link>
      <pubDate>Sat, 01 Jun 2013 08:10:07 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/coredata-sqldebug-for-rubymotion/</guid>
      <description>It is sometimes handy to turn on CoreData.SQLDebug in the simulator when debugging a Core Data issue. I have found the output to be very useful in finding the hard to find little bugs that pop-up between restkit and core data. It can also help find performance issues with the database. Unfortunately there isn&#39;t any documentation for how to do this in RubyMotion. I found one solution that works to a degree.</description>
    </item>
    
    <item>
      <title>Getting RKLogConfigureByName working in RubyMotion</title>
      <link>http://rwx.io/posts/getting-rklogconfigurebyname-working-in-rubymotion/</link>
      <pubDate>Thu, 07 Mar 2013 15:21:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/getting-rklogconfigurebyname-working-in-rubymotion/</guid>
      <description>Just a quick note, I was getting an undefined constant error for RKLogConfigureByName, the standard way of setting up logging in RestKit.
It seems that the #define statements in the /vendor/Pods/RestKit/Code/Support/RKLog.h/ file are not getting picked up. I am using the pod and loading with RubyMotion pod support, so I am not sure what the issue is. I will need to investigate further but this quick workaround works, just call the lower-level method mapped via the #define.</description>
    </item>
    
    <item>
      <title>Getting RKLogConfigureByName working in RubyMotion</title>
      <link>http://rwx.io/posts/getting-rklogconfigbyname-working/</link>
      <pubDate>Thu, 07 Mar 2013 15:21:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/getting-rklogconfigbyname-working/</guid>
      <description>Just a quick note, I was getting an undefined constant error for RKLogConfigureByName, the standard way of setting up logging in RestKit. It seems that the #define statements in the /vendor/Pods/RestKit/Code/Support/RKLog.h file are not getting picked up. I am using the pod and loading with RubyMotion pod support, so I am not sure what the issue is. I will need to investigate further but this quick workaround works, just call the lower-level method mapped via the #define.</description>
    </item>
    
    <item>
      <title>nvALT and Emacs</title>
      <link>http://rwx.io/posts/nvalt-and-emacs/</link>
      <pubDate>Mon, 04 Mar 2013 11:19:13 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/nvalt-and-emacs/</guid>
      <description>In a previous post wiki-searchable-notes I mentioned that I was using nvALT for note taking. nvALT is a very simple way to create and search notes and store them in flat files that can be used by other tools. One use is publishing to a github wiki, today I will discuss another.
I am an Emacs user and often found myself dropping out of Emacs to find a note I needed in nvALT.</description>
    </item>
    
    <item>
      <title>Emacs Experimental Hyper-Key Mappings</title>
      <link>http://rwx.io/posts/emacs-experimental-hyperkey-mappings/</link>
      <pubDate>Wed, 30 Jan 2013 10:19:10 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/emacs-experimental-hyperkey-mappings/</guid>
      <description>In a previous post Remapping My Caps Lock Key I mentioned that I remapped my caps-lock key to escape, but also created a &#34;hyper-key&#34; (ctrl-shift-cmd-opt) when the caps-lock key is held down. This opens up a keyboard worth of new shortcuts for emacs. Here are a few I have been playing with for the past few days. An alternative key mapping would be to map the hyper key to holding down the tab key, if you already have the caps lock key mapped to control, and thus muscle memory might preclude this mapping from working for you.</description>
    </item>
    
    <item>
      <title>Trying out Pixate - CSS for iOS app Development</title>
      <link>http://rwx.io/posts/trying-out-pixate-css-for-ios-app-development/</link>
      <pubDate>Wed, 23 Jan 2013 22:09:35 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/trying-out-pixate-css-for-ios-app-development/</guid>
      <description>Recently I have been using RubyMotion for iOS development; I really appreciate developing in Ruby, and prefer Emacs to Xcode. Compared to using interface builder, styling apps can be a challenge. It is possible to use RubyMotion with XIB files created in Xcode&#39;s Interface Builder, but I have been trying to avoid this. I am striving for a more web-app like design and development workflow.
I have been using teacup, which takes a declarative approach to styling and uses a CSS-like DSL.</description>
    </item>
    
    <item>
      <title>The Three C&#39;s</title>
      <link>http://rwx.io/posts/the-three-cs/</link>
      <pubDate>Mon, 21 Jan 2013 10:26:12 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/the-three-cs/</guid>
      <description>I really enjoyed this interview with Tony Fadell on the unique nature of Apple&#39;s design process. The discussion about project abandonment percentages is incredibly important, and often overlooked in large companies. In many cases abandonment is a financial decision related to either real or opportunity costs associated with launching a product. People who have never worked for a large consumer products company likely have no idea how many products are cancelled just before launch because of the incredible cost in launching a product into the market.</description>
    </item>
    
    <item>
      <title>Parsing a simple markdown style list in Ragel</title>
      <link>http://rwx.io/posts/parsing-a-simple-markdown-stle-list-in-ragel/</link>
      <pubDate>Sat, 19 Jan 2013 13:04:50 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/parsing-a-simple-markdown-stle-list-in-ragel/</guid>
      <description>In an earlier post Simple state machine example, I provided an example of using the Ruby state_machine gem to create a state machine for handling a simple list of tasks. In this post I will provide a similar but not exactly compatible description of building a parser to read lists from a text file. In this example I use the markdown syntax for lists, where items can be placed hierarchically, thus removing the need for a separate &#34;</description>
    </item>
    
    <item>
      <title> Pattern problems vs logic problems</title>
      <link>http://rwx.io/posts/pattern-maching-vs-logic-problems/</link>
      <pubDate>Fri, 18 Jan 2013 11:48:53 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/pattern-maching-vs-logic-problems/</guid>
      <description>Suppose three men can paint three fences in three hours. How long would it take one man to paint one fence?  I ran across this interesting problem in The Joy of x: A Guided Tour of Math, from One to Infinity, a very accessible and interesting tour of mathematics.
It turns out most people quickly answer âone hour.â As Strogatz opines,
  The words themselves nudge you that way.</description>
    </item>
    
    <item>
      <title>Creativity Booster: Get a dog.</title>
      <link>http://rwx.io/posts/creativity-booster-get-a-dog/</link>
      <pubDate>Thu, 17 Jan 2013 12:47:49 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/creativity-booster-get-a-dog/</guid>
      <description>&lt;p&gt;It probably sounds specious, but I have found having a dog around has made me both more productive and more creative. The evidence for this claim is the number of daily messages I post to our team message board that start with the phrase &#34;While I was out walking the dog I had this idea....&#34;&lt;/p&gt;

&lt;p&gt;This is my muse, Archer, the retired racing greyhound.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/mgs53cHq981qz562v.jpg&#34; alt=&#34;/images/mgs53cHq981qz562v.jpg&#34; title=&#34;/images/mgs53cHq981qz562v.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rubymotion iOS Applications</title>
      <link>http://rwx.io/posts/rubymotion-ios-apps/</link>
      <pubDate>Thu, 17 Jan 2013 11:28:47 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/rubymotion-ios-apps/</guid>
      <description>I wanted to make a quick note that I have been using RubyMotion the past few months. I don&#39;t mind building natively in Objective-C but since I have been coding both the app and the server side I found switching between Objective-C and Ruby a bit frustrating. I really find Objective-C to be too verbose a syntax for my taste. I also prefer to code in emacs vs. the Xcode UI.</description>
    </item>
    
    <item>
      <title>Lean API on Heroku</title>
      <link>http://rwx.io/posts/lean-api-on-heroku/</link>
      <pubDate>Thu, 17 Jan 2013 08:46:48 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/lean-api-on-heroku/</guid>
      <description>We have recently been working on an iOS app that requires a backend service. In this case I was looking for something leaner, simpler, and faster than Rails since it was only an API for a mobile app, no web front-end. I wanted it to be very lean and scalable so we could make it through early user testing without spending a lot on servers. Ok, ideally without spending anything on servers; basically how much could I squeeze out of one Heroku worker.</description>
    </item>
    
    <item>
      <title>Refactoring: making master programmers</title>
      <link>http://rwx.io/posts/refactoring-making-master-programmers/</link>
      <pubDate>Mon, 14 Jan 2013 16:34:42 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/refactoring-making-master-programmers/</guid>
      <description>There is often a tension between product management and engineering when it comes to time spent adding new features vs. time spent in code refactoring. One could even explain this in terms of top line vs bottom line descriptions. Features mean sales, codebase is an asset, and poor code quality is a liability that affects cost and thus profit. Sloppy, risky, or fragile code is even called &#34;technical debt&#34; in many circles.</description>
    </item>
    
    <item>
      <title> Alfred &#43; Pinboard &#43; Chrome</title>
      <link>http://rwx.io/posts/alfred-plus-pinboard-plus-chrome/</link>
      <pubDate>Sun, 13 Jan 2013 12:29:33 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/alfred-plus-pinboard-plus-chrome/</guid>
      <description>If you happen to use Alfred, Pinboard, and Chrome, here is a nice extension to save the current browser page to Pinboard using Alfred. Much faster than any chrome extension, and fingers never leave the keyboard.
Tim Bueno&#39;s Pinboard Extension</description>
    </item>
    
    <item>
      <title>Toggle Bluetooth</title>
      <link>http://rwx.io/posts/toggle-bluetooth/</link>
      <pubDate>Tue, 08 Jan 2013 12:10:36 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/toggle-bluetooth/</guid>
      <description>In my home office I have a Bluetooth keyboard and trackpad. When I use my MacBook Air elsewhere in the house I constantly see connect and disconnect messages for these devices. Frequently toggling BT on/off can be a pain; the menu bar method for toggling BT requires scanning the menu bar for the BT glyph, clicking on it, finding the correct menu item and clicking on it. All that scanning, tracking, and clicking can be disruptive to a good mental flow; I wanted a quick keyboard shortcut to toggle bluetoooth on/off.</description>
    </item>
    
    <item>
      <title>Syntax Highlighting in OS X quick look</title>
      <link>http://rwx.io/posts/syntax-highlighting-in-quick-look/</link>
      <pubDate>Tue, 08 Jan 2013 11:15:16 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/syntax-highlighting-in-quick-look/</guid>
      <description>Quick Look is a handy OS X feature where you can get a quick look at a file by selecting it and pressing the space bar. This is handy when looking through snippet files on disk. This plugin adds syntax highlighting in Quick Look supporting many common programming languages, and even supports R code.</description>
    </item>
    
    <item>
      <title>getting-a-quick-definition</title>
      <link>http://rwx.io/posts/getting-a-quick-definition/</link>
      <pubDate>Sat, 05 Jan 2013 11:10:27 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/getting-a-quick-definition/</guid>
      <description>I am a logophile, and regularly looking up the meanings of words I encounter on the web or in pdf documents. More recent OS X versions include a great feature that allows you to get a quick definition in almost any app (browser, editor, etc). Highlight a word and press ctrl-command-d to get the definition of the word. It is easy to configure to include Wikipedia definitions so you can also look up people and concepts.</description>
    </item>
    
    <item>
      <title>User Stories and Activity Diagrams</title>
      <link>http://rwx.io/posts/user-stories-and-activity-diagrams/</link>
      <pubDate>Tue, 01 Jan 2013 10:10:37 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/user-stories-and-activity-diagrams/</guid>
      <description>I have been using Omnigraffle to create activity diagrams associated with user stories. Some people may find this overkill but I find doing these diagrams makes transitions clear that might otherwise be missed until later when they lead to costly re-architecting of the screens and flows.
I use Omnigraffle for UI wireframes, so it seemed natural to use it for activity diagrams, which is what I have been doing. The issue is keeping the diagrams up to date.</description>
    </item>
    
    <item>
      <title>Remapping My Caps Lock Key</title>
      <link>http://rwx.io/posts/remapping-my-caps-lock-key/</link>
      <pubDate>Sun, 30 Dec 2012 07:16:24 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/remapping-my-caps-lock-key/</guid>
      <description>I&#39;ve had my caps lock key mapped to the control key for the last few months as I have migrated back to Emacs from TextMate. It was a slight improvement over the placement of the control key but not a huge improvement. I came across this article: A Useful CAPS-Lock Key from Brett Terpstra and decided to give his mapping a try. This mapping requires free third party software, but I was particularly intrigued not by the escape key mapping, which is very handy, but by the &#34;</description>
    </item>
    
    <item>
      <title>Treetop and Parsing Expression Grammars (PEGs)</title>
      <link>http://rwx.io/posts/treetop_and_pegs/</link>
      <pubDate>Sun, 30 Dec 2012 04:54:59 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/treetop_and_pegs/</guid>
      <description>Over the holiday I had some time to investigate parsing expression grammars. I had done work in Lex and Yacc many years back when I was responsible for some kernel functionality and related system management kernel commands for a proprietary commercial operating system. I don&#39;t remember fondly my time working with Yacc. But then I read about PEGs and the Treetop Ruby library. It allows the use of simple grammer rules based in regular expressions and creates a parser ruby class from the grammer that can then be used in a ruby program.</description>
    </item>
    
    <item>
      <title>FoldingText and productivity</title>
      <link>http://rwx.io/posts/folding-text-and-productivity/</link>
      <pubDate>Wed, 26 Dec 2012 19:19:02 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/folding-text-and-productivity/</guid>
      <description>I have been using the FoldingText app for a couple of weeks. It is a very interesting app targeting writers, something I am not, but I was intrigued by the interactivity of this minimalist app. Specifically the ability to add interactive todo lists and timers and have them execute in a text document. Please take a look at the FoldingText Video to get a feel for it, I don&#39;t want to describe ideas that a video shows so clearly.</description>
    </item>
    
    <item>
      <title>Wiki &#43; searchable notes</title>
      <link>http://rwx.io/posts/wiki-plus-searchable-notes/</link>
      <pubDate>Mon, 17 Dec 2012 07:13:25 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/wiki-plus-searchable-notes/</guid>
      <description>For our startup I have been using github wiki to keep the product specs, design docs, user stories, etc organized and up-to-date. The nice thing about github is you can clone the wiki and work on it locally and push changes up to the server. See this writeup for more info. This is handy because you can then work on the wiki using markdown syntax in a regular text editor versus a web page editor.</description>
    </item>
    
    <item>
      <title>Fast PhotoSync from iPhone</title>
      <link>http://rwx.io/posts/fast-photosync-from-iphone/</link>
      <pubDate>Mon, 17 Dec 2012 05:14:20 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/fast-photosync-from-iphone/</guid>
      <description>Doing iOS design and development I find myself capturing images on the iPhone all the time to make notes on. These usually end up being added to my notes or to our project wiki (see Screen Capture Goodness and Wiki + Searchable Notes for more on that).
To get the images from the phone to my Mac I was using Apple&#39;s Photo Stream feature but it took too long and sometime images just didn&#39;t show up on the Mac.</description>
    </item>
    
    <item>
      <title>Screen Capture Coodness</title>
      <link>http://rwx.io/posts/screen-capture-goodness/</link>
      <pubDate>Tue, 17 Jan 2012 14:17:16 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/screen-capture-goodness/</guid>
      <description>tl;wr Take the shell script from below and create a TextExpander snippet to save any image in your OS X clipboard to disk with a unique uuid.png name, and automatically create a markdown image link that is pasted in place in your editor.
verbose When making notes on wireframes, screen designs, activity diagrams, etc, I have a particular workflow where I do a screen capture and want to link the result in my markdown notes or from our project wiki.</description>
    </item>
    
    <item>
      <title>How to measure anything</title>
      <link>http://rwx.io/posts/how-to-measure-anything/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/how-to-measure-anything/</guid>
      <description>Over the past year I have had the opportunity to advise a number of people I have worked with in the past who are starting companies. In the past few years my role had been that of a director of both design and R&amp;D teams and so I enjoy continuing that type of role in providing direction to these exciting new startup ventures.
One thing many of these early phase projects lack is clarity and proper measurement of the problem and opportunity; having only a vague sense of their relative probability of success given their chosen direction versus alternative approaches.</description>
    </item>
    
    <item>
      <title>Simple state machine example</title>
      <link>http://rwx.io/posts/simple-state-machine-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/simple-state-machine-example/</guid>
      <description>I have been investigating using the ruby state_machine gem for a project. State machines can be very handy in simplifying code where objects move through various states. The state_machine gem embeds state machine behavior into any class that uses it. My first test was to create a simple todo list example. The todo list will include a main list that contains items and sub-lists. This allows a way to organize items easily into sub-lists.</description>
    </item>
    
  </channel>
</rss>