<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffeescript on </title>
    <link>http://rwx.io/tags/coffeescript/</link>
    <description>Recent content in Coffeescript on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>patrick@rwx.io (Patrick Goddi)</managingEditor>
    <webMaster>patrick@rwx.io (Patrick Goddi)</webMaster>
    <copyright>Â© 2018 rwx.io</copyright>
    <lastBuildDate>Wed, 15 Oct 2014 08:16:53 -0700</lastBuildDate>
    
	<atom:link href="http://rwx.io/tags/coffeescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fun with Literate CoffeeScript</title>
      <link>http://rwx.io/posts/fun-with-literate-coffeescript/</link>
      <pubDate>Wed, 15 Oct 2014 08:16:53 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/fun-with-literate-coffeescript/</guid>
      <description>I have always been fascinated with the potential of literate programming; combining inline code in my notes. I have many org-mode documents that interactively execute code for various tasks and procedures. These tasks includes certain maintenance activities, or destructive operations I don&#39;t want to get wrong. I have an entire org document devoted to db maintenance, filled with Ruby code to execute complicated db queries and operations. It is nice to see the example code inline in my notes, and be able to modify the code and execute it directly in my notes.</description>
    </item>
    
  </channel>
</rss>