<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on </title>
    <link>http://rwx.io/tags/development/</link>
    <description>Recent content in Development on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>patrick@rwx.io (Patrick Goddi)</managingEditor>
    <webMaster>patrick@rwx.io (Patrick Goddi)</webMaster>
    <copyright>Â© 2018 rwx.io</copyright>
    <lastBuildDate>Fri, 05 Oct 2018 14:34:28 -0700</lastBuildDate>
    
	<atom:link href="http://rwx.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elixir Notes</title>
      <link>http://rwx.io/resources/elixir/</link>
      <pubDate>Fri, 05 Oct 2018 14:34:28 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/resources/elixir/</guid>
      <description>&lt;p&gt;Here are some elixir notes I find useful.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple Audio Analysis with pyAudioAnalysis</title>
      <link>http://rwx.io/posts/simple-audio-analysis-in-python/</link>
      <pubDate>Fri, 08 Apr 2016 16:01:32 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/simple-audio-analysis-in-python/</guid>
      <description>&lt;p&gt;I had a need to do some classification of sets of environmental audio files so started looking for an easy to use Python library that was up for the task. Here are my notes on setting up the &lt;a href=&#34;https://github.com/tyiannak/pyAudioAnalysis&#34; title=&#34;pyAudioAnalysis Library&#34;&gt;pyAudioAnalysis Library&lt;/a&gt; for simple audio classification task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/6e750e1e-d152-11e8-abd7-040cce2069a4.png&#34; alt=&#34;/images/6e750e1e-d152-11e8-abd7-040cce2069a4.png&#34; title=&#34;/images/6e750e1e-d152-11e8-abd7-040cce2069a4.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ancs-example-on-blend-nano</title>
      <link>http://rwx.io/posts/ancs-example-on-blend-nano/</link>
      <pubDate>Wed, 27 Jan 2016 12:19:19 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/ancs-example-on-blend-nano/</guid>
      <description>&lt;p&gt;I decided to try getting &lt;em&gt;Apple Notification Center Service (ANCS)&lt;/em&gt; working with the &lt;a href=&#34;http://redbearlab.com/blenano/&#34; title=&#34;RedBearLab BLE Nano&#34;&gt;RedBearLab BLE Nano&lt;/a&gt;, and this post describes one way to get the Nordic ANCS demo running on a BLE Nano. This post shows how to get an &lt;em&gt;ARM&lt;/em&gt; development environment and toolchain up and running on OS X in order to develop apps for the Nordic BLE SoC&#39;s (e.g. nRF51822 based boards like the BLE Nano).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/nano.png&#34; alt=&#34;/images/nano.png&#34; title=&#34;/images/nano.png&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ANCS Message Display</title>
      <link>http://rwx.io/posts/ancs-message-display/</link>
      <pubDate>Sat, 23 Jan 2016 11:12:00 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/ancs-message-display/</guid>
      <description>&lt;p&gt;Ever want to see that last iPhone message without checking your phone. It is actually fairly easy to create a secondary message display using an Arduino, BLE, and an LCD display to conect to the &lt;em&gt;Apple Notification Center Service&lt;/em&gt; on your iPhone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/6092.jpg&#34; alt=&#34;/images/6092.jpg&#34; title=&#34;/images/6092.jpg&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Self Updating Edison Apps</title>
      <link>http://rwx.io/posts/self-updating-edison/</link>
      <pubDate>Tue, 18 Aug 2015 10:49:20 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/self-updating-edison/</guid>
      <description>&lt;p&gt;One of the challenges I have had in handing out prototype devices is keeping the software up to date. Solutions like &lt;a href=&#34;www.resin.io&#34; title=&#34;resin.io&#34;&gt;resin.io&lt;/a&gt; do a nice job of deploying &lt;a href=&#34;http://bundler.io/&#34; title=&#34;bundler images&#34;&gt;bundler images&lt;/a&gt; onto devices like the Edison. The primary issue I had was the overhead of pushing bundler images around when the only thing that was changing was the node app. It seemed easier to just use git and npm to handle the updates. I may go the resin.io route later, but this early in dev and testing the git route seems simpler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/intel_edison.jpg&#34; alt=&#34;/images/intel_edison.jpg&#34; title=&#34;/images/intel_edison.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>I2C MPU-6050</title>
      <link>http://rwx.io/posts/i2c-mpu-6050/</link>
      <pubDate>Mon, 17 Aug 2015 05:50:59 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/i2c-mpu-6050/</guid>
      <description>&lt;p&gt;I am using an accelerometer in my most recent device to capture gesture and orientation information, as the device itself has no traditional user interface. Since the device is running a node.js app to capture data and push it to a cloud service the first prototype required a quick solution to getting data from an MPU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/mpu6050.jpg&#34; alt=&#34;/images/mpu6050.jpg&#34; title=&#34;/images/mpu6050.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP8266</title>
      <link>http://rwx.io/posts/esp8266/</link>
      <pubDate>Sun, 16 Aug 2015 15:41:39 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/esp8266/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/esp8266.jpg&#34; alt=&#34;/images/esp8266.jpg&#34; title=&#34;/images/esp8266.jpg&#34; /&gt;
I have been building a few prototype devices with the following parts:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Edison Wi-Fi Configuration</title>
      <link>http://rwx.io/posts/edison-wifi-configuration/</link>
      <pubDate>Sun, 16 Aug 2015 13:55:57 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/edison-wifi-configuration/</guid>
      <description>&lt;p&gt;I built a handful of prototype devices using Intel Edison boards to hand out to testers, but one challenge is each tester will bring the devices to their own Wi-Fi environment (home, work, etc).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/intel_edison.jpg&#34; alt=&#34;/images/intel_edison.jpg&#34; title=&#34;/images/intel_edison.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Revisiting Buyer&#39;s Agent app using React.js</title>
      <link>http://rwx.io/posts/revisiting-buyers-agent-app/</link>
      <pubDate>Tue, 09 Jun 2015 11:45:40 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/revisiting-buyers-agent-app/</guid>
      <description>&lt;p&gt;In a past post I showed a &lt;a href=&#34;http://rwx.io/posts/mobile-real-estate-app-v1&#34; title=&#34;Mobile Real Estate App&#34;&gt;Mobile Real Estate App&lt;/a&gt; that was built with Polymer. This time around I will revisit the app but instead use &lt;a href=&#34;https://facebook.github.io/react/&#34; title=&#34;React.js&#34;&gt;React.js&lt;/a&gt;. The Mobile Buyer&#39;s Agent application is a simple web based application used to demonstrate a basic React.js mobile web app. The goal is to allows a real estate buyer&#39;s agent to deliver a personalized mobile app experience to their clients by adding data to a Google spreadsheet. The agent updates a Google spreadsheet, and the web app loads its data from the spreadsheet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.poggr.com/p-kz3NoHhgl:dZkIM34sBnlx?sheetid=1kv5haqhS8bUY_6IoJ6KBY5j42pN2WsY_wscDZSHb_m9&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://s3.amazonaws.com/fooqri-poggs/p-kz3NoHhgl/buyers_agent_1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting Up a New Intel Edison</title>
      <link>http://rwx.io/posts/setting-up-an-edison/</link>
      <pubDate>Wed, 18 Feb 2015 12:42:49 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/setting-up-an-edison/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;//s3.amazonaws.com/rwx-blog/IMG_4161.JPG&#34; style=&#34;height: 400px; display: block; margin: auto;&#34;&gt;&lt;/p&gt;

&lt;p&gt;The Edison is a tiny and amazing computer, and ideal prototyping tool for wearable and IoT experiments. Here are the steps I am currently following to set up the Edison.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Photo Caption Challenge</title>
      <link>http://rwx.io/posts/photo-caption-challenge/</link>
      <pubDate>Thu, 23 Oct 2014 13:18:47 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/photo-caption-challenge/</guid>
      <description>Using Facebook Login, S3, and DynamoDb in browser app One of the challenges of building small mobile web apps without a traditional back-end server is storing global state in a secure way. In my exploration of ways to store state I decided to build a very simple multi-player social app that allows players to participate in a simple photo challenge game. The game author specifies a photo caption and then invites friends to add photo responses that most creatively match the caption.</description>
    </item>
    
    <item>
      <title>Mobile Real Estate App - Version 1</title>
      <link>http://rwx.io/posts/mobile-real-estate-app-v1/</link>
      <pubDate>Wed, 22 Oct 2014 19:46:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/mobile-real-estate-app-v1/</guid>
      <description>&lt;p&gt;I promised a few examples of spreadsheet driven apps. You may remember the &lt;a href=&#34;http://rwx.io/posts/spreadsheet-driven-web-apps/&#34; title=&#34;Hipster List&#34;&gt;Hipster List&lt;/a&gt; was the first example. These are simple web apps that are initialized using data from a Google Spreadsheet once the user loads them in a browser. Using spreadsheets to keep app information current is easy for anyone. There is even a way for users to point the app at their own Google Spreadsheet if the app developer wants to turn feature that on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//www.poggr.com/pe16vKTbVLg::16&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;//s3.amazonaws.com/goddip-poggs/pe16vKTbVLg/screen1.png&#34;  style=&#34;height: 400px; display: block; margin: auto&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>d3 charts - wrapping &#39;NVD3 Charts&#39; in a web component</title>
      <link>http://rwx.io/posts/d3-nvd3-charts/</link>
      <pubDate>Fri, 17 Oct 2014 06:39:57 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/d3-nvd3-charts/</guid>
      <description>In my continued experiments with Polymer, I created a web component that wraps NVD3 - a reusable chart library for d3.js. As part of the activity I ported all of the NVD3 example charts to a web component I am calling &amp;lt;goddip-charts&amp;gt;. The component is contained in a pogg on poggr, as this is where I do my experimenting and it allows me to code and serve the project documents in the one place.</description>
    </item>
    
    <item>
      <title>Spreadsheet Driven Web Apps</title>
      <link>http://rwx.io/posts/spreadsheet-driven-web-apps/</link>
      <pubDate>Wed, 15 Oct 2014 14:34:28 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/spreadsheet-driven-web-apps/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/64a285b2-d092-11e8-ac27-040cce2069a4.png&#34; alt=&#34;/images/64a285b2-d092-11e8-ac27-040cce2069a4.png&#34; title=&#34;/images/64a285b2-d092-11e8-ac27-040cce2069a4.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using Google spreadsheets is a great way for a team to collaborate on a data set but it leaves a bit to be desired on presentation of the data. To that end I will be creating a series of fun examples showing how to build small interactive apps that utilize &lt;em&gt;Google Docs&lt;/em&gt; and &lt;em&gt;Polymer&lt;/em&gt; web components to quickly bring data to life. In this series I will be using a Google spreadsheet as the data source, but other data sources are possible, and I will get to those as well in future posts.&#39;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CoreData.SQLDebug for RubyMotion</title>
      <link>http://rwx.io/posts/coredata-sqldebug-for-rubymotion/</link>
      <pubDate>Sat, 01 Jun 2013 08:10:07 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/coredata-sqldebug-for-rubymotion/</guid>
      <description>It is sometimes handy to turn on CoreData.SQLDebug in the simulator when debugging a Core Data issue. I have found the output to be very useful in finding the hard to find little bugs that pop-up between restkit and core data. It can also help find performance issues with the database. Unfortunately there isn&#39;t any documentation for how to do this in RubyMotion. I found one solution that works to a degree.</description>
    </item>
    
    <item>
      <title>Getting RKLogConfigureByName working in RubyMotion</title>
      <link>http://rwx.io/posts/getting-rklogconfigurebyname-working-in-rubymotion/</link>
      <pubDate>Thu, 07 Mar 2013 15:21:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/getting-rklogconfigurebyname-working-in-rubymotion/</guid>
      <description>Just a quick note, I was getting an undefined constant error for RKLogConfigureByName, the standard way of setting up logging in RestKit.
It seems that the #define statements in the /vendor/Pods/RestKit/Code/Support/RKLog.h/ file are not getting picked up. I am using the pod and loading with RubyMotion pod support, so I am not sure what the issue is. I will need to investigate further but this quick workaround works, just call the lower-level method mapped via the #define.</description>
    </item>
    
    <item>
      <title>Getting RKLogConfigureByName working in RubyMotion</title>
      <link>http://rwx.io/posts/getting-rklogconfigbyname-working/</link>
      <pubDate>Thu, 07 Mar 2013 15:21:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/getting-rklogconfigbyname-working/</guid>
      <description>Just a quick note, I was getting an undefined constant error for RKLogConfigureByName, the standard way of setting up logging in RestKit. It seems that the #define statements in the /vendor/Pods/RestKit/Code/Support/RKLog.h file are not getting picked up. I am using the pod and loading with RubyMotion pod support, so I am not sure what the issue is. I will need to investigate further but this quick workaround works, just call the lower-level method mapped via the #define.</description>
    </item>
    
    <item>
      <title>Trying out Pixate - CSS for iOS app Development</title>
      <link>http://rwx.io/posts/trying-out-pixate-css-for-ios-app-development/</link>
      <pubDate>Wed, 23 Jan 2013 22:09:35 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/trying-out-pixate-css-for-ios-app-development/</guid>
      <description>Recently I have been using RubyMotion for iOS development; I really appreciate developing in Ruby, and prefer Emacs to Xcode. Compared to using interface builder, styling apps can be a challenge. It is possible to use RubyMotion with XIB files created in Xcode&#39;s Interface Builder, but I have been trying to avoid this. I am striving for a more web-app like design and development workflow.
I have been using teacup, which takes a declarative approach to styling and uses a CSS-like DSL.</description>
    </item>
    
    <item>
      <title>Parsing a simple markdown style list in Ragel</title>
      <link>http://rwx.io/posts/parsing-a-simple-markdown-stle-list-in-ragel/</link>
      <pubDate>Sat, 19 Jan 2013 13:04:50 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/parsing-a-simple-markdown-stle-list-in-ragel/</guid>
      <description>In an earlier post Simple state machine example, I provided an example of using the Ruby state_machine gem to create a state machine for handling a simple list of tasks. In this post I will provide a similar but not exactly compatible description of building a parser to read lists from a text file. In this example I use the markdown syntax for lists, where items can be placed hierarchically, thus removing the need for a separate &#34;</description>
    </item>
    
    <item>
      <title>Rubymotion iOS Applications</title>
      <link>http://rwx.io/posts/rubymotion-ios-apps/</link>
      <pubDate>Thu, 17 Jan 2013 11:28:47 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/rubymotion-ios-apps/</guid>
      <description>I wanted to make a quick note that I have been using RubyMotion the past few months. I don&#39;t mind building natively in Objective-C but since I have been coding both the app and the server side I found switching between Objective-C and Ruby a bit frustrating. I really find Objective-C to be too verbose a syntax for my taste. I also prefer to code in emacs vs. the Xcode UI.</description>
    </item>
    
    <item>
      <title>Lean API on Heroku</title>
      <link>http://rwx.io/posts/lean-api-on-heroku/</link>
      <pubDate>Thu, 17 Jan 2013 08:46:48 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/lean-api-on-heroku/</guid>
      <description>We have recently been working on an iOS app that requires a backend service. In this case I was looking for something leaner, simpler, and faster than Rails since it was only an API for a mobile app, no web front-end. I wanted it to be very lean and scalable so we could make it through early user testing without spending a lot on servers. Ok, ideally without spending anything on servers; basically how much could I squeeze out of one Heroku worker.</description>
    </item>
    
    <item>
      <title>Refactoring: making master programmers</title>
      <link>http://rwx.io/posts/refactoring-making-master-programmers/</link>
      <pubDate>Mon, 14 Jan 2013 16:34:42 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/refactoring-making-master-programmers/</guid>
      <description>There is often a tension between product management and engineering when it comes to time spent adding new features vs. time spent in code refactoring. One could even explain this in terms of top line vs bottom line descriptions. Features mean sales, codebase is an asset, and poor code quality is a liability that affects cost and thus profit. Sloppy, risky, or fragile code is even called &#34;technical debt&#34; in many circles.</description>
    </item>
    
    <item>
      <title>Treetop and Parsing Expression Grammars (PEGs)</title>
      <link>http://rwx.io/posts/treetop_and_pegs/</link>
      <pubDate>Sun, 30 Dec 2012 04:54:59 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/treetop_and_pegs/</guid>
      <description>Over the holiday I had some time to investigate parsing expression grammars. I had done work in Lex and Yacc many years back when I was responsible for some kernel functionality and related system management kernel commands for a proprietary commercial operating system. I don&#39;t remember fondly my time working with Yacc. But then I read about PEGs and the Treetop Ruby library. It allows the use of simple grammer rules based in regular expressions and creates a parser ruby class from the grammer that can then be used in a ruby program.</description>
    </item>
    
    <item>
      <title>Simple state machine example</title>
      <link>http://rwx.io/posts/simple-state-machine-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/simple-state-machine-example/</guid>
      <description>I have been investigating using the ruby state_machine gem for a project. State machines can be very handy in simplifying code where objects move through various states. The state_machine gem embeds state machine behavior into any class that uses it. My first test was to create a simple todo list example. The todo list will include a main list that contains items and sub-lists. This allows a way to organize items easily into sub-lists.</description>
    </item>
    
  </channel>
</rss>