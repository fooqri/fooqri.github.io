<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on </title>
    <link>http://rwx.io/tags/emacs/</link>
    <description>Recent content in Emacs on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>patrick@rwx.io (Patrick Goddi)</managingEditor>
    <webMaster>patrick@rwx.io (Patrick Goddi)</webMaster>
    <copyright>Â© 2018 rwx.io</copyright>
    <lastBuildDate>Wed, 17 Oct 2018 10:41:22 -0700</lastBuildDate>
    
	<atom:link href="http://rwx.io/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding Hyperlinks to Logger Output</title>
      <link>http://rwx.io/posts/logging-source-line-location-elixir/</link>
      <pubDate>Wed, 17 Oct 2018 10:41:22 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/logging-source-line-location-elixir/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/PMLogger.png&#34; alt=&#34;/images/PMLogger.png&#34; title=&#34;/images/PMLogger.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When looking at Logger output in the terminal, many times it would be nice to simply click on a message and have it open Emacs to the correct location in the corresponding file. There are a variety of ways to accomplish this, I chose to use terminal hyperlinks along with adding an Emacs URI protocol to my system.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS URI Protocol Handler</title>
      <link>http://rwx.io/posts/osx-uri-protocol-handler/</link>
      <pubDate>Sun, 14 Oct 2018 15:52:54 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/osx-uri-protocol-handler/</guid>
      <description>&lt;p&gt;Strangely over the past week I ran into the need for a URI protocol handler on three different occasions. Instead of looking for three separate existing handlers that might work, I decided to write a single generic handler.  The solution is a simple URI protocol router that forwards requests to shell scripts that handle the protocol requests. Below I describe some of the details; you can also find the end result on github: &lt;a href=&#34;https://github.com/fooqri/uri-handler&#34; title=&#34;uri-handler&#34;&gt;uri-handler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Org Export Configurations</title>
      <link>http://rwx.io/posts/org-export-configurations/</link>
      <pubDate>Fri, 11 Mar 2016 15:51:20 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/org-export-configurations/</guid>
      <description>Emacs org mode offers a variety of export options that make it easy to look at your notes in different formats, or perhaps make them available for others to view. Three I use regularly are markdown, mindmap, and reveal presentation.
My approach to Note Taking The best way to learn something is to sumarize the topic in your own words, in your own context, and present it to others with concrete examples.</description>
    </item>
    
    <item>
      <title>Deft &#43; Org for Notes</title>
      <link>http://rwx.io/posts/deft-and-orgmode-for-notes/</link>
      <pubDate>Thu, 10 Mar 2016 15:44:58 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/deft-and-orgmode-for-notes/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://rwx.io/posts/nvalt-and-emacs&#34; title=&#34;nvALT and Emacs post&#34;&gt;nvALT and Emacs post&lt;/a&gt; I described an integration between &lt;em&gt;nvAlt&lt;/em&gt; and &lt;em&gt;Emacs&lt;/em&gt; using &lt;a href=&#34;http://jblevins.org/projects/deft/&#34; title=&#34;Deft&#34;&gt;Deft&lt;/a&gt; for &lt;em&gt;markdown&lt;/em&gt; notes. I the past year I have moved to using &lt;em&gt;Deft&lt;/em&gt; for &lt;em&gt;org&lt;/em&gt; notes rather than &lt;em&gt;markdown&lt;/em&gt; notes. The nice thing about combining Deft with Org is that your notes are indexed and easy to find using Deft, but also retain all of the power of Org to orgainize and present information. For example typing &lt;em&gt;decision boundary&lt;/em&gt; into &lt;strong&gt;deft&lt;/strong&gt; quickly cuts down hundreds of org text notes to the handful that contain the words &lt;strong&gt;decision&lt;/strong&gt; and &lt;strong&gt;boundary&lt;/strong&gt; in them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rwx.io/images/deft-v0.6.gif&#34; alt=&#34;/images/deft-v0.6.gif&#34; title=&#34;/images/deft-v0.6.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Org Mode ES2015&#43; Code Blocks (updated)</title>
      <link>http://rwx.io/posts/org-with-babel-node-updated/</link>
      <pubDate>Wed, 09 Mar 2016 16:57:39 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/org-with-babel-node-updated/</guid>
      <description>&lt;p&gt;Babel 6x is a significant change from Babel 5x, as the &lt;em&gt;cli&lt;/em&gt; is now a separate node module called &lt;em&gt;babel-cli&lt;/em&gt; and transforms are now also delivered as separate packages. First make a few changes to the emacs environment so you can use JavaScript in &lt;strong&gt;org mode&lt;/strong&gt;, as well as find local &lt;em&gt;node.js&lt;/em&gt; modules you have installed. Replace &lt;code&gt;~/org/node_modules&lt;/code&gt; in the configuration below with the location of any local node modules you want to use. Using this approach you don&#39;t have to pollute the global node_module directory if you don&#39;t want to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#+begin_src js :cmd &amp;quot;org-babel-node&amp;quot; :results output drawer
  let arr = [1, 2]; 
  let [x, y] = arr;

   console.log(x);
   console.log(y);
#+end_src

:RESULTS:
1
2
:END:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Org Mode ES2015&#43; Code Blocks</title>
      <link>http://rwx.io/posts/org-mode-es2015plus-code-blocks/</link>
      <pubDate>Tue, 06 Oct 2015 16:57:01 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/org-mode-es2015plus-code-blocks/</guid>
      <description>Update: I have updated instructions for installing and using the recently released Babel 6 with org mode.
I use emacs org mode to keep notes including code nodes that support inline execution. It is convenient for keeping useful code snippets, as well as experimenting while taking notes. Because of features like Org + Deft it is really easy to find the sweet spot between keeping coding notes organized but also easily searched.</description>
    </item>
    
    <item>
      <title>Fun with Literate CoffeeScript</title>
      <link>http://rwx.io/posts/fun-with-literate-coffeescript/</link>
      <pubDate>Wed, 15 Oct 2014 08:16:53 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/fun-with-literate-coffeescript/</guid>
      <description>I have always been fascinated with the potential of literate programming; combining inline code in my notes. I have many org-mode documents that interactively execute code for various tasks and procedures. These tasks includes certain maintenance activities, or destructive operations I don&#39;t want to get wrong. I have an entire org document devoted to db maintenance, filled with Ruby code to execute complicated db queries and operations. It is nice to see the example code inline in my notes, and be able to modify the code and execute it directly in my notes.</description>
    </item>
    
    <item>
      <title>nvALT and Emacs</title>
      <link>http://rwx.io/posts/nvalt-and-emacs/</link>
      <pubDate>Mon, 04 Mar 2013 11:19:13 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/nvalt-and-emacs/</guid>
      <description>In a previous post wiki-searchable-notes I mentioned that I was using nvALT for note taking. nvALT is a very simple way to create and search notes and store them in flat files that can be used by other tools. One use is publishing to a github wiki, today I will discuss another.
I am an Emacs user and often found myself dropping out of Emacs to find a note I needed in nvALT.</description>
    </item>
    
    <item>
      <title>Emacs Experimental Hyper-Key Mappings</title>
      <link>http://rwx.io/posts/emacs-experimental-hyperkey-mappings/</link>
      <pubDate>Wed, 30 Jan 2013 10:19:10 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/emacs-experimental-hyperkey-mappings/</guid>
      <description>In a previous post Remapping My Caps Lock Key I mentioned that I remapped my caps-lock key to escape, but also created a &#34;hyper-key&#34; (ctrl-shift-cmd-opt) when the caps-lock key is held down. This opens up a keyboard worth of new shortcuts for emacs. Here are a few I have been playing with for the past few days. An alternative key mapping would be to map the hyper key to holding down the tab key, if you already have the caps lock key mapped to control, and thus muscle memory might preclude this mapping from working for you.</description>
    </item>
    
    <item>
      <title>Remapping My Caps Lock Key</title>
      <link>http://rwx.io/posts/remapping-my-caps-lock-key/</link>
      <pubDate>Sun, 30 Dec 2012 07:16:24 -0700</pubDate>
      <author>patrick@rwx.io (Patrick Goddi)</author>
      <guid>http://rwx.io/posts/remapping-my-caps-lock-key/</guid>
      <description>I&#39;ve had my caps lock key mapped to the control key for the last few months as I have migrated back to Emacs from TextMate. It was a slight improvement over the placement of the control key but not a huge improvement. I came across this article: A Useful CAPS-Lock Key from Brett Terpstra and decided to give his mapping a try. This mapping requires free third party software, but I was particularly intrigued not by the escape key mapping, which is very handy, but by the &#34;</description>
    </item>
    
  </channel>
</rss>